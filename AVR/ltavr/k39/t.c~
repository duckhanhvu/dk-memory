/*****************************************************
This program was produced by the
CodeWizardAVR V2.05.0 Professional
Automatic Program Generator
© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 9/21/2015
Author  : NeVaDa
Company : 
Comments: 


Chip type               : ATmega16
Program type            : Application
AVR Core Clock frequency: 16.000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 256
*****************************************************/

#include <mega16.h>
#include <delay.h>




#define COL1 PIND.4
#define COL2 PIND.5
#define COL3 PIND.6
#define COL4 PIND.7

#define ROW1 PORTD.3
#define ROW2 PORTD.2
#define ROW3 PORTD.1
#define ROW4 PORTD.0  

static unsigned char led_7[9]={0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
unsigned char hien[4]={0,0,0,0};


                             
void quetled(void)
 {
  int j;
  int x=0b00000111;
  for(j=0;j<4;j++)
  {
   PORTC=0xFF;
   PORTC=x;
   PORTA=hien[j];
   delay_ms(1);
   x=(x>>1)+0b00001000;
  }
 }

unsigned char phat_hien_phim_nhan(void){
if((COL1==0)|(COL2==0)|(COL3==0)|(COL4==0))
return 1;
else return 0;
}
void xet_hang(unsigned char i){
ROW1=ROW2=ROW3=ROW4 =1;
if(i==0){
   ROW1=0;
}
else if(i==1){
   ROW2=0;
}
else if(i==2){
   ROW3=0;
}
else{
   ROW4=0;
}   
}
unsigned char phimnhan_4x4[4][4]={  1,2,3,4,
                                    5,6,7,8,
                                    9,1,1,2,
                                    3,4,5,6};
unsigned int Get_phimnhan(void){
unsigned char i;
ROW1=ROW2=ROW3=ROW4=0;
if(phat_hien_phim_nhan()){
delay_ms(5);
if(phat_hien_phim_nhan()){
for(i=0;i<4;i++){
xet_hang(i);
if(!COL10) return phimnhan_4x4[i][0];
if(!COL20) return phimnhan_4x4[i][1];
if(!COL30) return phimnhan_4x4[i][2];
if(!COL40) return phimnhan_4x4[i][3];
}
}
}
return 0;
}


// Declare your global variables here

void main(void) {

// Declare your local variables here

// Input/Output Ports initialization
// Port A initialization
// Func7=In Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out 
// State7=T State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0 
PORTA=0x00;
DDRA=0b11111111;

// Port B initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTB=0x00;
DDRB=0x00;

// Port C initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTC=0b00001111;
DDRC=0b00001111;

// Port D initialization
// Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=Out 
// State7=P State6=P State5=P State4=P State3=1 State2=1 State1=1 State0=1 
PORTD=0xFF;
DDRD=0x0F;

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
// Mode: Normal top=0xFF
// OC0 output: Disconnected
TCCR0=0x00;
TCNT0=0x00;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: Timer1 Stopped
// Mode: Normal top=0xFFFF
// OC1A output: Discon.
// OC1B output: Discon.
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=0x00;
TCCR1B=0x00;
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0x00;
TCCR2=0x00;
TCNT2=0x00;
OCR2=0x00;

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
// INT2: Off
MCUCR=0x00;
MCUCSR=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x00;

// USART initialization
// USART disabled
UCSRB=0x00;

// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
SFIOR=0x00;

// ADC initialization
// ADC disabled
ADCSRA=0x00;

// SPI initialization
// SPI disabled
SPCR=0x00;

// TWI initialization
// TWI disabled
TWCR=0x00;

while (1)
      {
       
       int x;
       int key;
       key=Get_phimnhan();
       if(key)
       {
        for(x=0;x<3;x++)
        hien[x]=hien[x+1];
        hien[3]=led_7[key];
        
       }
        quetled();
      }
}