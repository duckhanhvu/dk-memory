;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10/9/2015
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// Alphanumeric LCD Module functions
;#include <alcd.h>
;
;#define ADC_VREF_TYPE 0x60
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 0024 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0025 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0026 // Delay needed for the stabilization of the ADC input voltage
; 0000 0027 delay_us(10);
;PCODE: $00000012 VOL: 0
; 0000 0028 // Start the AD conversion
; 0000 0029 ADCSRA|=0x40;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 002A // Wait for the AD conversion to complete
; 0000 002B while ((ADCSRA & 0x10)==0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002C ADCSRA|=0x10;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002D return ADCH;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 002E }
;PCODE: $00000020 VOL: 0
;void lCD_hienso(unsigned int n){
; 0000 002F void lCD_hienso(unsigned int n){
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0030 unsigned int m=0,a;
; 0000 0031 while(n!=0){
;PCODE: $00000023 VOL: 0
;	n -> Y+4
;	m -> R16,R17
;	a -> R18,R19
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0032   m=m*10+n%10;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0033   n=n/10;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0034 }
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0035 while(m!=0){
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0036   a=m%10;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0037   m=m/10;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0038 
; 0000 0039   lcd_putchar(a+48);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 003A }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 003B }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;// Declare your global variables here
;
;void main(void)
; 0000 003F {
;PCODE: $0000004D VOL: 0
; 0000 0040 // Declare your local variables here
; 0000 0041 
; 0000 0042 // Input/Output Ports initialization
; 0000 0043 // Port A initialization
; 0000 0044 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0045 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0046 PORTA=0x01;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0047 DDRA=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0048 
; 0000 0049 // Port B initialization
; 0000 004A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 004B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 004C PORTB=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 004D DDRB=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 004E 
; 0000 004F // Port C initialization
; 0000 0050 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0051 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0052 PORTC=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0053 DDRC=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0054 
; 0000 0055 // Port D initialization
; 0000 0056 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0057 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0058 PORTD=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0059 DDRD=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 005A 
; 0000 005B // Timer/Counter 0 initialization
; 0000 005C // Clock source: System Clock
; 0000 005D // Clock value: Timer 0 Stopped
; 0000 005E // Mode: Normal top=0xFF
; 0000 005F // OC0 output: Disconnected
; 0000 0060 TCCR0=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0061 TCNT0=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0062 OCR0=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0063 
; 0000 0064 // Timer/Counter 1 initialization
; 0000 0065 // Clock source: System Clock
; 0000 0066 // Clock value: Timer1 Stopped
; 0000 0067 // Mode: Normal top=0xFFFF
; 0000 0068 // OC1A output: Discon.
; 0000 0069 // OC1B output: Discon.
; 0000 006A // Noise Canceler: Off
; 0000 006B // Input Capture on Falling Edge
; 0000 006C // Timer1 Overflow Interrupt: Off
; 0000 006D // Input Capture Interrupt: Off
; 0000 006E // Compare A Match Interrupt: Off
; 0000 006F // Compare B Match Interrupt: Off
; 0000 0070 TCCR1A=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0071 TCCR1B=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0072 TCNT1H=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0073 TCNT1L=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0074 ICR1H=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0075 ICR1L=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0076 OCR1AH=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0077 OCR1AL=0x00;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0078 OCR1BH=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0079 OCR1BL=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 007A 
; 0000 007B // Timer/Counter 2 initialization
; 0000 007C // Clock source: System Clock
; 0000 007D // Clock value: Timer2 Stopped
; 0000 007E // Mode: Normal top=0xFF
; 0000 007F // OC2 output: Disconnected
; 0000 0080 ASSR=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0081 TCCR2=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0082 TCNT2=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0083 OCR2=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0084 
; 0000 0085 // External Interrupt(s) initialization
; 0000 0086 // INT0: Off
; 0000 0087 // INT1: Off
; 0000 0088 // INT2: Off
; 0000 0089 MCUCR=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 008A MCUCSR=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 008B 
; 0000 008C // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 008D TIMSK=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 008E 
; 0000 008F // USART initialization
; 0000 0090 // USART disabled
; 0000 0091 UCSRB=0x00;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0092 
; 0000 0093 // Analog Comparator initialization
; 0000 0094 // Analog Comparator: Off
; 0000 0095 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0096 ACSR=0x80;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0097 SFIOR=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0098 
; 0000 0099 // ADC initialization
; 0000 009A // ADC Clock frequency: 500.000 kHz
; 0000 009B // ADC Voltage Reference: AVCC pin
; 0000 009C // ADC Auto Trigger Source: Free Running
; 0000 009D // Only the 8 most significant bits of
; 0000 009E // the AD conversion result are used
; 0000 009F ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00A0 ADCSRA=0xA5;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00A1 SFIOR&=0x1F;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00A2 
; 0000 00A3 // SPI initialization
; 0000 00A4 // SPI disabled
; 0000 00A5 SPCR=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00A6 
; 0000 00A7 // TWI initialization
; 0000 00A8 // TWI disabled
; 0000 00A9 TWCR=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00AA 
; 0000 00AB // Alphanumeric LCD initialization
; 0000 00AC // Connections specified in the
; 0000 00AD // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00AE // RS - PORTD Bit 0
; 0000 00AF // RD - PORTD Bit 1
; 0000 00B0 // EN - PORTD Bit 2
; 0000 00B1 // D4 - PORTD Bit 4
; 0000 00B2 // D5 - PORTD Bit 5
; 0000 00B3 // D6 - PORTD Bit 6
; 0000 00B4 // D7 - PORTD Bit 7
; 0000 00B5 // Characters/line: 16
; 0000 00B6 lcd_init(16);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00B7 
; 0000 00B8 while (1)
;PCODE: $0000009A VOL: 0
; 0000 00B9       {
; 0000 00BA       // Place your code here
; 0000 00BB       float i, adc;
; 0000 00BC       adc=read_adc(0);
;PCODE: $0000009B VOL: 0
;	i -> Y+4
;	adc -> Y+0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00BD      // adc=(adc*5000)/255;
; 0000 00BE       lcd_gotoxy(0,0);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00BF       lCD_hienso(adc);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00C0       //delay_ms(50);
; 0000 00C1       }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00C2 }
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
