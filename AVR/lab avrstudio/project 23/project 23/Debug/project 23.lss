
project 23.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000322  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000322  00000396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000007a4  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000000fe  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000099  00000000  00000000  00000c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000059e  00000000  00000000  00000cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001ad  00000000  00000000  00001295  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000473  00000000  00000000  00001442  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  000018b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000189  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000227  00000000  00000000  00001ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  7a:	0c 94 8f 01 	jmp	0x31e	; 0x31e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ghi_byte_command>:

 
}
void ghi_byte_command(unsigned char cmnd)
{
	LCD_DATA_PORT = cmnd;
  82:	8b bb       	out	0x1b, r24	; 27
	LCD_CNTRL_PORT &= ~(1<<LCD_RW_PIN);
  84:	a9 98       	cbi	0x15, 1	; 21
	LCD_CNTRL_PORT &= ~(1<<LCD_RS_PIN);
  86:	a8 98       	cbi	0x15, 0	; 21
 
	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
  88:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	82 e0       	ldi	r24, 0x02	; 2
  8c:	8a 95       	dec	r24
  8e:	f1 f7       	brne	.-4      	; 0x8c <ghi_byte_command+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <ghi_byte_command+0x10>
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
  92:	aa 98       	cbi	0x15, 2	; 21
  94:	85 e8       	ldi	r24, 0x85	; 133
  96:	8a 95       	dec	r24
  98:	f1 f7       	brne	.-4      	; 0x96 <ghi_byte_command+0x14>
  9a:	00 00       	nop
	_delay_us(100);
}
  9c:	08 95       	ret

0000009e <ghi_byte_DDRAM>:
 
void ghi_byte_DDRAM(unsigned char data)
{
	LCD_DATA_PORT = data;
  9e:	8b bb       	out	0x1b, r24	; 27
	LCD_CNTRL_PORT &= ~(1<<LCD_RW_PIN);
  a0:	a9 98       	cbi	0x15, 1	; 21
	LCD_CNTRL_PORT |= (1<<LCD_RS_PIN);
  a2:	a8 9a       	sbi	0x15, 0	; 21
 
	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
  a4:	aa 9a       	sbi	0x15, 2	; 21
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <ghi_byte_DDRAM+0xa>
  ac:	00 c0       	rjmp	.+0      	; 0xae <ghi_byte_DDRAM+0x10>
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
  ae:	aa 98       	cbi	0x15, 2	; 21
  b0:	85 e8       	ldi	r24, 0x85	; 133
  b2:	8a 95       	dec	r24
  b4:	f1 f7       	brne	.-4      	; 0xb2 <ghi_byte_DDRAM+0x14>
  b6:	00 00       	nop
	_delay_us(100);
}
  b8:	08 95       	ret

000000ba <LCD_init>:
 
 
void LCD_init()
{
	LCD_CNTRL_DDR = 0xFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	84 bb       	out	0x14, r24	; 20
	LCD_CNTRL_PORT = 0x00;
  be:	15 ba       	out	0x15, r1	; 21
	LCD_DATA_DDR = 0xFF;
  c0:	8a bb       	out	0x1a, r24	; 26
	LCD_DATA_PORT = 0x00;
  c2:	1b ba       	out	0x1b, r1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	8f e0       	ldi	r24, 0x0F	; 15
  c6:	97 e2       	ldi	r25, 0x27	; 39
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCD_init+0xe>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCD_init+0x14>
  ce:	00 00       	nop
 
	_delay_ms(10);
	ghi_byte_command(0x38);
  d0:	88 e3       	ldi	r24, 0x38	; 56
  d2:	0e 94 41 00 	call	0x82	; 0x82 <ghi_byte_command>
	ghi_byte_command(0x0C);
  d6:	8c e0       	ldi	r24, 0x0C	; 12
  d8:	0e 94 41 00 	call	0x82	; 0x82 <ghi_byte_command>
	ghi_byte_command(0x01);
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 41 00 	call	0x82	; 0x82 <ghi_byte_command>
  e2:	8f e0       	ldi	r24, 0x0F	; 15
  e4:	97 e2       	ldi	r25, 0x27	; 39
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_init+0x2c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_init+0x32>
  ec:	00 00       	nop
	_delay_ms(10);
	ghi_byte_command(0x06);
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	0e 94 41 00 	call	0x82	; 0x82 <ghi_byte_command>
}
  f4:	08 95       	ret

000000f6 <move>:
 
	//ghi_mang_byte(firstAddress[y-1] + x-1);
	//_delay_ms(10);	
	
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
  f6:	82 95       	swap	r24
  f8:	88 0f       	add	r24, r24
  fa:	88 0f       	add	r24, r24
  fc:	80 7c       	andi	r24, 0xC0	; 192
  fe:	86 0f       	add	r24, r22
	
	ghi_byte_command(x);
 100:	81 5c       	subi	r24, 0xC1	; 193
 102:	0e 94 41 00 	call	0x82	; 0x82 <ghi_byte_command>
 106:	8f e0       	ldi	r24, 0x0F	; 15
 108:	97 e2       	ldi	r25, 0x27	; 39
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <move+0x14>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <move+0x1a>
 110:	00 00       	nop
	
	_delay_ms(10);
}
 112:	08 95       	ret

00000114 <LCD_print>:
 
void LCD_print(char *string)
{
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	ec 01       	movw	r28, r24
	unsigned char i;
 
	while(string[i]!=0)
 11c:	10 e0       	ldi	r17, 0x00	; 0
 11e:	88 81       	ld	r24, Y
 120:	88 23       	and	r24, r24
 122:	49 f0       	breq	.+18     	; 0x136 <LCD_print+0x22>
	{
		ghi_byte_DDRAM(string[i]);
 124:	0e 94 4f 00 	call	0x9e	; 0x9e <ghi_byte_DDRAM>
		i++;
 128:	1f 5f       	subi	r17, 0xFF	; 255
 
void LCD_print(char *string)
{
	unsigned char i;
 
	while(string[i]!=0)
 12a:	fe 01       	movw	r30, r28
 12c:	e1 0f       	add	r30, r17
 12e:	f1 1d       	adc	r31, r1
 130:	80 81       	ld	r24, Z
 132:	88 23       	and	r24, r24
 134:	b9 f7       	brne	.-18     	; 0x124 <LCD_print+0x10>
	{
		ghi_byte_DDRAM(string[i]);
		i++;
	}
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	08 95       	ret

0000013e <main>:
 
int main(void)
{
	unsigned char i; 
    unsigned int number;
    LCD_init();
 13e:	0e 94 5d 00 	call	0xba	; 0xba <LCD_init>
	
	LCD_print("khanh");
 142:	80 e6       	ldi	r24, 0x60	; 96
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_print>
    eeprom_write_byte ((uint8_t *)46, 10);
 14a:	8e e2       	ldi	r24, 0x2E	; 46
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	6a e0       	ldi	r22, 0x0A	; 10
 150:	0e 94 82 01 	call	0x304	; 0x304 <__eewr_byte_m16>
	

 

 
}
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	08 95       	ret

0000015a <LCD_nhapnhay>:
	}
}
 
void LCD_nhapnhay()
{
	ghi_byte_command(0x08);
 15a:	88 e0       	ldi	r24, 0x08	; 8
 15c:	0e 94 41 00 	call	0x82	; 0x82 <ghi_byte_command>
 160:	8f e3       	ldi	r24, 0x3F	; 63
 162:	9d e0       	ldi	r25, 0x0D	; 13
 164:	a3 e0       	ldi	r26, 0x03	; 3
 166:	81 50       	subi	r24, 0x01	; 1
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	a0 40       	sbci	r26, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <LCD_nhapnhay+0xc>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_nhapnhay+0x16>
 170:	00 00       	nop
	_delay_ms(250);
	ghi_byte_command(0x0C);
 172:	8c e0       	ldi	r24, 0x0C	; 12
 174:	0e 94 41 00 	call	0x82	; 0x82 <ghi_byte_command>
 178:	8f e3       	ldi	r24, 0x3F	; 63
 17a:	9d e0       	ldi	r25, 0x0D	; 13
 17c:	a3 e0       	ldi	r26, 0x03	; 3
 17e:	81 50       	subi	r24, 0x01	; 1
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	a0 40       	sbci	r26, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <LCD_nhapnhay+0x24>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LCD_nhapnhay+0x2e>
 188:	00 00       	nop
	_delay_ms(250);
}
 18a:	08 95       	ret

0000018c <LCD_dich>:
 
void LCD_dich(unsigned char direction)
{
	if(direction == 0)
 18c:	88 23       	and	r24, r24
 18e:	21 f4       	brne	.+8      	; 0x198 <LCD_dich+0xc>
		ghi_byte_command(0x18);
 190:	88 e1       	ldi	r24, 0x18	; 24
 192:	0e 94 41 00 	call	0x82	; 0x82 <ghi_byte_command>
 196:	03 c0       	rjmp	.+6      	; 0x19e <LCD_dich+0x12>
	else
		ghi_byte_command(0x1C);
 198:	8c e1       	ldi	r24, 0x1C	; 28
 19a:	0e 94 41 00 	call	0x82	; 0x82 <ghi_byte_command>
 19e:	8f e7       	ldi	r24, 0x7F	; 127
 1a0:	9a e1       	ldi	r25, 0x1A	; 26
 1a2:	a6 e0       	ldi	r26, 0x06	; 6
 1a4:	81 50       	subi	r24, 0x01	; 1
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	a0 40       	sbci	r26, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <LCD_dich+0x18>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_dich+0x22>
 1ae:	00 00       	nop
 
	_delay_ms(500);
}
 1b0:	08 95       	ret

000001b2 <printnumber_lcd>:

void printnumber_lcd(uint8_t number){
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
		number=number%temp;
		temp=temp/10;
		putchar_lcd(a+48);
	}*/
			int a,b,c,d,e;
	    a=number/10000;
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	60 e1       	ldi	r22, 0x10	; 16
 1be:	77 e2       	ldi	r23, 0x27	; 39
 1c0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <__divmodhi4>
 1c4:	9b 01       	movw	r18, r22
	    //putchar_lcd(a+48);
		number=number%10000;
	    b=number/1000;
 1c6:	68 ee       	ldi	r22, 0xE8	; 232
 1c8:	73 e0       	ldi	r23, 0x03	; 3
 1ca:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <__divmodhi4>
 1ce:	f6 2e       	mov	r15, r22
 1d0:	46 2f       	mov	r20, r22
 1d2:	57 2f       	mov	r21, r23
	    //putchar_lcd(b+48);
	    number=number%1000;
	    c=number/100;
 1d4:	64 e6       	ldi	r22, 0x64	; 100
 1d6:	0e 94 4f 01 	call	0x29e	; 0x29e <__udivmodqi4>
 1da:	08 2f       	mov	r16, r24
 1dc:	89 2f       	mov	r24, r25
 1de:	e0 2f       	mov	r30, r16
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
	    //putchar_lcd(c+48);	
	    number=number%100;
	    d=number/10;
 1e2:	6a e0       	ldi	r22, 0x0A	; 10
 1e4:	0e 94 4f 01 	call	0x29e	; 0x29e <__udivmodqi4>
 1e8:	18 2f       	mov	r17, r24
 1ea:	e9 2e       	mov	r14, r25
 1ec:	90 e0       	ldi	r25, 0x00	; 0
	    //putchar_lcd(d+48);	
	    e=number%10;
	   // putchar_lcd(e+48);
    if(a==0 && b==0 && c==0 && d==0){
 1ee:	21 15       	cp	r18, r1
 1f0:	31 05       	cpc	r19, r1
 1f2:	a9 f5       	brne	.+106    	; 0x25e <printnumber_lcd+0xac>
 1f4:	41 15       	cp	r20, r1
 1f6:	51 05       	cpc	r21, r1
 1f8:	09 f5       	brne	.+66     	; 0x23c <printnumber_lcd+0x8a>
 1fa:	30 97       	sbiw	r30, 0x00	; 0
 1fc:	39 f4       	brne	.+14     	; 0x20c <printnumber_lcd+0x5a>
 1fe:	00 97       	sbiw	r24, 0x00	; 0
 200:	29 f4       	brne	.+10     	; 0x20c <printnumber_lcd+0x5a>
		ghi_byte_DDRAM(e+48);
 202:	8e 2d       	mov	r24, r14
 204:	80 5d       	subi	r24, 0xD0	; 208
 206:	0e 94 4f 00 	call	0x9e	; 0x9e <ghi_byte_DDRAM>
 20a:	44 c0       	rjmp	.+136    	; 0x294 <printnumber_lcd+0xe2>
	}
	else if(a==0 && b==0 && c==0){
 20c:	30 97       	sbiw	r30, 0x00	; 0
 20e:	49 f4       	brne	.+18     	; 0x222 <printnumber_lcd+0x70>
		ghi_byte_DDRAM(d+48);
 210:	81 2f       	mov	r24, r17
 212:	80 5d       	subi	r24, 0xD0	; 208
 214:	0e 94 4f 00 	call	0x9e	; 0x9e <ghi_byte_DDRAM>
		ghi_byte_DDRAM(e+48);
 218:	8e 2d       	mov	r24, r14
 21a:	80 5d       	subi	r24, 0xD0	; 208
 21c:	0e 94 4f 00 	call	0x9e	; 0x9e <ghi_byte_DDRAM>
 220:	39 c0       	rjmp	.+114    	; 0x294 <printnumber_lcd+0xe2>
	}
	else if(a==0 && b==0){
		ghi_byte_DDRAM(c+48);
 222:	80 2f       	mov	r24, r16
 224:	80 5d       	subi	r24, 0xD0	; 208
 226:	0e 94 4f 00 	call	0x9e	; 0x9e <ghi_byte_DDRAM>
		ghi_byte_DDRAM(d+48);
 22a:	81 2f       	mov	r24, r17
 22c:	80 5d       	subi	r24, 0xD0	; 208
 22e:	0e 94 4f 00 	call	0x9e	; 0x9e <ghi_byte_DDRAM>
		ghi_byte_DDRAM(e+48);
 232:	8e 2d       	mov	r24, r14
 234:	80 5d       	subi	r24, 0xD0	; 208
 236:	0e 94 4f 00 	call	0x9e	; 0x9e <ghi_byte_DDRAM>
 23a:	2c c0       	rjmp	.+88     	; 0x294 <printnumber_lcd+0xe2>
	}
	else if(a==0){
		ghi_byte_DDRAM(b+48);
 23c:	8f 2d       	mov	r24, r15
 23e:	80 5d       	subi	r24, 0xD0	; 208
 240:	0e 94 4f 00 	call	0x9e	; 0x9e <ghi_byte_DDRAM>
	    ghi_byte_DDRAM(c+48);
 244:	80 2f       	mov	r24, r16
 246:	80 5d       	subi	r24, 0xD0	; 208
 248:	0e 94 4f 00 	call	0x9e	; 0x9e <ghi_byte_DDRAM>
		ghi_byte_DDRAM(d+48);
 24c:	81 2f       	mov	r24, r17
 24e:	80 5d       	subi	r24, 0xD0	; 208
 250:	0e 94 4f 00 	call	0x9e	; 0x9e <ghi_byte_DDRAM>
		ghi_byte_DDRAM(e+48);
 254:	8e 2d       	mov	r24, r14
 256:	80 5d       	subi	r24, 0xD0	; 208
 258:	0e 94 4f 00 	call	0x9e	; 0x9e <ghi_byte_DDRAM>
 25c:	1b c0       	rjmp	.+54     	; 0x294 <printnumber_lcd+0xe2>
	}
	else if(a!=0 && b!=0 && c!=0 && d!=0){
 25e:	41 15       	cp	r20, r1
 260:	51 05       	cpc	r21, r1
 262:	c1 f0       	breq	.+48     	; 0x294 <printnumber_lcd+0xe2>
 264:	30 97       	sbiw	r30, 0x00	; 0
 266:	b1 f0       	breq	.+44     	; 0x294 <printnumber_lcd+0xe2>
 268:	00 97       	sbiw	r24, 0x00	; 0
 26a:	a1 f0       	breq	.+40     	; 0x294 <printnumber_lcd+0xe2>
		ghi_byte_DDRAM(a+48);
 26c:	82 2f       	mov	r24, r18
 26e:	80 5d       	subi	r24, 0xD0	; 208
 270:	0e 94 4f 00 	call	0x9e	; 0x9e <ghi_byte_DDRAM>
		ghi_byte_DDRAM(b+48);
 274:	8f 2d       	mov	r24, r15
 276:	80 5d       	subi	r24, 0xD0	; 208
 278:	0e 94 4f 00 	call	0x9e	; 0x9e <ghi_byte_DDRAM>
	    ghi_byte_DDRAM(c+48);
 27c:	80 2f       	mov	r24, r16
 27e:	80 5d       	subi	r24, 0xD0	; 208
 280:	0e 94 4f 00 	call	0x9e	; 0x9e <ghi_byte_DDRAM>
		ghi_byte_DDRAM(d+48);
 284:	81 2f       	mov	r24, r17
 286:	80 5d       	subi	r24, 0xD0	; 208
 288:	0e 94 4f 00 	call	0x9e	; 0x9e <ghi_byte_DDRAM>
		ghi_byte_DDRAM(e+48);
 28c:	8e 2d       	mov	r24, r14
 28e:	80 5d       	subi	r24, 0xD0	; 208
 290:	0e 94 4f 00 	call	0x9e	; 0x9e <ghi_byte_DDRAM>
	} 
 }
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	ff 90       	pop	r15
 29a:	ef 90       	pop	r14
 29c:	08 95       	ret

0000029e <__udivmodqi4>:
 29e:	99 1b       	sub	r25, r25
 2a0:	79 e0       	ldi	r23, 0x09	; 9
 2a2:	04 c0       	rjmp	.+8      	; 0x2ac <__udivmodqi4_ep>

000002a4 <__udivmodqi4_loop>:
 2a4:	99 1f       	adc	r25, r25
 2a6:	96 17       	cp	r25, r22
 2a8:	08 f0       	brcs	.+2      	; 0x2ac <__udivmodqi4_ep>
 2aa:	96 1b       	sub	r25, r22

000002ac <__udivmodqi4_ep>:
 2ac:	88 1f       	adc	r24, r24
 2ae:	7a 95       	dec	r23
 2b0:	c9 f7       	brne	.-14     	; 0x2a4 <__udivmodqi4_loop>
 2b2:	80 95       	com	r24
 2b4:	08 95       	ret

000002b6 <__divmodhi4>:
 2b6:	97 fb       	bst	r25, 7
 2b8:	09 2e       	mov	r0, r25
 2ba:	07 26       	eor	r0, r23
 2bc:	0a d0       	rcall	.+20     	; 0x2d2 <__divmodhi4_neg1>
 2be:	77 fd       	sbrc	r23, 7
 2c0:	04 d0       	rcall	.+8      	; 0x2ca <__divmodhi4_neg2>
 2c2:	0c d0       	rcall	.+24     	; 0x2dc <__udivmodhi4>
 2c4:	06 d0       	rcall	.+12     	; 0x2d2 <__divmodhi4_neg1>
 2c6:	00 20       	and	r0, r0
 2c8:	1a f4       	brpl	.+6      	; 0x2d0 <__divmodhi4_exit>

000002ca <__divmodhi4_neg2>:
 2ca:	70 95       	com	r23
 2cc:	61 95       	neg	r22
 2ce:	7f 4f       	sbci	r23, 0xFF	; 255

000002d0 <__divmodhi4_exit>:
 2d0:	08 95       	ret

000002d2 <__divmodhi4_neg1>:
 2d2:	f6 f7       	brtc	.-4      	; 0x2d0 <__divmodhi4_exit>
 2d4:	90 95       	com	r25
 2d6:	81 95       	neg	r24
 2d8:	9f 4f       	sbci	r25, 0xFF	; 255
 2da:	08 95       	ret

000002dc <__udivmodhi4>:
 2dc:	aa 1b       	sub	r26, r26
 2de:	bb 1b       	sub	r27, r27
 2e0:	51 e1       	ldi	r21, 0x11	; 17
 2e2:	07 c0       	rjmp	.+14     	; 0x2f2 <__udivmodhi4_ep>

000002e4 <__udivmodhi4_loop>:
 2e4:	aa 1f       	adc	r26, r26
 2e6:	bb 1f       	adc	r27, r27
 2e8:	a6 17       	cp	r26, r22
 2ea:	b7 07       	cpc	r27, r23
 2ec:	10 f0       	brcs	.+4      	; 0x2f2 <__udivmodhi4_ep>
 2ee:	a6 1b       	sub	r26, r22
 2f0:	b7 0b       	sbc	r27, r23

000002f2 <__udivmodhi4_ep>:
 2f2:	88 1f       	adc	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	5a 95       	dec	r21
 2f8:	a9 f7       	brne	.-22     	; 0x2e4 <__udivmodhi4_loop>
 2fa:	80 95       	com	r24
 2fc:	90 95       	com	r25
 2fe:	bc 01       	movw	r22, r24
 300:	cd 01       	movw	r24, r26
 302:	08 95       	ret

00000304 <__eewr_byte_m16>:
 304:	26 2f       	mov	r18, r22

00000306 <__eewr_r18_m16>:
 306:	e1 99       	sbic	0x1c, 1	; 28
 308:	fe cf       	rjmp	.-4      	; 0x306 <__eewr_r18_m16>
 30a:	9f bb       	out	0x1f, r25	; 31
 30c:	8e bb       	out	0x1e, r24	; 30
 30e:	2d bb       	out	0x1d, r18	; 29
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	f8 94       	cli
 314:	e2 9a       	sbi	0x1c, 2	; 28
 316:	e1 9a       	sbi	0x1c, 1	; 28
 318:	0f be       	out	0x3f, r0	; 63
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	08 95       	ret

0000031e <_exit>:
 31e:	f8 94       	cli

00000320 <__stop_program>:
 320:	ff cf       	rjmp	.-2      	; 0x320 <__stop_program>
