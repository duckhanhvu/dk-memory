
DC motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001d0  00000000  00000000  000008bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000118  00000000  00000000  00000a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000245  00000000  00000000  00000ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000de8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ef  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008c  00000000  00000000  00000ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  00000f83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/sfr_defs.h>

int main(void)
{ 
	
	PORTA=0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8b bb       	out	0x1b, r24	; 27
	DDRC=0xFF;
  70:	84 bb       	out	0x14, r24	; 20
	
    while(1)
    {
		PORTA=0xFF;
  72:	9f ef       	ldi	r25, 0xFF	; 255
      
	 if(PINA==0b11111110){
       _delay_ms(5);
	 if(PINA==0b11111110){
       PORTC=0x01;
  74:	31 e0       	ldi	r19, 0x01	; 1
    }
    }
	if(PINA==0b11111101){
       _delay_ms(5);
	 if(PINA==0b11111101){
       PORTC=0x02;
  76:	22 e0       	ldi	r18, 0x02	; 2
	PORTA=0xFF;
	DDRC=0xFF;
	
    while(1)
    {
		PORTA=0xFF;
  78:	9b bb       	out	0x1b, r25	; 27
      
	 if(PINA==0b11111110){
  7a:	89 b3       	in	r24, 0x19	; 25
  7c:	8e 3f       	cpi	r24, 0xFE	; 254
  7e:	51 f4       	brne	.+20     	; 0x94 <main+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	e1 ee       	ldi	r30, 0xE1	; 225
  82:	f4 e0       	ldi	r31, 0x04	; 4
  84:	31 97       	sbiw	r30, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <main+0x18>
  88:	00 c0       	rjmp	.+0      	; 0x8a <main+0x1e>
  8a:	00 00       	nop
       _delay_ms(5);
	 if(PINA==0b11111110){
  8c:	89 b3       	in	r24, 0x19	; 25
  8e:	8e 3f       	cpi	r24, 0xFE	; 254
  90:	09 f4       	brne	.+2      	; 0x94 <main+0x28>
       PORTC=0x01;
  92:	35 bb       	out	0x15, r19	; 21
    }
    }
	if(PINA==0b11111101){
  94:	89 b3       	in	r24, 0x19	; 25
  96:	8d 3f       	cpi	r24, 0xFD	; 253
  98:	51 f4       	brne	.+20     	; 0xae <main+0x42>
  9a:	e1 ee       	ldi	r30, 0xE1	; 225
  9c:	f4 e0       	ldi	r31, 0x04	; 4
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x32>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x38>
  a4:	00 00       	nop
       _delay_ms(5);
	 if(PINA==0b11111101){
  a6:	89 b3       	in	r24, 0x19	; 25
  a8:	8d 3f       	cpi	r24, 0xFD	; 253
  aa:	09 f4       	brne	.+2      	; 0xae <main+0x42>
       PORTC=0x02;
  ac:	25 bb       	out	0x15, r18	; 21
    }
    }
	if(PINA==0b11111011){
  ae:	89 b3       	in	r24, 0x19	; 25
  b0:	8b 3f       	cpi	r24, 0xFB	; 251
  b2:	11 f7       	brne	.-60     	; 0x78 <main+0xc>
  b4:	e1 ee       	ldi	r30, 0xE1	; 225
  b6:	f4 e0       	ldi	r31, 0x04	; 4
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x4c>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x52>
  be:	00 00       	nop
       _delay_ms(5);
	 if(PINA==0b11111011){
  c0:	89 b3       	in	r24, 0x19	; 25
  c2:	8b 3f       	cpi	r24, 0xFB	; 251
  c4:	c9 f6       	brne	.-78     	; 0x78 <main+0xc>
       PORTC=0x00;
  c6:	15 ba       	out	0x15, r1	; 21
  c8:	d7 cf       	rjmp	.-82     	; 0x78 <main+0xc>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
