
project 42.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000005d8  0000064c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000954  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000016e  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  0000111e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000231  00000000  00000000  0000113e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000835  00000000  00000000  0000136f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000025c  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000083e  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00002640  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fc  00000000  00000000  00002890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000049f  00000000  00000000  00002b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000041  00000000  00000000  0000302b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8e 02 	call	0x51c	; 0x51c <main>
  7a:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <InitAVR>:
typedef int8_t sbyte;
// ---------------------------------------------------------------------------
// MISC ROUTINES
void InitAVR()
{
DDRD = 0x3F; // 0011.1111; set B0-B5 as outputs
  82:	8f e3       	ldi	r24, 0x3F	; 63
  84:	81 bb       	out	0x11, r24	; 17
DDRC = 0x00; // 0000.0000; set PORTC as inputs
  86:	14 ba       	out	0x14, r1	; 20
}
  88:	08 95       	ret

0000008a <msDelay>:
void msDelay(int delay) // put into a routine
{ // to remove code inlining
for (int i=0;i<delay;i++) // at cost of timing accuracy
  8a:	18 16       	cp	r1, r24
  8c:	19 06       	cpc	r1, r25
  8e:	6c f4       	brge	.+26     	; 0xaa <msDelay+0x20>
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	ef ec       	ldi	r30, 0xCF	; 207
  96:	f7 e0       	ldi	r31, 0x07	; 7
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <msDelay+0xe>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <msDelay+0x14>
  9e:	00 00       	nop
  a0:	2f 5f       	subi	r18, 0xFF	; 255
  a2:	3f 4f       	sbci	r19, 0xFF	; 255
  a4:	28 17       	cp	r18, r24
  a6:	39 07       	cpc	r19, r25
  a8:	ac f3       	brlt	.-22     	; 0x94 <msDelay+0xa>
  aa:	08 95       	ret

000000ac <FlashLED>:
_delay_ms(1);
}
void FlashLED()
{
SetBit(PORTB,LED);
  ac:	c5 9a       	sbi	0x18, 5	; 24
msDelay(250);
  ae:	8a ef       	ldi	r24, 0xFA	; 250
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 45 00 	call	0x8a	; 0x8a <msDelay>
ClearBit(PORTB,LED);
  b6:	c5 98       	cbi	0x18, 5	; 24
msDelay(250);
  b8:	8a ef       	ldi	r24, 0xFA	; 250
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 45 00 	call	0x8a	; 0x8a <msDelay>
}
  c0:	08 95       	ret

000000c2 <PulseEnableLine>:
// The following defines are HD44780 controller commands
#define CLEARDISPLAY 0x01
#define SETCURSOR 0x80
void PulseEnableLine ()
{
SetBit(PORTB,LCD_E); // take LCD enable line high
  c2:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	8a e6       	ldi	r24, 0x6A	; 106
  c6:	8a 95       	dec	r24
  c8:	f1 f7       	brne	.-4      	; 0xc6 <PulseEnableLine+0x4>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <PulseEnableLine+0xa>
_delay_us(40); // wait 40 microseconds
ClearBit(PORTB,LCD_E); // take LCD enable line low
  cc:	c1 98       	cbi	0x18, 1	; 24
}
  ce:	08 95       	ret

000000d0 <SendNibble>:
void SendNibble(byte data)
{
PORTB &= 0xC3; // 1100.0011 = clear 4 data lines
  d0:	98 b3       	in	r25, 0x18	; 24
  d2:	93 7c       	andi	r25, 0xC3	; 195
  d4:	98 bb       	out	0x18, r25	; 24
if (data & _BV(4)) SetBit(PORTB,DAT4);
  d6:	98 2f       	mov	r25, r24
  d8:	84 fd       	sbrc	r24, 4
  da:	c2 9a       	sbi	0x18, 2	; 24
if (data & _BV(5)) SetBit(PORTB,DAT5);
  dc:	95 fd       	sbrc	r25, 5
  de:	c3 9a       	sbi	0x18, 3	; 24
if (data & _BV(6)) SetBit(PORTB,DAT6);
  e0:	96 fd       	sbrc	r25, 6
  e2:	c4 9a       	sbi	0x18, 4	; 24
if (data & _BV(7)) SetBit(PORTB,DAT7);
  e4:	88 23       	and	r24, r24
  e6:	0c f4       	brge	.+2      	; 0xea <SendNibble+0x1a>
  e8:	c5 9a       	sbi	0x18, 5	; 24
PulseEnableLine(); // clock 4 bits into controller
  ea:	0e 94 61 00 	call	0xc2	; 0xc2 <PulseEnableLine>
}
  ee:	08 95       	ret

000000f0 <SendByte>:
void SendByte (byte data)
{
  f0:	1f 93       	push	r17
  f2:	18 2f       	mov	r17, r24
SendNibble(data); // send upper 4 bits
  f4:	0e 94 68 00 	call	0xd0	; 0xd0 <SendNibble>
SendNibble(data<<4); // send lower 4 bits
  f8:	81 2f       	mov	r24, r17
  fa:	82 95       	swap	r24
  fc:	80 7f       	andi	r24, 0xF0	; 240
  fe:	0e 94 68 00 	call	0xd0	; 0xd0 <SendNibble>
ClearBit(PORTB,5); // turn off boarduino LED
 102:	c5 98       	cbi	0x18, 5	; 24
}
 104:	1f 91       	pop	r17
 106:	08 95       	ret

00000108 <LCD_Cmd>:
void LCD_Cmd (byte cmd)
{
ClearBit(PORTB,LCD_RS); // R/S line 0 = command data
 108:	c0 98       	cbi	0x18, 0	; 24
SendByte(cmd); // send it
 10a:	0e 94 78 00 	call	0xf0	; 0xf0 <SendByte>
}
 10e:	08 95       	ret

00000110 <LCD_Char>:
void LCD_Char (byte ch)
{
SetBit(PORTB,LCD_RS); // R/S line 1 = character data
 110:	c0 9a       	sbi	0x18, 0	; 24
SendByte(ch); // send it
 112:	0e 94 78 00 	call	0xf0	; 0xf0 <SendByte>
} 
 116:	08 95       	ret

00000118 <LCD_Init>:
void LCD_Init()
{
LCD_Cmd(0x33); // initialize controller
 118:	83 e3       	ldi	r24, 0x33	; 51
 11a:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Cmd>
LCD_Cmd(0x32); // set to 4-bit input mode
 11e:	82 e3       	ldi	r24, 0x32	; 50
 120:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Cmd>
LCD_Cmd(0x28); // 2 line, 5x7 matrix
 124:	88 e2       	ldi	r24, 0x28	; 40
 126:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Cmd>
LCD_Cmd(0x0C); // turn cursor off (0x0E to enable)
 12a:	8c e0       	ldi	r24, 0x0C	; 12
 12c:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Cmd>
LCD_Cmd(0x06); // cursor direction = right
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Cmd>
LCD_Cmd(0x01); // start with clear display
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Cmd>
msDelay(3);
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 45 00 	call	0x8a	; 0x8a <msDelay>
}
 144:	08 95       	ret

00000146 <LCD_Clear>:

void LCD_Clear() // clear the LCD display
{
LCD_Cmd(CLEARDISPLAY);
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Cmd>
msDelay(3); // wait for LCD to process command
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 45 00 	call	0x8a	; 0x8a <msDelay>
}
 154:	08 95       	ret

00000156 <LCD_Home>:
void LCD_Home() // home LCD cursor (without clearing)
{
LCD_Cmd(SETCURSOR);
 156:	80 e8       	ldi	r24, 0x80	; 128
 158:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Cmd>
}
 15c:	08 95       	ret

0000015e <LCD_Goto>:
void LCD_Goto(byte x, byte y) // put LCD cursor on specified line
{
byte addr = 0; // line 0 begins at addr 0x00
switch (y)
 15e:	62 30       	cpi	r22, 0x02	; 2
 160:	31 f0       	breq	.+12     	; 0x16e <LCD_Goto+0x10>
 162:	63 30       	cpi	r22, 0x03	; 3
 164:	31 f0       	breq	.+12     	; 0x172 <LCD_Goto+0x14>
 166:	61 30       	cpi	r22, 0x01	; 1
 168:	31 f0       	breq	.+12     	; 0x176 <LCD_Goto+0x18>
{
LCD_Cmd(SETCURSOR);
}
void LCD_Goto(byte x, byte y) // put LCD cursor on specified line
{
byte addr = 0; // line 0 begins at addr 0x00
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	05 c0       	rjmp	.+10     	; 0x178 <LCD_Goto+0x1a>
switch (y)
{
case 1: addr = 0x40; break; // line 1 begins at addr 0x40
case 2: addr = 0x14; break;
 16e:	94 e1       	ldi	r25, 0x14	; 20
 170:	03 c0       	rjmp	.+6      	; 0x178 <LCD_Goto+0x1a>
case 3: addr = 0x54; break;
 172:	94 e5       	ldi	r25, 0x54	; 84
 174:	01 c0       	rjmp	.+2      	; 0x178 <LCD_Goto+0x1a>
void LCD_Goto(byte x, byte y) // put LCD cursor on specified line
{
byte addr = 0; // line 0 begins at addr 0x00
switch (y)
{
case 1: addr = 0x40; break; // line 1 begins at addr 0x40
 176:	90 e4       	ldi	r25, 0x40	; 64
case 2: addr = 0x14; break;
case 3: addr = 0x54; break;
}
LCD_Cmd(SETCURSOR+addr+x); // update cursor with x,y position
 178:	80 58       	subi	r24, 0x80	; 128
 17a:	89 0f       	add	r24, r25
 17c:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Cmd>
}
 180:	08 95       	ret

00000182 <LCD_Line>:
void LCD_Line(byte row) // put cursor on specified line
{
 182:	68 2f       	mov	r22, r24
LCD_Goto(0,row);
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Goto>
}
 18a:	08 95       	ret

0000018c <LCD_String>:
void LCD_String(const char *text) // display string on LCD
{
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	ec 01       	movw	r28, r24
while (*text) // do until /0 character
 192:	88 81       	ld	r24, Y
 194:	88 23       	and	r24, r24
 196:	31 f0       	breq	.+12     	; 0x1a4 <LCD_String+0x18>
}
void LCD_Line(byte row) // put cursor on specified line
{
LCD_Goto(0,row);
}
void LCD_String(const char *text) // display string on LCD
 198:	21 96       	adiw	r28, 0x01	; 1
{
while (*text) // do until /0 character
LCD_Char(*text++); // send char & update char pointer
 19a:	0e 94 88 00 	call	0x110	; 0x110 <LCD_Char>
{
LCD_Goto(0,row);
}
void LCD_String(const char *text) // display string on LCD
{
while (*text) // do until /0 character
 19e:	89 91       	ld	r24, Y+
 1a0:	88 23       	and	r24, r24
 1a2:	d9 f7       	brne	.-10     	; 0x19a <LCD_String+0xe>
LCD_Char(*text++); // send char & update char pointer
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <LCD_Hex>:
void LCD_Hex(int data)
// displays the hex value of DATA at current LCD cursor position
{
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	df 93       	push	r29
 1b0:	cf 93       	push	r28
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	28 97       	sbiw	r28, 0x08	; 8
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	cd bf       	out	0x3d, r28	; 61
char st[8] = ""; // save enough space for result
 1c2:	19 82       	std	Y+1, r1	; 0x01
 1c4:	1a 82       	std	Y+2, r1	; 0x02
 1c6:	1b 82       	std	Y+3, r1	; 0x03
 1c8:	1c 82       	std	Y+4, r1	; 0x04
 1ca:	1d 82       	std	Y+5, r1	; 0x05
 1cc:	1e 82       	std	Y+6, r1	; 0x06
 1ce:	1f 82       	std	Y+7, r1	; 0x07
 1d0:	18 86       	std	Y+8, r1	; 0x08
itoa(data,st,16); // convert to ascii hex
 1d2:	8e 01       	movw	r16, r28
 1d4:	0f 5f       	subi	r16, 0xFF	; 255
 1d6:	1f 4f       	sbci	r17, 0xFF	; 255
 1d8:	b8 01       	movw	r22, r16
 1da:	40 e1       	ldi	r20, 0x10	; 16
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	0e 94 a5 02 	call	0x54a	; 0x54a <itoa>
//LCD_Message("0x"); // add prefix "0x" if desired
LCD_String(st); // display it on LCD
 1e2:	c8 01       	movw	r24, r16
 1e4:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_String>
}
 1e8:	28 96       	adiw	r28, 0x08	; 8
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	cd bf       	out	0x3d, r28	; 61
 1f4:	cf 91       	pop	r28
 1f6:	df 91       	pop	r29
 1f8:	1f 91       	pop	r17
 1fa:	0f 91       	pop	r16
 1fc:	08 95       	ret

000001fe <LCD_Integer>:
void LCD_Integer(int data)
// displays the integer value of DATA at current LCD cursor position
{
 1fe:	0f 93       	push	r16
 200:	1f 93       	push	r17
 202:	df 93       	push	r29
 204:	cf 93       	push	r28
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
 20a:	28 97       	sbiw	r28, 0x08	; 8
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	f8 94       	cli
 210:	de bf       	out	0x3e, r29	; 62
 212:	0f be       	out	0x3f, r0	; 63
 214:	cd bf       	out	0x3d, r28	; 61
char st[8] = ""; // save enough space for result
 216:	19 82       	std	Y+1, r1	; 0x01
 218:	1a 82       	std	Y+2, r1	; 0x02
 21a:	1b 82       	std	Y+3, r1	; 0x03
 21c:	1c 82       	std	Y+4, r1	; 0x04
 21e:	1d 82       	std	Y+5, r1	; 0x05
 220:	1e 82       	std	Y+6, r1	; 0x06
 222:	1f 82       	std	Y+7, r1	; 0x07
 224:	18 86       	std	Y+8, r1	; 0x08
itoa(data,st,10); // convert to ascii
 226:	8e 01       	movw	r16, r28
 228:	0f 5f       	subi	r16, 0xFF	; 255
 22a:	1f 4f       	sbci	r17, 0xFF	; 255
 22c:	b8 01       	movw	r22, r16
 22e:	4a e0       	ldi	r20, 0x0A	; 10
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	0e 94 a5 02 	call	0x54a	; 0x54a <itoa>
LCD_String(st); // display in on LCD
 236:	c8 01       	movw	r24, r16
 238:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_String>
}
 23c:	28 96       	adiw	r28, 0x08	; 8
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	cf 91       	pop	r28
 24a:	df 91       	pop	r29
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	08 95       	ret

00000252 <I2C_Init>:
#define I2C_Stop() TWCR = TW_STOP // inline macro for stop condition
void I2C_Init()
// at 16 MHz, the SCL frequency will be 16/(16+2(TWBR)), assuming prescalar of 0.
// so for 100KHz SCL, TWBR = ((F_CPU/F_SCL)-16)/2 = ((16/0.1)-16)/2 = 144/2 = 72.
{
TWSR = 0; // set prescalar to zero
 252:	11 b8       	out	0x01, r1	; 1
TWBR = ((F_CPU/F_SCL)-16)/2; // set SCL frequency in TWI bit register
 254:	80 e2       	ldi	r24, 0x20	; 32
 256:	80 b9       	out	0x00, r24	; 0
}
 258:	08 95       	ret

0000025a <I2C_Detect>:
byte I2C_Detect(byte addr)
// look for device at specified address; return 1=found, 0=not found
{
TWCR = TW_START; // send start condition
 25a:	94 ea       	ldi	r25, 0xA4	; 164
 25c:	96 bf       	out	0x36, r25	; 54
while (!TW_READY); // wait
 25e:	06 b6       	in	r0, 0x36	; 54
 260:	07 fe       	sbrs	r0, 7
 262:	fd cf       	rjmp	.-6      	; 0x25e <I2C_Detect+0x4>
TWDR = addr; // load device's bus address
 264:	83 b9       	out	0x03, r24	; 3
TWCR = TW_SEND; // and send it
 266:	84 e8       	ldi	r24, 0x84	; 132
 268:	86 bf       	out	0x36, r24	; 54
while (!TW_READY); // wait
 26a:	06 b6       	in	r0, 0x36	; 54
 26c:	07 fe       	sbrs	r0, 7
 26e:	fd cf       	rjmp	.-6      	; 0x26a <I2C_Detect+0x10>
return (TW_STATUS==0x18); // return 1 if found; 0 otherwise
 270:	91 b1       	in	r25, 0x01	; 1
 272:	98 7f       	andi	r25, 0xF8	; 248
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	98 31       	cpi	r25, 0x18	; 24
 278:	09 f0       	breq	.+2      	; 0x27c <I2C_Detect+0x22>
 27a:	80 e0       	ldi	r24, 0x00	; 0
}
 27c:	08 95       	ret

0000027e <I2C_FindDevice>:
byte I2C_FindDevice(byte start)
// returns with address of first device found; 0=not found
{
 27e:	1f 93       	push	r17
for (byte addr=start;addr<0xFF;addr++) // search all 256 addresses
 280:	8f 3f       	cpi	r24, 0xFF	; 255
 282:	59 f0       	breq	.+22     	; 0x29a <I2C_FindDevice+0x1c>
 284:	18 2f       	mov	r17, r24
{
if (I2C_Detect(addr)) // I2C detected?
 286:	81 2f       	mov	r24, r17
 288:	0e 94 2d 01 	call	0x25a	; 0x25a <I2C_Detect>
 28c:	88 23       	and	r24, r24
 28e:	31 f4       	brne	.+12     	; 0x29c <I2C_FindDevice+0x1e>
return (TW_STATUS==0x18); // return 1 if found; 0 otherwise
}
byte I2C_FindDevice(byte start)
// returns with address of first device found; 0=not found
{
for (byte addr=start;addr<0xFF;addr++) // search all 256 addresses
 290:	1f 5f       	subi	r17, 0xFF	; 255
 292:	1f 3f       	cpi	r17, 0xFF	; 255
 294:	c1 f7       	brne	.-16     	; 0x286 <I2C_FindDevice+0x8>
{
if (I2C_Detect(addr)) // I2C detected?
return addr; // leave as soon as one is found
}
return 0; // none detected, so return 0.
 296:	10 e0       	ldi	r17, 0x00	; 0
 298:	01 c0       	rjmp	.+2      	; 0x29c <I2C_FindDevice+0x1e>
 29a:	10 e0       	ldi	r17, 0x00	; 0
}
 29c:	81 2f       	mov	r24, r17
 29e:	1f 91       	pop	r17
 2a0:	08 95       	ret

000002a2 <I2C_Start>:
void I2C_Start (byte slaveAddr)
{
I2C_Detect(slaveAddr);
 2a2:	0e 94 2d 01 	call	0x25a	; 0x25a <I2C_Detect>
}
 2a6:	08 95       	ret

000002a8 <I2C_Write>:
byte I2C_Write (byte data) // sends a data byte to slave
{
TWDR = data; // load data to be sent
 2a8:	83 b9       	out	0x03, r24	; 3
TWCR = TW_SEND; // and send it
 2aa:	84 e8       	ldi	r24, 0x84	; 132
 2ac:	86 bf       	out	0x36, r24	; 54
while (!TW_READY); // wait
 2ae:	06 b6       	in	r0, 0x36	; 54
 2b0:	07 fe       	sbrs	r0, 7
 2b2:	fd cf       	rjmp	.-6      	; 0x2ae <I2C_Write+0x6>
return (TW_STATUS!=0x28);
 2b4:	91 b1       	in	r25, 0x01	; 1
 2b6:	98 7f       	andi	r25, 0xF8	; 248
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	98 32       	cpi	r25, 0x28	; 40
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <I2C_Write+0x18>
 2be:	80 e0       	ldi	r24, 0x00	; 0
}
 2c0:	08 95       	ret

000002c2 <I2C_ReadACK>:
byte I2C_ReadACK () // reads a data byte from slave
{
TWCR = TW_ACK; // ack = will read more data
 2c2:	84 ec       	ldi	r24, 0xC4	; 196
 2c4:	86 bf       	out	0x36, r24	; 54
while (!TW_READY); // wait
 2c6:	06 b6       	in	r0, 0x36	; 54
 2c8:	07 fe       	sbrs	r0, 7
 2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <I2C_ReadACK+0x4>
return TWDR;
 2cc:	83 b1       	in	r24, 0x03	; 3
//return (TW_STATUS!=0x28);
}
 2ce:	08 95       	ret

000002d0 <I2C_ReadNACK>:
byte I2C_ReadNACK () // reads a data byte from slave
{
TWCR = TW_NACK; // nack = not reading more data
 2d0:	84 e8       	ldi	r24, 0x84	; 132
 2d2:	86 bf       	out	0x36, r24	; 54
while (!TW_READY); // wait
 2d4:	06 b6       	in	r0, 0x36	; 54
 2d6:	07 fe       	sbrs	r0, 7
 2d8:	fd cf       	rjmp	.-6      	; 0x2d4 <I2C_ReadNACK+0x4>
return TWDR;
 2da:	83 b1       	in	r24, 0x03	; 3
//return (TW_STATUS!=0x28);
}
 2dc:	08 95       	ret

000002de <I2C_WriteByte>:
void I2C_WriteByte(byte busAddr, byte data)
{
 2de:	1f 93       	push	r17
 2e0:	16 2f       	mov	r17, r22
I2C_Start(busAddr); // send bus address
 2e2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <I2C_Start>
I2C_Write(data); // then send the data byte
 2e6:	81 2f       	mov	r24, r17
 2e8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <I2C_Write>
I2C_Stop();
 2ec:	84 e9       	ldi	r24, 0x94	; 148
 2ee:	86 bf       	out	0x36, r24	; 54
}
 2f0:	1f 91       	pop	r17
 2f2:	08 95       	ret

000002f4 <I2C_WriteRegister>:
void I2C_WriteRegister(byte busAddr, byte deviceRegister, byte data){
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	06 2f       	mov	r16, r22
 2fa:	14 2f       	mov	r17, r20
I2C_Start(busAddr); // send bus address
 2fc:	0e 94 51 01 	call	0x2a2	; 0x2a2 <I2C_Start>
I2C_Write(deviceRegister); // first byte = device register address
 300:	80 2f       	mov	r24, r16
 302:	0e 94 54 01 	call	0x2a8	; 0x2a8 <I2C_Write>
I2C_Write(data); // second byte = data for device register
 306:	81 2f       	mov	r24, r17
 308:	0e 94 54 01 	call	0x2a8	; 0x2a8 <I2C_Write>
I2C_Stop();
 30c:	84 e9       	ldi	r24, 0x94	; 148
 30e:	86 bf       	out	0x36, r24	; 54
}
 310:	1f 91       	pop	r17
 312:	0f 91       	pop	r16
 314:	08 95       	ret

00000316 <I2C_ReadRegister>:
byte I2C_ReadRegister(byte busAddr, byte deviceRegister)
{
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	18 2f       	mov	r17, r24
 31c:	06 2f       	mov	r16, r22
byte data = 0;
I2C_Start(busAddr); // send device address
 31e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <I2C_Start>
I2C_Write(deviceRegister); // set register pointer
 322:	80 2f       	mov	r24, r16
 324:	0e 94 54 01 	call	0x2a8	; 0x2a8 <I2C_Write>
I2C_Start(busAddr+READ); // restart as a read operation
 328:	81 2f       	mov	r24, r17
 32a:	8f 5f       	subi	r24, 0xFF	; 255
 32c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <I2C_Start>
data = I2C_ReadNACK(); // read the register data
 330:	0e 94 68 01 	call	0x2d0	; 0x2d0 <I2C_ReadNACK>
I2C_Stop(); // stop
 334:	94 e9       	ldi	r25, 0x94	; 148
 336:	96 bf       	out	0x36, r25	; 54
return data;
}
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	08 95       	ret

0000033e <DS1307_GetTime>:
#define CONTROL_REGISTER 0x07
#define RAM_BEGIN 0x08
#define RAM_END 0x3F
void DS1307_GetTime(byte *hours, byte *minutes, byte *seconds)
// returns hours, minutes, and seconds in BCD format
{
 33e:	ef 92       	push	r14
 340:	ff 92       	push	r15
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	8c 01       	movw	r16, r24
 34c:	7b 01       	movw	r14, r22
 34e:	ea 01       	movw	r28, r20
*hours = I2C_ReadRegister(DS1307,HOURS_REGISTER);
 350:	80 ed       	ldi	r24, 0xD0	; 208
 352:	62 e0       	ldi	r22, 0x02	; 2
 354:	0e 94 8b 01 	call	0x316	; 0x316 <I2C_ReadRegister>
 358:	f8 01       	movw	r30, r16
 35a:	80 83       	st	Z, r24
*minutes = I2C_ReadRegister(DS1307,MINUTES_REGISTER);
 35c:	80 ed       	ldi	r24, 0xD0	; 208
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	0e 94 8b 01 	call	0x316	; 0x316 <I2C_ReadRegister>
 364:	f7 01       	movw	r30, r14
 366:	80 83       	st	Z, r24
*seconds = I2C_ReadRegister(DS1307,SECONDS_REGISTER);
 368:	80 ed       	ldi	r24, 0xD0	; 208
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	0e 94 8b 01 	call	0x316	; 0x316 <I2C_ReadRegister>
 370:	88 83       	st	Y, r24
if (*hours & 0x40) // 12hr mode:
 372:	f8 01       	movw	r30, r16
 374:	80 81       	ld	r24, Z
 376:	86 ff       	sbrs	r24, 6
 378:	03 c0       	rjmp	.+6      	; 0x380 <DS1307_GetTime+0x42>
*hours &= 0x1F; // use bottom 5 bits (pm bit = temp & 0x20)
 37a:	8f 71       	andi	r24, 0x1F	; 31
 37c:	80 83       	st	Z, r24
 37e:	03 c0       	rjmp	.+6      	; 0x386 <DS1307_GetTime+0x48>
else *hours &= 0x3F; // 24hr mode: use bottom 6 bits
 380:	8f 73       	andi	r24, 0x3F	; 63
 382:	f8 01       	movw	r30, r16
 384:	80 83       	st	Z, r24
}
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	ff 90       	pop	r15
 390:	ef 90       	pop	r14
 392:	08 95       	ret

00000394 <DS1307_GetDate>:
void DS1307_GetDate(byte *months, byte *days, byte *years)
// returns months, days, and years in BCD format
{
 394:	ef 92       	push	r14
 396:	ff 92       	push	r15
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	8c 01       	movw	r16, r24
 3a2:	7b 01       	movw	r14, r22
 3a4:	ea 01       	movw	r28, r20
*months = I2C_ReadRegister(DS1307,MONTHS_REGISTER);
 3a6:	80 ed       	ldi	r24, 0xD0	; 208
 3a8:	65 e0       	ldi	r22, 0x05	; 5
 3aa:	0e 94 8b 01 	call	0x316	; 0x316 <I2C_ReadRegister>
 3ae:	f8 01       	movw	r30, r16
 3b0:	80 83       	st	Z, r24
*days = I2C_ReadRegister(DS1307,DAYS_REGISTER);
 3b2:	80 ed       	ldi	r24, 0xD0	; 208
 3b4:	64 e0       	ldi	r22, 0x04	; 4
 3b6:	0e 94 8b 01 	call	0x316	; 0x316 <I2C_ReadRegister>
 3ba:	f7 01       	movw	r30, r14
 3bc:	80 83       	st	Z, r24
*years = I2C_ReadRegister(DS1307,YEARS_REGISTER);
 3be:	80 ed       	ldi	r24, 0xD0	; 208
 3c0:	66 e0       	ldi	r22, 0x06	; 6
 3c2:	0e 94 8b 01 	call	0x316	; 0x316 <I2C_ReadRegister>
 3c6:	88 83       	st	Y, r24
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	ff 90       	pop	r15
 3d2:	ef 90       	pop	r14
 3d4:	08 95       	ret

000003d6 <SetTimeDate>:
void SetTimeDate()
// simple, hard-coded way to set the date.
{
I2C_WriteRegister(DS1307,MONTHS_REGISTER, 0x08);
 3d6:	80 ed       	ldi	r24, 0xD0	; 208
 3d8:	65 e0       	ldi	r22, 0x05	; 5
 3da:	48 e0       	ldi	r20, 0x08	; 8
 3dc:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <I2C_WriteRegister>
I2C_WriteRegister(DS1307,DAYS_REGISTER, 0x31);
 3e0:	80 ed       	ldi	r24, 0xD0	; 208
 3e2:	64 e0       	ldi	r22, 0x04	; 4
 3e4:	41 e3       	ldi	r20, 0x31	; 49
 3e6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <I2C_WriteRegister>
I2C_WriteRegister(DS1307,YEARS_REGISTER, 0x13);
 3ea:	80 ed       	ldi	r24, 0xD0	; 208
 3ec:	66 e0       	ldi	r22, 0x06	; 6
 3ee:	43 e1       	ldi	r20, 0x13	; 19
 3f0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <I2C_WriteRegister>
I2C_WriteRegister(DS1307,HOURS_REGISTER, 0x08+0x40); // add 0x40 for PM
 3f4:	80 ed       	ldi	r24, 0xD0	; 208
 3f6:	62 e0       	ldi	r22, 0x02	; 2
 3f8:	48 e4       	ldi	r20, 0x48	; 72
 3fa:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <I2C_WriteRegister>
I2C_WriteRegister(DS1307,MINUTES_REGISTER, 0x51);
 3fe:	80 ed       	ldi	r24, 0xD0	; 208
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	41 e5       	ldi	r20, 0x51	; 81
 404:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <I2C_WriteRegister>
I2C_WriteRegister(DS1307,SECONDS_REGISTER, 0x00);
 408:	80 ed       	ldi	r24, 0xD0	; 208
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	40 e0       	ldi	r20, 0x00	; 0
 40e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <I2C_WriteRegister>
}
 412:	08 95       	ret

00000414 <ShowDevices>:

void ShowDevices()
// Scan I2C addresses and display addresses of all devices found
{
 414:	1f 93       	push	r17
LCD_Line(1); LCD_String("Found:");
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_Line>
 41c:	80 e6       	ldi	r24, 0x60	; 96
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_String>
byte addr = 1;
 424:	11 e0       	ldi	r17, 0x01	; 1
while (addr>0)
{
LCD_Char(' ');
 426:	80 e2       	ldi	r24, 0x20	; 32
 428:	0e 94 88 00 	call	0x110	; 0x110 <LCD_Char>
addr = I2C_FindDevice(addr);
 42c:	81 2f       	mov	r24, r17
 42e:	0e 94 3f 01 	call	0x27e	; 0x27e <I2C_FindDevice>
if (addr>0) LCD_Hex(addr++);
 432:	88 23       	and	r24, r24
 434:	39 f0       	breq	.+14     	; 0x444 <ShowDevices+0x30>
 436:	18 2f       	mov	r17, r24
 438:	1f 5f       	subi	r17, 0xFF	; 255
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_Hex>
void ShowDevices()
// Scan I2C addresses and display addresses of all devices found
{
LCD_Line(1); LCD_String("Found:");
byte addr = 1;
while (addr>0)
 440:	11 23       	and	r17, r17
 442:	89 f7       	brne	.-30     	; 0x426 <ShowDevices+0x12>
{
LCD_Char(' ');
addr = I2C_FindDevice(addr);
if (addr>0) LCD_Hex(addr++);
}
}
 444:	1f 91       	pop	r17
 446:	08 95       	ret

00000448 <LCD_TwoDigits>:
void LCD_TwoDigits(byte data)
// helper function for WriteDate()
// input is two digits in BCD format
// output is to LCD display at current cursor position
{
 448:	1f 93       	push	r17
 44a:	18 2f       	mov	r17, r24
byte temp = data>>4;
 44c:	82 95       	swap	r24
 44e:	8f 70       	andi	r24, 0x0F	; 15
LCD_Char(temp+'0');
 450:	80 5d       	subi	r24, 0xD0	; 208
 452:	0e 94 88 00 	call	0x110	; 0x110 <LCD_Char>
data &= 0x0F;
 456:	81 2f       	mov	r24, r17
 458:	8f 70       	andi	r24, 0x0F	; 15
LCD_Char(data+'0');
 45a:	80 5d       	subi	r24, 0xD0	; 208
 45c:	0e 94 88 00 	call	0x110	; 0x110 <LCD_Char>
}
 460:	1f 91       	pop	r17
 462:	08 95       	ret

00000464 <WriteDate>:
void WriteDate()
{
 464:	df 93       	push	r29
 466:	cf 93       	push	r28
 468:	00 d0       	rcall	.+0      	; 0x46a <WriteDate+0x6>
 46a:	0f 92       	push	r0
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
byte months, days, years;
DS1307_GetDate(&months,&days,&years);
 470:	ce 01       	movw	r24, r28
 472:	01 96       	adiw	r24, 0x01	; 1
 474:	be 01       	movw	r22, r28
 476:	6e 5f       	subi	r22, 0xFE	; 254
 478:	7f 4f       	sbci	r23, 0xFF	; 255
 47a:	ae 01       	movw	r20, r28
 47c:	4d 5f       	subi	r20, 0xFD	; 253
 47e:	5f 4f       	sbci	r21, 0xFF	; 255
 480:	0e 94 ca 01 	call	0x394	; 0x394 <DS1307_GetDate>
LCD_TwoDigits(months);
 484:	89 81       	ldd	r24, Y+1	; 0x01
 486:	0e 94 24 02 	call	0x448	; 0x448 <LCD_TwoDigits>
LCD_Char('/');
 48a:	8f e2       	ldi	r24, 0x2F	; 47
 48c:	0e 94 88 00 	call	0x110	; 0x110 <LCD_Char>
LCD_TwoDigits(days);
 490:	8a 81       	ldd	r24, Y+2	; 0x02
 492:	0e 94 24 02 	call	0x448	; 0x448 <LCD_TwoDigits>
LCD_Char('/');
 496:	8f e2       	ldi	r24, 0x2F	; 47
 498:	0e 94 88 00 	call	0x110	; 0x110 <LCD_Char>
LCD_TwoDigits(years);
 49c:	8b 81       	ldd	r24, Y+3	; 0x03
 49e:	0e 94 24 02 	call	0x448	; 0x448 <LCD_TwoDigits>
}
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	cf 91       	pop	r28
 4aa:	df 91       	pop	r29
 4ac:	08 95       	ret

000004ae <WriteTime>:
void WriteTime()
{
 4ae:	df 93       	push	r29
 4b0:	cf 93       	push	r28
 4b2:	00 d0       	rcall	.+0      	; 0x4b4 <WriteTime+0x6>
 4b4:	0f 92       	push	r0
 4b6:	cd b7       	in	r28, 0x3d	; 61
 4b8:	de b7       	in	r29, 0x3e	; 62
byte hours, minutes, seconds;
DS1307_GetTime(&hours,&minutes,&seconds);
 4ba:	ce 01       	movw	r24, r28
 4bc:	01 96       	adiw	r24, 0x01	; 1
 4be:	be 01       	movw	r22, r28
 4c0:	6e 5f       	subi	r22, 0xFE	; 254
 4c2:	7f 4f       	sbci	r23, 0xFF	; 255
 4c4:	ae 01       	movw	r20, r28
 4c6:	4d 5f       	subi	r20, 0xFD	; 253
 4c8:	5f 4f       	sbci	r21, 0xFF	; 255
 4ca:	0e 94 9f 01 	call	0x33e	; 0x33e <DS1307_GetTime>
LCD_TwoDigits(hours);
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	0e 94 24 02 	call	0x448	; 0x448 <LCD_TwoDigits>
LCD_Char(':');
 4d4:	8a e3       	ldi	r24, 0x3A	; 58
 4d6:	0e 94 88 00 	call	0x110	; 0x110 <LCD_Char>
LCD_TwoDigits(minutes);
 4da:	8a 81       	ldd	r24, Y+2	; 0x02
 4dc:	0e 94 24 02 	call	0x448	; 0x448 <LCD_TwoDigits>
LCD_Char(':');
 4e0:	8a e3       	ldi	r24, 0x3A	; 58
 4e2:	0e 94 88 00 	call	0x110	; 0x110 <LCD_Char>
LCD_TwoDigits(seconds);
 4e6:	8b 81       	ldd	r24, Y+3	; 0x03
 4e8:	0e 94 24 02 	call	0x448	; 0x448 <LCD_TwoDigits>
}
 4ec:	0f 90       	pop	r0
 4ee:	0f 90       	pop	r0
 4f0:	0f 90       	pop	r0
 4f2:	cf 91       	pop	r28
 4f4:	df 91       	pop	r29
 4f6:	08 95       	ret

000004f8 <LCD_TimeDate>:
void LCD_TimeDate()
{
LCD_Line(0); WriteTime();
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_Line>
 4fe:	0e 94 57 02 	call	0x4ae	; 0x4ae <WriteTime>
LCD_Line(1); WriteDate();
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_Line>
 508:	0e 94 32 02 	call	0x464	; 0x464 <WriteDate>
}
 50c:	08 95       	ret

0000050e <MainLoop>:
// PROGRAM LOOP
void MainLoop()
{
while(1)
{
LCD_TimeDate(); // put time & date on LCD
 50e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_TimeDate>
msDelay(1000); // one second between updates
 512:	88 ee       	ldi	r24, 0xE8	; 232
 514:	93 e0       	ldi	r25, 0x03	; 3
 516:	0e 94 45 00 	call	0x8a	; 0x8a <msDelay>
 51a:	f9 cf       	rjmp	.-14     	; 0x50e <MainLoop>

0000051c <main>:
}
}

int main(void)
{
InitAVR(); // set port direction
 51c:	0e 94 41 00 	call	0x82	; 0x82 <InitAVR>
LCD_Init(); // initialize HD44780 LCD controller
 520:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_Init>
I2C_Init(); // set I2C clock frequency
 524:	0e 94 29 01 	call	0x252	; 0x252 <I2C_Init>
LCD_String("Ready.");
 528:	87 e6       	ldi	r24, 0x67	; 103
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_String>
ShowDevices(); // show that I2C is working OK
 530:	0e 94 0a 02 	call	0x414	; 0x414 <ShowDevices>
msDelay(4000);
 534:	80 ea       	ldi	r24, 0xA0	; 160
 536:	9f e0       	ldi	r25, 0x0F	; 15
 538:	0e 94 45 00 	call	0x8a	; 0x8a <msDelay>
LCD_Clear();
 53c:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_Clear>
MainLoop(); // display time
 540:	0e 94 87 02 	call	0x50e	; 0x50e <MainLoop>
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	08 95       	ret

0000054a <itoa>:
 54a:	fb 01       	movw	r30, r22
 54c:	9f 01       	movw	r18, r30
 54e:	e8 94       	clt
 550:	42 30       	cpi	r20, 0x02	; 2
 552:	c4 f0       	brlt	.+48     	; 0x584 <itoa+0x3a>
 554:	45 32       	cpi	r20, 0x25	; 37
 556:	b4 f4       	brge	.+44     	; 0x584 <itoa+0x3a>
 558:	4a 30       	cpi	r20, 0x0A	; 10
 55a:	29 f4       	brne	.+10     	; 0x566 <itoa+0x1c>
 55c:	97 fb       	bst	r25, 7
 55e:	1e f4       	brtc	.+6      	; 0x566 <itoa+0x1c>
 560:	90 95       	com	r25
 562:	81 95       	neg	r24
 564:	9f 4f       	sbci	r25, 0xFF	; 255
 566:	64 2f       	mov	r22, r20
 568:	77 27       	eor	r23, r23
 56a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__udivmodhi4>
 56e:	80 5d       	subi	r24, 0xD0	; 208
 570:	8a 33       	cpi	r24, 0x3A	; 58
 572:	0c f0       	brlt	.+2      	; 0x576 <itoa+0x2c>
 574:	89 5d       	subi	r24, 0xD9	; 217
 576:	81 93       	st	Z+, r24
 578:	cb 01       	movw	r24, r22
 57a:	00 97       	sbiw	r24, 0x00	; 0
 57c:	a1 f7       	brne	.-24     	; 0x566 <itoa+0x1c>
 57e:	16 f4       	brtc	.+4      	; 0x584 <itoa+0x3a>
 580:	5d e2       	ldi	r21, 0x2D	; 45
 582:	51 93       	st	Z+, r21
 584:	10 82       	st	Z, r1
 586:	c9 01       	movw	r24, r18
 588:	0c 94 c6 02 	jmp	0x58c	; 0x58c <strrev>

0000058c <strrev>:
 58c:	dc 01       	movw	r26, r24
 58e:	fc 01       	movw	r30, r24
 590:	67 2f       	mov	r22, r23
 592:	71 91       	ld	r23, Z+
 594:	77 23       	and	r23, r23
 596:	e1 f7       	brne	.-8      	; 0x590 <strrev+0x4>
 598:	32 97       	sbiw	r30, 0x02	; 2
 59a:	04 c0       	rjmp	.+8      	; 0x5a4 <strrev+0x18>
 59c:	7c 91       	ld	r23, X
 59e:	6d 93       	st	X+, r22
 5a0:	70 83       	st	Z, r23
 5a2:	62 91       	ld	r22, -Z
 5a4:	ae 17       	cp	r26, r30
 5a6:	bf 07       	cpc	r27, r31
 5a8:	c8 f3       	brcs	.-14     	; 0x59c <strrev+0x10>
 5aa:	08 95       	ret

000005ac <__udivmodhi4>:
 5ac:	aa 1b       	sub	r26, r26
 5ae:	bb 1b       	sub	r27, r27
 5b0:	51 e1       	ldi	r21, 0x11	; 17
 5b2:	07 c0       	rjmp	.+14     	; 0x5c2 <__udivmodhi4_ep>

000005b4 <__udivmodhi4_loop>:
 5b4:	aa 1f       	adc	r26, r26
 5b6:	bb 1f       	adc	r27, r27
 5b8:	a6 17       	cp	r26, r22
 5ba:	b7 07       	cpc	r27, r23
 5bc:	10 f0       	brcs	.+4      	; 0x5c2 <__udivmodhi4_ep>
 5be:	a6 1b       	sub	r26, r22
 5c0:	b7 0b       	sbc	r27, r23

000005c2 <__udivmodhi4_ep>:
 5c2:	88 1f       	adc	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	5a 95       	dec	r21
 5c8:	a9 f7       	brne	.-22     	; 0x5b4 <__udivmodhi4_loop>
 5ca:	80 95       	com	r24
 5cc:	90 95       	com	r25
 5ce:	bc 01       	movw	r22, r24
 5d0:	cd 01       	movw	r24, r26
 5d2:	08 95       	ret

000005d4 <_exit>:
 5d4:	f8 94       	cli

000005d6 <__stop_program>:
 5d6:	ff cf       	rjmp	.-2      	; 0x5d6 <__stop_program>
