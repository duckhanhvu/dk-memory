
hien thi-bo nguon DC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000069c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001c38  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000068a  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000040  00000000  00000000  000029b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e2  00000000  00000000  000029f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000046a  00000000  00000000  00002ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f2  00000000  00000000  00002f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000611  00000000  00000000  00003130  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00003744  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e0  00000000  00000000  00003834  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000026e  00000000  00000000  00003a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000063  00000000  00000000  00003c82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 4c 03 	jmp	0x698	; 0x698 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <read_adc>:

#define ADC_VREF_TYPE 0x40

uint16_t read_adc(uint8_t chanel_adc){

	ADMUX=(ADC_VREF_TYPE)|(chanel_adc);
  6c:	80 64       	ori	r24, 0x40	; 64
  6e:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	89 ef       	ldi	r24, 0xF9	; 249
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	01 97       	sbiw	r24, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <read_adc+0x8>
  78:	00 c0       	rjmp	.+0      	; 0x7a <read_adc+0xe>
  7a:	00 00       	nop
	_delay_ms(1);
	ADCSRA|=(1<<ADSC);
  7c:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&0x10)==0);
  7e:	34 9b       	sbis	0x06, 4	; 6
  80:	fe cf       	rjmp	.-4      	; 0x7e <read_adc+0x12>
	return ADCW;
  82:	24 b1       	in	r18, 0x04	; 4
  84:	35 b1       	in	r19, 0x05	; 5
}
  86:	82 2f       	mov	r24, r18
  88:	93 2f       	mov	r25, r19
  8a:	08 95       	ret

0000008c <main>:


int main(void)
{
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
	int adc;
	float Vol_in;
	init_lcd();
  90:	0e 94 ac 00 	call	0x158	; 0x158 <init_lcd>
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS0);
  94:	85 e8       	ldi	r24, 0x85	; 133
  96:	86 b9       	out	0x06, r24	; 6
	ADMUX=(ADC_VREF_TYPE);
  98:	80 e4       	ldi	r24, 0x40	; 64
  9a:	87 b9       	out	0x07, r24	; 7
	
    while(1)
    {
		adc=read_adc(0);
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 36 00 	call	0x6c	; 0x6c <read_adc>
  a2:	ec 01       	movw	r28, r24
        Vol_in=(((float)adc*8.5)/1023)*1000;
		movecursor(1,1);
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <movecursor>
	ADMUX=(ADC_VREF_TYPE);
	
    while(1)
    {
		adc=read_adc(0);
        Vol_in=(((float)adc*8.5)/1023)*1000;
  ac:	be 01       	movw	r22, r28
  ae:	88 27       	eor	r24, r24
  b0:	77 fd       	sbrc	r23, 7
  b2:	80 95       	com	r24
  b4:	98 2f       	mov	r25, r24
  b6:	0e 94 0c 02 	call	0x418	; 0x418 <__floatsisf>
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	48 e0       	ldi	r20, 0x08	; 8
  c0:	51 e4       	ldi	r21, 0x41	; 65
  c2:	0e 94 98 02 	call	0x530	; 0x530 <__mulsf3>
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	30 ec       	ldi	r19, 0xC0	; 192
  ca:	4f e7       	ldi	r20, 0x7F	; 127
  cc:	54 e4       	ldi	r21, 0x44	; 68
  ce:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__divsf3>
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	4a e7       	ldi	r20, 0x7A	; 122
  d8:	54 e4       	ldi	r21, 0x44	; 68
  da:	0e 94 98 02 	call	0x530	; 0x530 <__mulsf3>
		movecursor(1,1);
		printnumber_lcd(Vol_in);  
  de:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fixsfsi>
  e2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <printnumber_lcd>
  e6:	da cf       	rjmp	.-76     	; 0x9c <main+0x10>

000000e8 <read_2Nib>:


char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
  e8:	92 9a       	sbi	0x12, 2	; 18
	DDR_DATA=0x0F;
  ea:	8f e0       	ldi	r24, 0x0F	; 15
  ec:	81 bb       	out	0x11, r24	; 17
	HNib=DATA_input&0xF0;
  ee:	80 b3       	in	r24, 0x10	; 16
	clearbit(CTRL,EN);
  f0:	92 98       	cbi	0x12, 2	; 18
	
	setbit(CTRL,EN);
  f2:	92 9a       	sbi	0x12, 2	; 18
	LNib=DATA_input&0xF0;
  f4:	90 b3       	in	r25, 0x10	; 16
	clearbit(CTRL,EN);
  f6:	92 98       	cbi	0x12, 2	; 18
	LNib>>=4;
  f8:	92 95       	swap	r25
  fa:	9f 70       	andi	r25, 0x0F	; 15
char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
	DDR_DATA=0x0F;
	HNib=DATA_input&0xF0;
  fc:	80 7f       	andi	r24, 0xF0	; 240
	LNib=DATA_input&0xF0;
	clearbit(CTRL,EN);
	LNib>>=4;
	
	return (HNib|LNib);
}
  fe:	89 2b       	or	r24, r25
 100:	08 95       	ret

00000102 <write_2Nib>:
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
 102:	92 b3       	in	r25, 0x12	; 18
 104:	9f 70       	andi	r25, 0x0F	; 15
	HNib=data&0xF0;
 106:	28 2f       	mov	r18, r24
 108:	20 7f       	andi	r18, 0xF0	; 240
	LNib=(data<<4)&0xF0;
	
	DATA_output=HNib|temp;
 10a:	29 2b       	or	r18, r25
 10c:	22 bb       	out	0x12, r18	; 18
	setbit(CTRL,EN);
 10e:	92 9a       	sbi	0x12, 2	; 18
	clearbit(CTRL,EN);
 110:	92 98       	cbi	0x12, 2	; 18
}
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
	HNib=data&0xF0;
	LNib=(data<<4)&0xF0;
 112:	82 95       	swap	r24
 114:	80 7f       	andi	r24, 0xF0	; 240
	
	DATA_output=HNib|temp;
	setbit(CTRL,EN);
	clearbit(CTRL,EN);
	
	DATA_output=LNib|temp;
 116:	98 2b       	or	r25, r24
 118:	92 bb       	out	0x12, r25	; 18
	setbit(CTRL,EN);
 11a:	92 9a       	sbi	0x12, 2	; 18
	clearbit(CTRL,EN);
 11c:	92 98       	cbi	0x12, 2	; 18
	
}
 11e:	08 95       	ret

00000120 <wait_lcd>:
void wait_lcd(void){
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	df 93       	push	r29
 126:	cf 93       	push	r28
 128:	0f 92       	push	r0
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
	while(1){
     	clearbit(CTRL,RS);
		setbit(CTRL,RW);
		temp=read_2Nib();
		
		if(bit_is_clear(temp,7)) break;
 12e:	8e 01       	movw	r16, r28
 130:	0f 5f       	subi	r16, 0xFF	; 255
 132:	1f 4f       	sbci	r17, 0xFF	; 255
}
void wait_lcd(void){
	unsigned char temp;
	
	while(1){
     	clearbit(CTRL,RS);
 134:	90 98       	cbi	0x12, 0	; 18
		setbit(CTRL,RW);
 136:	91 9a       	sbi	0x12, 1	; 18
		temp=read_2Nib();
 138:	0e 94 74 00 	call	0xe8	; 0xe8 <read_2Nib>
 13c:	89 83       	std	Y+1, r24	; 0x01
		
		if(bit_is_clear(temp,7)) break;
 13e:	f8 01       	movw	r30, r16
 140:	80 81       	ld	r24, Z
 142:	88 23       	and	r24, r24
 144:	bc f3       	brlt	.-18     	; 0x134 <wait_lcd+0x14>
	}
	clearbit(CTRL,RW);
 146:	91 98       	cbi	0x12, 1	; 18
	DDR_DATA=0xFF;
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	81 bb       	out	0x11, r24	; 17
	
}
 14c:	0f 90       	pop	r0
 14e:	cf 91       	pop	r28
 150:	df 91       	pop	r29
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	08 95       	ret

00000158 <init_lcd>:

void init_lcd(){//uses mode 4 bit
	DDR_CTRL=0xFF;
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	81 bb       	out	0x11, r24	; 17
	DDR_DATA=0xFF;
 15c:	81 bb       	out	0x11, r24	; 17
	clearbit(CTRL,RS);
 15e:	90 98       	cbi	0x12, 0	; 18
	clearbit(CTRL,RW);
 160:	91 98       	cbi	0x12, 1	; 18
	clearbit(CTRL,EN);
 162:	92 98       	cbi	0x12, 2	; 18
	
//function set	
	setbit(CTRL,EN);
 164:	92 9a       	sbi	0x12, 2	; 18
	setbit(DATA_output,5);
 166:	95 9a       	sbi	0x12, 5	; 18
	clearbit(CTRL,EN);
 168:	92 98       	cbi	0x12, 2	; 18
	wait_lcd();
 16a:	0e 94 90 00 	call	0x120	; 0x120 <wait_lcd>
	write_2Nib(0x28);
 16e:	88 e2       	ldi	r24, 0x28	; 40
 170:	0e 94 81 00 	call	0x102	; 0x102 <write_2Nib>
	wait_lcd();
 174:	0e 94 90 00 	call	0x120	; 0x120 <wait_lcd>
//display on/off control
    write_2Nib(0x0C);
 178:	8c e0       	ldi	r24, 0x0C	; 12
 17a:	0e 94 81 00 	call	0x102	; 0x102 <write_2Nib>
	wait_lcd();
 17e:	0e 94 90 00 	call	0x120	; 0x120 <wait_lcd>

//entry mode set 
    
    write_2Nib(0x06);
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	0e 94 81 00 	call	0x102	; 0x102 <write_2Nib>
    wait_lcd();		
 188:	0e 94 90 00 	call	0x120	; 0x120 <wait_lcd>
}
 18c:	08 95       	ret

0000018e <putchar_lcd>:
void putchar_lcd(unsigned char data){
	
	setbit(CTRL,RS);
 18e:	90 9a       	sbi	0x12, 0	; 18
	write_2Nib(data);
 190:	0e 94 81 00 	call	0x102	; 0x102 <write_2Nib>
	wait_lcd();
 194:	0e 94 90 00 	call	0x120	; 0x120 <wait_lcd>
}
 198:	08 95       	ret

0000019a <cursor_home>:
void cursor_home(){
	clearbit(CTRL,RS);
 19a:	90 98       	cbi	0x12, 0	; 18
	write_2Nib(0x03);
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	0e 94 81 00 	call	0x102	; 0x102 <write_2Nib>
	wait_lcd();
 1a2:	0e 94 90 00 	call	0x120	; 0x120 <wait_lcd>
}
 1a6:	08 95       	ret

000001a8 <clear_lcd>:
void clear_lcd(){
	clearbit(CTRL,RS);
 1a8:	90 98       	cbi	0x12, 0	; 18
	write_2Nib(0x01);
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 81 00 	call	0x102	; 0x102 <write_2Nib>
	wait_lcd();
 1b0:	0e 94 90 00 	call	0x120	; 0x120 <wait_lcd>
}
 1b4:	08 95       	ret

000001b6 <movecursor>:
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
	clearbit(CTRL,RS);
 1b6:	90 98       	cbi	0x12, 0	; 18
	write_2Nib(0x01);
	wait_lcd();
}
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
 1b8:	82 95       	swap	r24
 1ba:	88 0f       	add	r24, r24
 1bc:	88 0f       	add	r24, r24
 1be:	80 7c       	andi	r24, 0xC0	; 192
 1c0:	86 0f       	add	r24, r22
	clearbit(CTRL,RS);
	write_2Nib(x);
 1c2:	81 5c       	subi	r24, 0xC1	; 193
 1c4:	0e 94 81 00 	call	0x102	; 0x102 <write_2Nib>
	wait_lcd();
 1c8:	0e 94 90 00 	call	0x120	; 0x120 <wait_lcd>
}
 1cc:	08 95       	ret

000001ce <count_number>:
int count_number(unsigned int number){
 1ce:	bc 01       	movw	r22, r24
	int dem=0;
	while(number){
 1d0:	00 97       	sbiw	r24, 0x00	; 0
 1d2:	71 f0       	breq	.+28     	; 0x1f0 <count_number+0x22>
	clearbit(CTRL,RS);
	write_2Nib(x);
	wait_lcd();
}
int count_number(unsigned int number){
	int dem=0;
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e0       	ldi	r19, 0x00	; 0
	while(number){
		number=number/10;
 1d8:	ea e0       	ldi	r30, 0x0A	; 10
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	cb 01       	movw	r24, r22
 1de:	bf 01       	movw	r22, r30
 1e0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__udivmodhi4>
		dem++;
 1e4:	2f 5f       	subi	r18, 0xFF	; 255
 1e6:	3f 4f       	sbci	r19, 0xFF	; 255
	write_2Nib(x);
	wait_lcd();
}
int count_number(unsigned int number){
	int dem=0;
	while(number){
 1e8:	61 15       	cp	r22, r1
 1ea:	71 05       	cpc	r23, r1
 1ec:	b9 f7       	brne	.-18     	; 0x1dc <count_number+0xe>
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <count_number+0x26>
	clearbit(CTRL,RS);
	write_2Nib(x);
	wait_lcd();
}
int count_number(unsigned int number){
	int dem=0;
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	30 e0       	ldi	r19, 0x00	; 0
	while(number){
		number=number/10;
		dem++;
	}
	return dem;
}
 1f4:	82 2f       	mov	r24, r18
 1f6:	93 2f       	mov	r25, r19
 1f8:	08 95       	ret

000001fa <printnumber_lcd>:
void printnumber_lcd(long int number){
 1fa:	ef 92       	push	r14
 1fc:	ff 92       	push	r15
 1fe:	0f 93       	push	r16
 200:	1f 93       	push	r17
		temp=temp/10;
		putchar_lcd(a+48);*/
		
	int a,b,c,d,e,f;
	a=number/100000;
	number=number%100000;
 202:	20 ea       	ldi	r18, 0xA0	; 160
 204:	36 e8       	ldi	r19, 0x86	; 134
 206:	41 e0       	ldi	r20, 0x01	; 1
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	0e 94 0f 03 	call	0x61e	; 0x61e <__divmodsi4>
 20e:	7b 01       	movw	r14, r22
 210:	8c 01       	movw	r16, r24
	putchar_lcd(a+48);
 212:	82 2f       	mov	r24, r18
 214:	80 5d       	subi	r24, 0xD0	; 208
 216:	0e 94 c7 00 	call	0x18e	; 0x18e <putchar_lcd>
	b=number/10000;
 21a:	c8 01       	movw	r24, r16
 21c:	b7 01       	movw	r22, r14
 21e:	20 e1       	ldi	r18, 0x10	; 16
 220:	37 e2       	ldi	r19, 0x27	; 39
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	50 e0       	ldi	r21, 0x00	; 0
 226:	0e 94 0f 03 	call	0x61e	; 0x61e <__divmodsi4>
 22a:	7b 01       	movw	r14, r22
 22c:	8c 01       	movw	r16, r24
	putchar_lcd(b+48);
 22e:	82 2f       	mov	r24, r18
 230:	80 5d       	subi	r24, 0xD0	; 208
 232:	0e 94 c7 00 	call	0x18e	; 0x18e <putchar_lcd>
	number=number%10000;
	c=number/1000;
 236:	c8 01       	movw	r24, r16
 238:	b7 01       	movw	r22, r14
 23a:	28 ee       	ldi	r18, 0xE8	; 232
 23c:	33 e0       	ldi	r19, 0x03	; 3
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	0e 94 0f 03 	call	0x61e	; 0x61e <__divmodsi4>
 246:	7b 01       	movw	r14, r22
 248:	8c 01       	movw	r16, r24
	putchar_lcd(c+48);
 24a:	82 2f       	mov	r24, r18
 24c:	80 5d       	subi	r24, 0xD0	; 208
 24e:	0e 94 c7 00 	call	0x18e	; 0x18e <putchar_lcd>
	number=number%1000;
	d=number/100;
 252:	c8 01       	movw	r24, r16
 254:	b7 01       	movw	r22, r14
 256:	24 e6       	ldi	r18, 0x64	; 100
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	50 e0       	ldi	r21, 0x00	; 0
 25e:	0e 94 0f 03 	call	0x61e	; 0x61e <__divmodsi4>
 262:	7b 01       	movw	r14, r22
 264:	8c 01       	movw	r16, r24
	putchar_lcd(d+48);
 266:	82 2f       	mov	r24, r18
 268:	80 5d       	subi	r24, 0xD0	; 208
 26a:	0e 94 c7 00 	call	0x18e	; 0x18e <putchar_lcd>
	number=number%100;
	e=number/10;
 26e:	c8 01       	movw	r24, r16
 270:	b7 01       	movw	r22, r14
 272:	2a e0       	ldi	r18, 0x0A	; 10
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	0e 94 0f 03 	call	0x61e	; 0x61e <__divmodsi4>
 27e:	16 2f       	mov	r17, r22
	putchar_lcd(e+48);
 280:	82 2f       	mov	r24, r18
 282:	80 5d       	subi	r24, 0xD0	; 208
 284:	0e 94 c7 00 	call	0x18e	; 0x18e <putchar_lcd>
	f=number%10;
	putchar_lcd(f+48);
 288:	81 2f       	mov	r24, r17
 28a:	80 5d       	subi	r24, 0xD0	; 208
 28c:	0e 94 c7 00 	call	0x18e	; 0x18e <putchar_lcd>
	
	
}
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	ff 90       	pop	r15
 296:	ef 90       	pop	r14
 298:	08 95       	ret

0000029a <putstr_lcd>:

putstr_lcd(unsigned char *str, unsigned int lenght){
 29a:	ef 92       	push	r14
 29c:	ff 92       	push	r15
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	7b 01       	movw	r14, r22
	unsigned int i;
	for(i=0;i<lenght;i++){
 2a8:	61 15       	cp	r22, r1
 2aa:	71 05       	cpc	r23, r1
 2ac:	99 f0       	breq	.+38     	; 0x2d4 <putstr_lcd+0x3a>
 2ae:	08 2f       	mov	r16, r24
 2b0:	19 2f       	mov	r17, r25
 2b2:	c0 e0       	ldi	r28, 0x00	; 0
 2b4:	d0 e0       	ldi	r29, 0x00	; 0
		if(*(str+i)>0){ 
 2b6:	f8 01       	movw	r30, r16
 2b8:	81 91       	ld	r24, Z+
 2ba:	8f 01       	movw	r16, r30
 2bc:	88 23       	and	r24, r24
 2be:	19 f0       	breq	.+6      	; 0x2c6 <putstr_lcd+0x2c>
			putchar_lcd(*(str+i));
 2c0:	0e 94 c7 00 	call	0x18e	; 0x18e <putchar_lcd>
 2c4:	03 c0       	rjmp	.+6      	; 0x2cc <putstr_lcd+0x32>
			}
		else putchar_lcd(0);	
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	0e 94 c7 00 	call	0x18e	; 0x18e <putchar_lcd>
	
}

putstr_lcd(unsigned char *str, unsigned int lenght){
	unsigned int i;
	for(i=0;i<lenght;i++){
 2cc:	21 96       	adiw	r28, 0x01	; 1
 2ce:	ce 15       	cp	r28, r14
 2d0:	df 05       	cpc	r29, r15
 2d2:	88 f3       	brcs	.-30     	; 0x2b6 <putstr_lcd+0x1c>
		if(*(str+i)>0){ 
			putchar_lcd(*(str+i));
			}
		else putchar_lcd(0);	
}
}
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	ff 90       	pop	r15
 2de:	ef 90       	pop	r14
 2e0:	08 95       	ret

000002e2 <__divsf3>:
 2e2:	0c d0       	rcall	.+24     	; 0x2fc <__divsf3x>
 2e4:	eb c0       	rjmp	.+470    	; 0x4bc <__fp_round>
 2e6:	e3 d0       	rcall	.+454    	; 0x4ae <__fp_pscB>
 2e8:	40 f0       	brcs	.+16     	; 0x2fa <__divsf3+0x18>
 2ea:	da d0       	rcall	.+436    	; 0x4a0 <__fp_pscA>
 2ec:	30 f0       	brcs	.+12     	; 0x2fa <__divsf3+0x18>
 2ee:	21 f4       	brne	.+8      	; 0x2f8 <__divsf3+0x16>
 2f0:	5f 3f       	cpi	r21, 0xFF	; 255
 2f2:	19 f0       	breq	.+6      	; 0x2fa <__divsf3+0x18>
 2f4:	cc c0       	rjmp	.+408    	; 0x48e <__fp_inf>
 2f6:	51 11       	cpse	r21, r1
 2f8:	15 c1       	rjmp	.+554    	; 0x524 <__fp_szero>
 2fa:	cf c0       	rjmp	.+414    	; 0x49a <__fp_nan>

000002fc <__divsf3x>:
 2fc:	f0 d0       	rcall	.+480    	; 0x4de <__fp_split3>
 2fe:	98 f3       	brcs	.-26     	; 0x2e6 <__divsf3+0x4>

00000300 <__divsf3_pse>:
 300:	99 23       	and	r25, r25
 302:	c9 f3       	breq	.-14     	; 0x2f6 <__divsf3+0x14>
 304:	55 23       	and	r21, r21
 306:	b1 f3       	breq	.-20     	; 0x2f4 <__divsf3+0x12>
 308:	95 1b       	sub	r25, r21
 30a:	55 0b       	sbc	r21, r21
 30c:	bb 27       	eor	r27, r27
 30e:	aa 27       	eor	r26, r26
 310:	62 17       	cp	r22, r18
 312:	73 07       	cpc	r23, r19
 314:	84 07       	cpc	r24, r20
 316:	38 f0       	brcs	.+14     	; 0x326 <__divsf3_pse+0x26>
 318:	9f 5f       	subi	r25, 0xFF	; 255
 31a:	5f 4f       	sbci	r21, 0xFF	; 255
 31c:	22 0f       	add	r18, r18
 31e:	33 1f       	adc	r19, r19
 320:	44 1f       	adc	r20, r20
 322:	aa 1f       	adc	r26, r26
 324:	a9 f3       	breq	.-22     	; 0x310 <__divsf3_pse+0x10>
 326:	33 d0       	rcall	.+102    	; 0x38e <__divsf3_pse+0x8e>
 328:	0e 2e       	mov	r0, r30
 32a:	3a f0       	brmi	.+14     	; 0x33a <__divsf3_pse+0x3a>
 32c:	e0 e8       	ldi	r30, 0x80	; 128
 32e:	30 d0       	rcall	.+96     	; 0x390 <__divsf3_pse+0x90>
 330:	91 50       	subi	r25, 0x01	; 1
 332:	50 40       	sbci	r21, 0x00	; 0
 334:	e6 95       	lsr	r30
 336:	00 1c       	adc	r0, r0
 338:	ca f7       	brpl	.-14     	; 0x32c <__divsf3_pse+0x2c>
 33a:	29 d0       	rcall	.+82     	; 0x38e <__divsf3_pse+0x8e>
 33c:	fe 2f       	mov	r31, r30
 33e:	27 d0       	rcall	.+78     	; 0x38e <__divsf3_pse+0x8e>
 340:	66 0f       	add	r22, r22
 342:	77 1f       	adc	r23, r23
 344:	88 1f       	adc	r24, r24
 346:	bb 1f       	adc	r27, r27
 348:	26 17       	cp	r18, r22
 34a:	37 07       	cpc	r19, r23
 34c:	48 07       	cpc	r20, r24
 34e:	ab 07       	cpc	r26, r27
 350:	b0 e8       	ldi	r27, 0x80	; 128
 352:	09 f0       	breq	.+2      	; 0x356 <__divsf3_pse+0x56>
 354:	bb 0b       	sbc	r27, r27
 356:	80 2d       	mov	r24, r0
 358:	bf 01       	movw	r22, r30
 35a:	ff 27       	eor	r31, r31
 35c:	93 58       	subi	r25, 0x83	; 131
 35e:	5f 4f       	sbci	r21, 0xFF	; 255
 360:	2a f0       	brmi	.+10     	; 0x36c <__divsf3_pse+0x6c>
 362:	9e 3f       	cpi	r25, 0xFE	; 254
 364:	51 05       	cpc	r21, r1
 366:	68 f0       	brcs	.+26     	; 0x382 <__divsf3_pse+0x82>
 368:	92 c0       	rjmp	.+292    	; 0x48e <__fp_inf>
 36a:	dc c0       	rjmp	.+440    	; 0x524 <__fp_szero>
 36c:	5f 3f       	cpi	r21, 0xFF	; 255
 36e:	ec f3       	brlt	.-6      	; 0x36a <__divsf3_pse+0x6a>
 370:	98 3e       	cpi	r25, 0xE8	; 232
 372:	dc f3       	brlt	.-10     	; 0x36a <__divsf3_pse+0x6a>
 374:	86 95       	lsr	r24
 376:	77 95       	ror	r23
 378:	67 95       	ror	r22
 37a:	b7 95       	ror	r27
 37c:	f7 95       	ror	r31
 37e:	9f 5f       	subi	r25, 0xFF	; 255
 380:	c9 f7       	brne	.-14     	; 0x374 <__divsf3_pse+0x74>
 382:	88 0f       	add	r24, r24
 384:	91 1d       	adc	r25, r1
 386:	96 95       	lsr	r25
 388:	87 95       	ror	r24
 38a:	97 f9       	bld	r25, 7
 38c:	08 95       	ret
 38e:	e1 e0       	ldi	r30, 0x01	; 1
 390:	66 0f       	add	r22, r22
 392:	77 1f       	adc	r23, r23
 394:	88 1f       	adc	r24, r24
 396:	bb 1f       	adc	r27, r27
 398:	62 17       	cp	r22, r18
 39a:	73 07       	cpc	r23, r19
 39c:	84 07       	cpc	r24, r20
 39e:	ba 07       	cpc	r27, r26
 3a0:	20 f0       	brcs	.+8      	; 0x3aa <__divsf3_pse+0xaa>
 3a2:	62 1b       	sub	r22, r18
 3a4:	73 0b       	sbc	r23, r19
 3a6:	84 0b       	sbc	r24, r20
 3a8:	ba 0b       	sbc	r27, r26
 3aa:	ee 1f       	adc	r30, r30
 3ac:	88 f7       	brcc	.-30     	; 0x390 <__divsf3_pse+0x90>
 3ae:	e0 95       	com	r30
 3b0:	08 95       	ret

000003b2 <__fixsfsi>:
 3b2:	04 d0       	rcall	.+8      	; 0x3bc <__fixunssfsi>
 3b4:	68 94       	set
 3b6:	b1 11       	cpse	r27, r1
 3b8:	b5 c0       	rjmp	.+362    	; 0x524 <__fp_szero>
 3ba:	08 95       	ret

000003bc <__fixunssfsi>:
 3bc:	98 d0       	rcall	.+304    	; 0x4ee <__fp_splitA>
 3be:	88 f0       	brcs	.+34     	; 0x3e2 <__fixunssfsi+0x26>
 3c0:	9f 57       	subi	r25, 0x7F	; 127
 3c2:	90 f0       	brcs	.+36     	; 0x3e8 <__fixunssfsi+0x2c>
 3c4:	b9 2f       	mov	r27, r25
 3c6:	99 27       	eor	r25, r25
 3c8:	b7 51       	subi	r27, 0x17	; 23
 3ca:	a0 f0       	brcs	.+40     	; 0x3f4 <__fixunssfsi+0x38>
 3cc:	d1 f0       	breq	.+52     	; 0x402 <__fixunssfsi+0x46>
 3ce:	66 0f       	add	r22, r22
 3d0:	77 1f       	adc	r23, r23
 3d2:	88 1f       	adc	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	1a f0       	brmi	.+6      	; 0x3de <__fixunssfsi+0x22>
 3d8:	ba 95       	dec	r27
 3da:	c9 f7       	brne	.-14     	; 0x3ce <__fixunssfsi+0x12>
 3dc:	12 c0       	rjmp	.+36     	; 0x402 <__fixunssfsi+0x46>
 3de:	b1 30       	cpi	r27, 0x01	; 1
 3e0:	81 f0       	breq	.+32     	; 0x402 <__fixunssfsi+0x46>
 3e2:	9f d0       	rcall	.+318    	; 0x522 <__fp_zero>
 3e4:	b1 e0       	ldi	r27, 0x01	; 1
 3e6:	08 95       	ret
 3e8:	9c c0       	rjmp	.+312    	; 0x522 <__fp_zero>
 3ea:	67 2f       	mov	r22, r23
 3ec:	78 2f       	mov	r23, r24
 3ee:	88 27       	eor	r24, r24
 3f0:	b8 5f       	subi	r27, 0xF8	; 248
 3f2:	39 f0       	breq	.+14     	; 0x402 <__fixunssfsi+0x46>
 3f4:	b9 3f       	cpi	r27, 0xF9	; 249
 3f6:	cc f3       	brlt	.-14     	; 0x3ea <__fixunssfsi+0x2e>
 3f8:	86 95       	lsr	r24
 3fa:	77 95       	ror	r23
 3fc:	67 95       	ror	r22
 3fe:	b3 95       	inc	r27
 400:	d9 f7       	brne	.-10     	; 0x3f8 <__fixunssfsi+0x3c>
 402:	3e f4       	brtc	.+14     	; 0x412 <__fixunssfsi+0x56>
 404:	90 95       	com	r25
 406:	80 95       	com	r24
 408:	70 95       	com	r23
 40a:	61 95       	neg	r22
 40c:	7f 4f       	sbci	r23, 0xFF	; 255
 40e:	8f 4f       	sbci	r24, 0xFF	; 255
 410:	9f 4f       	sbci	r25, 0xFF	; 255
 412:	08 95       	ret

00000414 <__floatunsisf>:
 414:	e8 94       	clt
 416:	09 c0       	rjmp	.+18     	; 0x42a <__floatsisf+0x12>

00000418 <__floatsisf>:
 418:	97 fb       	bst	r25, 7
 41a:	3e f4       	brtc	.+14     	; 0x42a <__floatsisf+0x12>
 41c:	90 95       	com	r25
 41e:	80 95       	com	r24
 420:	70 95       	com	r23
 422:	61 95       	neg	r22
 424:	7f 4f       	sbci	r23, 0xFF	; 255
 426:	8f 4f       	sbci	r24, 0xFF	; 255
 428:	9f 4f       	sbci	r25, 0xFF	; 255
 42a:	99 23       	and	r25, r25
 42c:	a9 f0       	breq	.+42     	; 0x458 <__floatsisf+0x40>
 42e:	f9 2f       	mov	r31, r25
 430:	96 e9       	ldi	r25, 0x96	; 150
 432:	bb 27       	eor	r27, r27
 434:	93 95       	inc	r25
 436:	f6 95       	lsr	r31
 438:	87 95       	ror	r24
 43a:	77 95       	ror	r23
 43c:	67 95       	ror	r22
 43e:	b7 95       	ror	r27
 440:	f1 11       	cpse	r31, r1
 442:	f8 cf       	rjmp	.-16     	; 0x434 <__floatsisf+0x1c>
 444:	fa f4       	brpl	.+62     	; 0x484 <__stack+0x25>
 446:	bb 0f       	add	r27, r27
 448:	11 f4       	brne	.+4      	; 0x44e <__floatsisf+0x36>
 44a:	60 ff       	sbrs	r22, 0
 44c:	1b c0       	rjmp	.+54     	; 0x484 <__stack+0x25>
 44e:	6f 5f       	subi	r22, 0xFF	; 255
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	8f 4f       	sbci	r24, 0xFF	; 255
 454:	9f 4f       	sbci	r25, 0xFF	; 255
 456:	16 c0       	rjmp	.+44     	; 0x484 <__stack+0x25>
 458:	88 23       	and	r24, r24
 45a:	11 f0       	breq	.+4      	; 0x460 <__stack+0x1>
 45c:	96 e9       	ldi	r25, 0x96	; 150
 45e:	11 c0       	rjmp	.+34     	; 0x482 <__stack+0x23>
 460:	77 23       	and	r23, r23
 462:	21 f0       	breq	.+8      	; 0x46c <__stack+0xd>
 464:	9e e8       	ldi	r25, 0x8E	; 142
 466:	87 2f       	mov	r24, r23
 468:	76 2f       	mov	r23, r22
 46a:	05 c0       	rjmp	.+10     	; 0x476 <__stack+0x17>
 46c:	66 23       	and	r22, r22
 46e:	71 f0       	breq	.+28     	; 0x48c <__stack+0x2d>
 470:	96 e8       	ldi	r25, 0x86	; 134
 472:	86 2f       	mov	r24, r22
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	2a f0       	brmi	.+10     	; 0x484 <__stack+0x25>
 47a:	9a 95       	dec	r25
 47c:	66 0f       	add	r22, r22
 47e:	77 1f       	adc	r23, r23
 480:	88 1f       	adc	r24, r24
 482:	da f7       	brpl	.-10     	; 0x47a <__stack+0x1b>
 484:	88 0f       	add	r24, r24
 486:	96 95       	lsr	r25
 488:	87 95       	ror	r24
 48a:	97 f9       	bld	r25, 7
 48c:	08 95       	ret

0000048e <__fp_inf>:
 48e:	97 f9       	bld	r25, 7
 490:	9f 67       	ori	r25, 0x7F	; 127
 492:	80 e8       	ldi	r24, 0x80	; 128
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	08 95       	ret

0000049a <__fp_nan>:
 49a:	9f ef       	ldi	r25, 0xFF	; 255
 49c:	80 ec       	ldi	r24, 0xC0	; 192
 49e:	08 95       	ret

000004a0 <__fp_pscA>:
 4a0:	00 24       	eor	r0, r0
 4a2:	0a 94       	dec	r0
 4a4:	16 16       	cp	r1, r22
 4a6:	17 06       	cpc	r1, r23
 4a8:	18 06       	cpc	r1, r24
 4aa:	09 06       	cpc	r0, r25
 4ac:	08 95       	ret

000004ae <__fp_pscB>:
 4ae:	00 24       	eor	r0, r0
 4b0:	0a 94       	dec	r0
 4b2:	12 16       	cp	r1, r18
 4b4:	13 06       	cpc	r1, r19
 4b6:	14 06       	cpc	r1, r20
 4b8:	05 06       	cpc	r0, r21
 4ba:	08 95       	ret

000004bc <__fp_round>:
 4bc:	09 2e       	mov	r0, r25
 4be:	03 94       	inc	r0
 4c0:	00 0c       	add	r0, r0
 4c2:	11 f4       	brne	.+4      	; 0x4c8 <__fp_round+0xc>
 4c4:	88 23       	and	r24, r24
 4c6:	52 f0       	brmi	.+20     	; 0x4dc <__fp_round+0x20>
 4c8:	bb 0f       	add	r27, r27
 4ca:	40 f4       	brcc	.+16     	; 0x4dc <__fp_round+0x20>
 4cc:	bf 2b       	or	r27, r31
 4ce:	11 f4       	brne	.+4      	; 0x4d4 <__fp_round+0x18>
 4d0:	60 ff       	sbrs	r22, 0
 4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__fp_round+0x20>
 4d4:	6f 5f       	subi	r22, 0xFF	; 255
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	8f 4f       	sbci	r24, 0xFF	; 255
 4da:	9f 4f       	sbci	r25, 0xFF	; 255
 4dc:	08 95       	ret

000004de <__fp_split3>:
 4de:	57 fd       	sbrc	r21, 7
 4e0:	90 58       	subi	r25, 0x80	; 128
 4e2:	44 0f       	add	r20, r20
 4e4:	55 1f       	adc	r21, r21
 4e6:	59 f0       	breq	.+22     	; 0x4fe <__fp_splitA+0x10>
 4e8:	5f 3f       	cpi	r21, 0xFF	; 255
 4ea:	71 f0       	breq	.+28     	; 0x508 <__fp_splitA+0x1a>
 4ec:	47 95       	ror	r20

000004ee <__fp_splitA>:
 4ee:	88 0f       	add	r24, r24
 4f0:	97 fb       	bst	r25, 7
 4f2:	99 1f       	adc	r25, r25
 4f4:	61 f0       	breq	.+24     	; 0x50e <__fp_splitA+0x20>
 4f6:	9f 3f       	cpi	r25, 0xFF	; 255
 4f8:	79 f0       	breq	.+30     	; 0x518 <__fp_splitA+0x2a>
 4fa:	87 95       	ror	r24
 4fc:	08 95       	ret
 4fe:	12 16       	cp	r1, r18
 500:	13 06       	cpc	r1, r19
 502:	14 06       	cpc	r1, r20
 504:	55 1f       	adc	r21, r21
 506:	f2 cf       	rjmp	.-28     	; 0x4ec <__fp_split3+0xe>
 508:	46 95       	lsr	r20
 50a:	f1 df       	rcall	.-30     	; 0x4ee <__fp_splitA>
 50c:	08 c0       	rjmp	.+16     	; 0x51e <__fp_splitA+0x30>
 50e:	16 16       	cp	r1, r22
 510:	17 06       	cpc	r1, r23
 512:	18 06       	cpc	r1, r24
 514:	99 1f       	adc	r25, r25
 516:	f1 cf       	rjmp	.-30     	; 0x4fa <__fp_splitA+0xc>
 518:	86 95       	lsr	r24
 51a:	71 05       	cpc	r23, r1
 51c:	61 05       	cpc	r22, r1
 51e:	08 94       	sec
 520:	08 95       	ret

00000522 <__fp_zero>:
 522:	e8 94       	clt

00000524 <__fp_szero>:
 524:	bb 27       	eor	r27, r27
 526:	66 27       	eor	r22, r22
 528:	77 27       	eor	r23, r23
 52a:	cb 01       	movw	r24, r22
 52c:	97 f9       	bld	r25, 7
 52e:	08 95       	ret

00000530 <__mulsf3>:
 530:	0b d0       	rcall	.+22     	; 0x548 <__mulsf3x>
 532:	c4 cf       	rjmp	.-120    	; 0x4bc <__fp_round>
 534:	b5 df       	rcall	.-150    	; 0x4a0 <__fp_pscA>
 536:	28 f0       	brcs	.+10     	; 0x542 <__mulsf3+0x12>
 538:	ba df       	rcall	.-140    	; 0x4ae <__fp_pscB>
 53a:	18 f0       	brcs	.+6      	; 0x542 <__mulsf3+0x12>
 53c:	95 23       	and	r25, r21
 53e:	09 f0       	breq	.+2      	; 0x542 <__mulsf3+0x12>
 540:	a6 cf       	rjmp	.-180    	; 0x48e <__fp_inf>
 542:	ab cf       	rjmp	.-170    	; 0x49a <__fp_nan>
 544:	11 24       	eor	r1, r1
 546:	ee cf       	rjmp	.-36     	; 0x524 <__fp_szero>

00000548 <__mulsf3x>:
 548:	ca df       	rcall	.-108    	; 0x4de <__fp_split3>
 54a:	a0 f3       	brcs	.-24     	; 0x534 <__mulsf3+0x4>

0000054c <__mulsf3_pse>:
 54c:	95 9f       	mul	r25, r21
 54e:	d1 f3       	breq	.-12     	; 0x544 <__mulsf3+0x14>
 550:	95 0f       	add	r25, r21
 552:	50 e0       	ldi	r21, 0x00	; 0
 554:	55 1f       	adc	r21, r21
 556:	62 9f       	mul	r22, r18
 558:	f0 01       	movw	r30, r0
 55a:	72 9f       	mul	r23, r18
 55c:	bb 27       	eor	r27, r27
 55e:	f0 0d       	add	r31, r0
 560:	b1 1d       	adc	r27, r1
 562:	63 9f       	mul	r22, r19
 564:	aa 27       	eor	r26, r26
 566:	f0 0d       	add	r31, r0
 568:	b1 1d       	adc	r27, r1
 56a:	aa 1f       	adc	r26, r26
 56c:	64 9f       	mul	r22, r20
 56e:	66 27       	eor	r22, r22
 570:	b0 0d       	add	r27, r0
 572:	a1 1d       	adc	r26, r1
 574:	66 1f       	adc	r22, r22
 576:	82 9f       	mul	r24, r18
 578:	22 27       	eor	r18, r18
 57a:	b0 0d       	add	r27, r0
 57c:	a1 1d       	adc	r26, r1
 57e:	62 1f       	adc	r22, r18
 580:	73 9f       	mul	r23, r19
 582:	b0 0d       	add	r27, r0
 584:	a1 1d       	adc	r26, r1
 586:	62 1f       	adc	r22, r18
 588:	83 9f       	mul	r24, r19
 58a:	a0 0d       	add	r26, r0
 58c:	61 1d       	adc	r22, r1
 58e:	22 1f       	adc	r18, r18
 590:	74 9f       	mul	r23, r20
 592:	33 27       	eor	r19, r19
 594:	a0 0d       	add	r26, r0
 596:	61 1d       	adc	r22, r1
 598:	23 1f       	adc	r18, r19
 59a:	84 9f       	mul	r24, r20
 59c:	60 0d       	add	r22, r0
 59e:	21 1d       	adc	r18, r1
 5a0:	82 2f       	mov	r24, r18
 5a2:	76 2f       	mov	r23, r22
 5a4:	6a 2f       	mov	r22, r26
 5a6:	11 24       	eor	r1, r1
 5a8:	9f 57       	subi	r25, 0x7F	; 127
 5aa:	50 40       	sbci	r21, 0x00	; 0
 5ac:	8a f0       	brmi	.+34     	; 0x5d0 <__mulsf3_pse+0x84>
 5ae:	e1 f0       	breq	.+56     	; 0x5e8 <__mulsf3_pse+0x9c>
 5b0:	88 23       	and	r24, r24
 5b2:	4a f0       	brmi	.+18     	; 0x5c6 <__mulsf3_pse+0x7a>
 5b4:	ee 0f       	add	r30, r30
 5b6:	ff 1f       	adc	r31, r31
 5b8:	bb 1f       	adc	r27, r27
 5ba:	66 1f       	adc	r22, r22
 5bc:	77 1f       	adc	r23, r23
 5be:	88 1f       	adc	r24, r24
 5c0:	91 50       	subi	r25, 0x01	; 1
 5c2:	50 40       	sbci	r21, 0x00	; 0
 5c4:	a9 f7       	brne	.-22     	; 0x5b0 <__mulsf3_pse+0x64>
 5c6:	9e 3f       	cpi	r25, 0xFE	; 254
 5c8:	51 05       	cpc	r21, r1
 5ca:	70 f0       	brcs	.+28     	; 0x5e8 <__mulsf3_pse+0x9c>
 5cc:	60 cf       	rjmp	.-320    	; 0x48e <__fp_inf>
 5ce:	aa cf       	rjmp	.-172    	; 0x524 <__fp_szero>
 5d0:	5f 3f       	cpi	r21, 0xFF	; 255
 5d2:	ec f3       	brlt	.-6      	; 0x5ce <__mulsf3_pse+0x82>
 5d4:	98 3e       	cpi	r25, 0xE8	; 232
 5d6:	dc f3       	brlt	.-10     	; 0x5ce <__mulsf3_pse+0x82>
 5d8:	86 95       	lsr	r24
 5da:	77 95       	ror	r23
 5dc:	67 95       	ror	r22
 5de:	b7 95       	ror	r27
 5e0:	f7 95       	ror	r31
 5e2:	e7 95       	ror	r30
 5e4:	9f 5f       	subi	r25, 0xFF	; 255
 5e6:	c1 f7       	brne	.-16     	; 0x5d8 <__mulsf3_pse+0x8c>
 5e8:	fe 2b       	or	r31, r30
 5ea:	88 0f       	add	r24, r24
 5ec:	91 1d       	adc	r25, r1
 5ee:	96 95       	lsr	r25
 5f0:	87 95       	ror	r24
 5f2:	97 f9       	bld	r25, 7
 5f4:	08 95       	ret

000005f6 <__udivmodhi4>:
 5f6:	aa 1b       	sub	r26, r26
 5f8:	bb 1b       	sub	r27, r27
 5fa:	51 e1       	ldi	r21, 0x11	; 17
 5fc:	07 c0       	rjmp	.+14     	; 0x60c <__udivmodhi4_ep>

000005fe <__udivmodhi4_loop>:
 5fe:	aa 1f       	adc	r26, r26
 600:	bb 1f       	adc	r27, r27
 602:	a6 17       	cp	r26, r22
 604:	b7 07       	cpc	r27, r23
 606:	10 f0       	brcs	.+4      	; 0x60c <__udivmodhi4_ep>
 608:	a6 1b       	sub	r26, r22
 60a:	b7 0b       	sbc	r27, r23

0000060c <__udivmodhi4_ep>:
 60c:	88 1f       	adc	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	5a 95       	dec	r21
 612:	a9 f7       	brne	.-22     	; 0x5fe <__udivmodhi4_loop>
 614:	80 95       	com	r24
 616:	90 95       	com	r25
 618:	bc 01       	movw	r22, r24
 61a:	cd 01       	movw	r24, r26
 61c:	08 95       	ret

0000061e <__divmodsi4>:
 61e:	97 fb       	bst	r25, 7
 620:	09 2e       	mov	r0, r25
 622:	05 26       	eor	r0, r21
 624:	0e d0       	rcall	.+28     	; 0x642 <__divmodsi4_neg1>
 626:	57 fd       	sbrc	r21, 7
 628:	04 d0       	rcall	.+8      	; 0x632 <__divmodsi4_neg2>
 62a:	14 d0       	rcall	.+40     	; 0x654 <__udivmodsi4>
 62c:	0a d0       	rcall	.+20     	; 0x642 <__divmodsi4_neg1>
 62e:	00 1c       	adc	r0, r0
 630:	38 f4       	brcc	.+14     	; 0x640 <__divmodsi4_exit>

00000632 <__divmodsi4_neg2>:
 632:	50 95       	com	r21
 634:	40 95       	com	r20
 636:	30 95       	com	r19
 638:	21 95       	neg	r18
 63a:	3f 4f       	sbci	r19, 0xFF	; 255
 63c:	4f 4f       	sbci	r20, 0xFF	; 255
 63e:	5f 4f       	sbci	r21, 0xFF	; 255

00000640 <__divmodsi4_exit>:
 640:	08 95       	ret

00000642 <__divmodsi4_neg1>:
 642:	f6 f7       	brtc	.-4      	; 0x640 <__divmodsi4_exit>
 644:	90 95       	com	r25
 646:	80 95       	com	r24
 648:	70 95       	com	r23
 64a:	61 95       	neg	r22
 64c:	7f 4f       	sbci	r23, 0xFF	; 255
 64e:	8f 4f       	sbci	r24, 0xFF	; 255
 650:	9f 4f       	sbci	r25, 0xFF	; 255
 652:	08 95       	ret

00000654 <__udivmodsi4>:
 654:	a1 e2       	ldi	r26, 0x21	; 33
 656:	1a 2e       	mov	r1, r26
 658:	aa 1b       	sub	r26, r26
 65a:	bb 1b       	sub	r27, r27
 65c:	fd 01       	movw	r30, r26
 65e:	0d c0       	rjmp	.+26     	; 0x67a <__udivmodsi4_ep>

00000660 <__udivmodsi4_loop>:
 660:	aa 1f       	adc	r26, r26
 662:	bb 1f       	adc	r27, r27
 664:	ee 1f       	adc	r30, r30
 666:	ff 1f       	adc	r31, r31
 668:	a2 17       	cp	r26, r18
 66a:	b3 07       	cpc	r27, r19
 66c:	e4 07       	cpc	r30, r20
 66e:	f5 07       	cpc	r31, r21
 670:	20 f0       	brcs	.+8      	; 0x67a <__udivmodsi4_ep>
 672:	a2 1b       	sub	r26, r18
 674:	b3 0b       	sbc	r27, r19
 676:	e4 0b       	sbc	r30, r20
 678:	f5 0b       	sbc	r31, r21

0000067a <__udivmodsi4_ep>:
 67a:	66 1f       	adc	r22, r22
 67c:	77 1f       	adc	r23, r23
 67e:	88 1f       	adc	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	1a 94       	dec	r1
 684:	69 f7       	brne	.-38     	; 0x660 <__udivmodsi4_loop>
 686:	60 95       	com	r22
 688:	70 95       	com	r23
 68a:	80 95       	com	r24
 68c:	90 95       	com	r25
 68e:	9b 01       	movw	r18, r22
 690:	ac 01       	movw	r20, r24
 692:	bd 01       	movw	r22, r26
 694:	cf 01       	movw	r24, r30
 696:	08 95       	ret

00000698 <_exit>:
 698:	f8 94       	cli

0000069a <__stop_program>:
 69a:	ff cf       	rjmp	.-2      	; 0x69a <__stop_program>
