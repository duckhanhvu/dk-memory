
project 40.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c0  00800060  00000f56  00000fea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  00800120  00800120  000010aa  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000010ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002d9  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001359  00000000  00000000  00001ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000070f  00000000  00000000  00002efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000016f4  00000000  00000000  00003609  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000260  00000000  00000000  00004d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000038a  00000000  00000000  00004f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a14  00000000  00000000  000052ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000110  00000000  00000000  00005cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000020  00000000  00000000  00005e0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_9>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

00000054 <__c.1526>:
  54:	20 20 44 53 31 33 30 37 20 44 65 6d 6f 00             DS1307 Demo.

00000062 <__c.1522>:
  62:	20 20 45 6c 65 63 74 72 6f 6e 69 63 73 00             Electronics.

00000070 <__c.1520>:
  70:	20 20 20 20 65 58 74 72 65 6d 65 00                     eXtreme.

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf e5       	ldi	r28, 0x5F	; 95
  82:	d4 e0       	ldi	r29, 0x04	; 4
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e6       	ldi	r26, 0x60	; 96
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	e6 e5       	ldi	r30, 0x56	; 86
  90:	ff e0       	ldi	r31, 0x0F	; 15
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 32       	cpi	r26, 0x20	; 32
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	11 e0       	ldi	r17, 0x01	; 1
  a0:	a0 e2       	ldi	r26, 0x20	; 32
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ae 35       	cpi	r26, 0x5E	; 94
  aa:	b1 07       	cpc	r27, r17
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <main>
  b2:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <ClockInit>:
0=Failed
1=Success

****************************************/
bool ClockInit()
{
  ba:	df 93       	push	r29
  bc:	cf 93       	push	r28
  be:	0f 92       	push	r0
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
	//Initialize I2C Bus
	I2CInit();
  c4:	0e 94 22 02 	call	0x444	; 0x444 <I2CInit>

	//Clear CH bit of RTC
	#define CH 7

	uint8_t temp;
	if(!DS1307Read(0x00,&temp)) return 0;
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	be 01       	movw	r22, r28
  cc:	6f 5f       	subi	r22, 0xFF	; 255
  ce:	7f 4f       	sbci	r23, 0xFF	; 255
  d0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DS1307Read>
  d4:	88 23       	and	r24, r24
  d6:	d9 f0       	breq	.+54     	; 0x10e <ClockInit+0x54>

	//Clear CH Bit
	temp&=(~(1<<CH));
  d8:	69 81       	ldd	r22, Y+1	; 0x01
  da:	6f 77       	andi	r22, 0x7F	; 127
  dc:	69 83       	std	Y+1, r22	; 0x01

	if(!DS1307Write(0x00,temp)) return 0;
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 01 02 	call	0x402	; 0x402 <DS1307Write>
  e4:	88 23       	and	r24, r24
  e6:	a9 f0       	breq	.+42     	; 0x112 <ClockInit+0x58>

	//Set 12 Hour Mode
	if(!DS1307Read(0x02,&temp)) return 0;
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	be 01       	movw	r22, r28
  ec:	6f 5f       	subi	r22, 0xFF	; 255
  ee:	7f 4f       	sbci	r23, 0xFF	; 255
  f0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DS1307Read>
  f4:	88 23       	and	r24, r24
  f6:	79 f0       	breq	.+30     	; 0x116 <ClockInit+0x5c>

	//Set 12Hour BIT
	temp|=(0b01000000);
  f8:	69 81       	ldd	r22, Y+1	; 0x01
  fa:	60 64       	ori	r22, 0x40	; 64
  fc:	69 83       	std	Y+1, r22	; 0x01

	//Write Back to DS1307
	if(!DS1307Write(0x02,temp)) return 0;
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	0e 94 01 02 	call	0x402	; 0x402 <DS1307Write>

	//Clear CH bit of RTC
	#define CH 7

	uint8_t temp;
	if(!DS1307Read(0x00,&temp)) return 0;
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	88 23       	and	r24, r24
 108:	39 f4       	brne	.+14     	; 0x118 <ClockInit+0x5e>
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	05 c0       	rjmp	.+10     	; 0x118 <ClockInit+0x5e>
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	03 c0       	rjmp	.+6      	; 0x118 <ClockInit+0x5e>

	//Clear CH Bit
	temp&=(~(1<<CH));

	if(!DS1307Write(0x00,temp)) return 0;
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	01 c0       	rjmp	.+2      	; 0x118 <ClockInit+0x5e>

	//Set 12 Hour Mode
	if(!DS1307Read(0x02,&temp)) return 0;
 116:	90 e0       	ldi	r25, 0x00	; 0
	//Write Back to DS1307
	if(!DS1307Write(0x02,temp)) return 0;

	return 1;

}
 118:	89 2f       	mov	r24, r25
 11a:	0f 90       	pop	r0
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <GetSecond>:
------------
the "second" part of time.

****************************************/
uint8_t GetSecond()
{
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	0f 92       	push	r0
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
	uint8_t sec,temp;

	//Read the Second Register
	DS1307Read(0x00,&temp);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	be 01       	movw	r22, r28
 130:	6f 5f       	subi	r22, 0xFF	; 255
 132:	7f 4f       	sbci	r23, 0xFF	; 255
 134:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DS1307Read>
	sec=(((temp & 0b01110000)>>4)*10)+(temp & 0b00001111);
 138:	99 81       	ldd	r25, Y+1	; 0x01
 13a:	29 2f       	mov	r18, r25
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	20 77       	andi	r18, 0x70	; 112
 140:	30 70       	andi	r19, 0x00	; 0
 142:	35 95       	asr	r19
 144:	27 95       	ror	r18
 146:	35 95       	asr	r19
 148:	27 95       	ror	r18
 14a:	35 95       	asr	r19
 14c:	27 95       	ror	r18
 14e:	35 95       	asr	r19
 150:	27 95       	ror	r18
 152:	22 0f       	add	r18, r18
 154:	82 2f       	mov	r24, r18
 156:	88 0f       	add	r24, r24
 158:	88 0f       	add	r24, r24
 15a:	28 0f       	add	r18, r24
 15c:	9f 70       	andi	r25, 0x0F	; 15

	return sec;

	
}
 15e:	82 2f       	mov	r24, r18
 160:	89 0f       	add	r24, r25
 162:	0f 90       	pop	r0
 164:	cf 91       	pop	r28
 166:	df 91       	pop	r29
 168:	08 95       	ret

0000016a <GetMinute>:
the "minute" part of time.

****************************************/

uint8_t GetMinute()
{
 16a:	df 93       	push	r29
 16c:	cf 93       	push	r28
 16e:	0f 92       	push	r0
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
	uint8_t min,temp;

	//Read the Minute Register
	DS1307Read(0x01,&temp);
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	be 01       	movw	r22, r28
 178:	6f 5f       	subi	r22, 0xFF	; 255
 17a:	7f 4f       	sbci	r23, 0xFF	; 255
 17c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DS1307Read>
	min=(((temp & 0b01110000)>>4)*10)+(temp & 0b00001111);
 180:	99 81       	ldd	r25, Y+1	; 0x01
 182:	29 2f       	mov	r18, r25
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	20 77       	andi	r18, 0x70	; 112
 188:	30 70       	andi	r19, 0x00	; 0
 18a:	35 95       	asr	r19
 18c:	27 95       	ror	r18
 18e:	35 95       	asr	r19
 190:	27 95       	ror	r18
 192:	35 95       	asr	r19
 194:	27 95       	ror	r18
 196:	35 95       	asr	r19
 198:	27 95       	ror	r18
 19a:	22 0f       	add	r18, r18
 19c:	82 2f       	mov	r24, r18
 19e:	88 0f       	add	r24, r24
 1a0:	88 0f       	add	r24, r24
 1a2:	28 0f       	add	r18, r24
 1a4:	9f 70       	andi	r25, 0x0F	; 15

	return min;
	
}
 1a6:	82 2f       	mov	r24, r18
 1a8:	89 0f       	add	r24, r25
 1aa:	0f 90       	pop	r0
 1ac:	cf 91       	pop	r28
 1ae:	df 91       	pop	r29
 1b0:	08 95       	ret

000001b2 <GetHour>:
the "hour" part of time.

****************************************/

uint8_t GetHour()
{
 1b2:	df 93       	push	r29
 1b4:	cf 93       	push	r28
 1b6:	0f 92       	push	r0
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
	uint8_t hr,temp;

	//Read the Hour Register
	DS1307Read(0x02,&temp);
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	be 01       	movw	r22, r28
 1c0:	6f 5f       	subi	r22, 0xFF	; 255
 1c2:	7f 4f       	sbci	r23, 0xFF	; 255
 1c4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DS1307Read>
	hr=(((temp & 0b00010000)>>4)*10)+(temp & 0b00001111);
 1c8:	99 81       	ldd	r25, Y+1	; 0x01
 1ca:	29 2f       	mov	r18, r25
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	20 71       	andi	r18, 0x10	; 16
 1d0:	30 70       	andi	r19, 0x00	; 0
 1d2:	35 95       	asr	r19
 1d4:	27 95       	ror	r18
 1d6:	35 95       	asr	r19
 1d8:	27 95       	ror	r18
 1da:	35 95       	asr	r19
 1dc:	27 95       	ror	r18
 1de:	35 95       	asr	r19
 1e0:	27 95       	ror	r18
 1e2:	22 0f       	add	r18, r18
 1e4:	82 2f       	mov	r24, r18
 1e6:	88 0f       	add	r24, r24
 1e8:	88 0f       	add	r24, r24
 1ea:	28 0f       	add	r18, r24
 1ec:	9f 70       	andi	r25, 0x0F	; 15

	return hr;

}
 1ee:	82 2f       	mov	r24, r18
 1f0:	89 0f       	add	r24, r25
 1f2:	0f 90       	pop	r0
 1f4:	cf 91       	pop	r28
 1f6:	df 91       	pop	r29
 1f8:	08 95       	ret

000001fa <GetAmPm>:
1=pm

****************************************/

uint8_t GetAmPm()
{
 1fa:	df 93       	push	r29
 1fc:	cf 93       	push	r28
 1fe:	0f 92       	push	r0
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
	uint8_t am_pm,temp;

	//Read the Hour Register
	DS1307Read(0x02,&temp);
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	be 01       	movw	r22, r28
 208:	6f 5f       	subi	r22, 0xFF	; 255
 20a:	7f 4f       	sbci	r23, 0xFF	; 255
 20c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DS1307Read>

	am_pm=(temp & 0b00100000)>>4;
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	82 95       	swap	r24
 214:	8f 70       	andi	r24, 0x0F	; 15

	return am_pm;

}
 216:	82 70       	andi	r24, 0x02	; 2
 218:	0f 90       	pop	r0
 21a:	cf 91       	pop	r28
 21c:	df 91       	pop	r29
 21e:	08 95       	ret

00000220 <SetSecond>:

bool SetSecond(uint8_t sec)
{
	uint8_t temp,result;

	temp=((sec/10)<<4)|(sec%10);
 220:	6a e0       	ldi	r22, 0x0A	; 10
 222:	0e 94 76 07 	call	0xeec	; 0xeec <__udivmodqi4>
 226:	68 2f       	mov	r22, r24
 228:	62 95       	swap	r22
 22a:	60 7f       	andi	r22, 0xF0	; 240
 22c:	69 2b       	or	r22, r25
	result=DS1307Write(0x00,temp);
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	0e 94 01 02 	call	0x402	; 0x402 <DS1307Write>

	return result;
}
 234:	08 95       	ret

00000236 <SetMinute>:

bool SetMinute(uint8_t min)
{
	uint8_t temp,result;

	temp=((min/10)<<4)|(min%10);
 236:	6a e0       	ldi	r22, 0x0A	; 10
 238:	0e 94 76 07 	call	0xeec	; 0xeec <__udivmodqi4>
 23c:	68 2f       	mov	r22, r24
 23e:	62 95       	swap	r22
 240:	60 7f       	andi	r22, 0xF0	; 240
 242:	69 2b       	or	r22, r25
	result=DS1307Write(0x01,temp);
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 01 02 	call	0x402	; 0x402 <DS1307Write>

	return result;
	
}
 24a:	08 95       	ret

0000024c <SetHour>:
1=success

****************************************/

bool SetHour(uint8_t hr)
{
 24c:	1f 93       	push	r17
 24e:	18 2f       	mov	r17, r24
	uint8_t temp,result,am_pm;

	am_pm=GetAmPm();
 250:	0e 94 fd 00 	call	0x1fa	; 0x1fa <GetAmPm>
 254:	28 2f       	mov	r18, r24

	temp=((hr/10)<<4)|(hr%10);
 256:	81 2f       	mov	r24, r17
 258:	6a e0       	ldi	r22, 0x0A	; 10
 25a:	0e 94 76 07 	call	0xeec	; 0xeec <__udivmodqi4>
 25e:	68 2f       	mov	r22, r24
 260:	62 95       	swap	r22
 262:	60 7f       	andi	r22, 0xF0	; 240
 264:	69 2b       	or	r22, r25
	temp|=0b01000000; //12 Hr Mode
 266:	60 64       	ori	r22, 0x40	; 64
	
	if(am_pm)
 268:	21 11       	cpse	r18, r1
	{
		temp|=0b00100000;
 26a:	60 62       	ori	r22, 0x20	; 32
	}
	result=DS1307Write(0x02,temp);
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	0e 94 01 02 	call	0x402	; 0x402 <DS1307Write>

	return result;
	
}
 272:	1f 91       	pop	r17
 274:	08 95       	ret

00000276 <SetAmPm>:
1=success

****************************************/

bool SetAmPm(bool pm)
{
 276:	1f 93       	push	r17
 278:	df 93       	push	r29
 27a:	cf 93       	push	r28
 27c:	0f 92       	push	r0
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
 282:	18 2f       	mov	r17, r24
	uint8_t temp,result;

	DS1307Read(0x02,&temp);
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	be 01       	movw	r22, r28
 288:	6f 5f       	subi	r22, 0xFF	; 255
 28a:	7f 4f       	sbci	r23, 0xFF	; 255
 28c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DS1307Read>

	if(pm)
 290:	11 23       	and	r17, r17
 292:	21 f0       	breq	.+8      	; 0x29c <SetAmPm+0x26>
		temp|=0b00100000;//SET
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	80 62       	ori	r24, 0x20	; 32
 298:	89 83       	std	Y+1, r24	; 0x01
 29a:	03 c0       	rjmp	.+6      	; 0x2a2 <SetAmPm+0x2c>
	else
		temp&=0b11011111;//CLEAR
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	8f 7d       	andi	r24, 0xDF	; 223
 2a0:	89 83       	std	Y+1, r24	; 0x01

	result=DS1307Write(0x02,temp);
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	69 81       	ldd	r22, Y+1	; 0x01
 2a6:	0e 94 01 02 	call	0x402	; 0x402 <DS1307Write>

	return result;
			
}
 2aa:	0f 90       	pop	r0
 2ac:	cf 91       	pop	r28
 2ae:	df 91       	pop	r29
 2b0:	1f 91       	pop	r17
 2b2:	08 95       	ret

000002b4 <GetTimeString>:


****************************************/

bool GetTimeString(char *Time)
{
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	df 93       	push	r29
 2ba:	cf 93       	push	r28
 2bc:	0f 92       	push	r0
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	8c 01       	movw	r16, r24
	uint8_t data;

	if(!DS1307Read(0x00,&data))
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	be 01       	movw	r22, r28
 2c8:	6f 5f       	subi	r22, 0xFF	; 255
 2ca:	7f 4f       	sbci	r23, 0xFF	; 255
 2cc:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DS1307Read>
 2d0:	88 23       	and	r24, r24
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <GetTimeString+0x22>
 2d4:	5e c0       	rjmp	.+188    	; 0x392 <GetTimeString+0xde>
	{
		//I/O Error
		return 0;
	}

	Time[11]='\0';
 2d6:	f8 01       	movw	r30, r16
 2d8:	13 86       	std	Z+11, r1	; 0x0b
	Time[10]='M';
 2da:	8d e4       	ldi	r24, 0x4D	; 77
 2dc:	82 87       	std	Z+10, r24	; 0x0a
	Time[8]=' ';
 2de:	80 e2       	ldi	r24, 0x20	; 32
 2e0:	80 87       	std	Z+8, r24	; 0x08

	Time[7]=48+(data & 0b00001111);
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	98 2f       	mov	r25, r24
 2e6:	9f 70       	andi	r25, 0x0F	; 15
 2e8:	90 5d       	subi	r25, 0xD0	; 208
 2ea:	97 83       	std	Z+7, r25	; 0x07
	Time[6]=48+((data & 0b01110000)>>4);
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	80 77       	andi	r24, 0x70	; 112
 2f0:	90 70       	andi	r25, 0x00	; 0
 2f2:	95 95       	asr	r25
 2f4:	87 95       	ror	r24
 2f6:	95 95       	asr	r25
 2f8:	87 95       	ror	r24
 2fa:	95 95       	asr	r25
 2fc:	87 95       	ror	r24
 2fe:	95 95       	asr	r25
 300:	87 95       	ror	r24
 302:	80 5d       	subi	r24, 0xD0	; 208
 304:	86 83       	std	Z+6, r24	; 0x06
	Time[5]=':';
 306:	8a e3       	ldi	r24, 0x3A	; 58
 308:	85 83       	std	Z+5, r24	; 0x05

	if(!DS1307Read(0x01,&data))
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	be 01       	movw	r22, r28
 30e:	6f 5f       	subi	r22, 0xFF	; 255
 310:	7f 4f       	sbci	r23, 0xFF	; 255
 312:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DS1307Read>
 316:	88 23       	and	r24, r24
 318:	f1 f1       	breq	.+124    	; 0x396 <GetTimeString+0xe2>
	{
		//I/O Error
		return 0;
	}
	
	Time[4]=48+(data & 0b00001111);
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	98 2f       	mov	r25, r24
 31e:	9f 70       	andi	r25, 0x0F	; 15
 320:	90 5d       	subi	r25, 0xD0	; 208
 322:	f8 01       	movw	r30, r16
 324:	94 83       	std	Z+4, r25	; 0x04
	Time[3]=48+((data & 0b01110000)>>4);
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	80 77       	andi	r24, 0x70	; 112
 32a:	90 70       	andi	r25, 0x00	; 0
 32c:	95 95       	asr	r25
 32e:	87 95       	ror	r24
 330:	95 95       	asr	r25
 332:	87 95       	ror	r24
 334:	95 95       	asr	r25
 336:	87 95       	ror	r24
 338:	95 95       	asr	r25
 33a:	87 95       	ror	r24
 33c:	80 5d       	subi	r24, 0xD0	; 208
 33e:	83 83       	std	Z+3, r24	; 0x03
	Time[2]=':';
 340:	8a e3       	ldi	r24, 0x3A	; 58
 342:	82 83       	std	Z+2, r24	; 0x02
	
	if(!DS1307Read(0x02,&data))
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	be 01       	movw	r22, r28
 348:	6f 5f       	subi	r22, 0xFF	; 255
 34a:	7f 4f       	sbci	r23, 0xFF	; 255
 34c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DS1307Read>
 350:	88 23       	and	r24, r24
 352:	19 f1       	breq	.+70     	; 0x39a <GetTimeString+0xe6>
	{
		//I/O Error
		return 0;
	}
	
	Time[1]=48+(data & 0b00001111);
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	98 2f       	mov	r25, r24
 358:	9f 70       	andi	r25, 0x0F	; 15
 35a:	90 5d       	subi	r25, 0xD0	; 208
 35c:	f8 01       	movw	r30, r16
 35e:	91 83       	std	Z+1, r25	; 0x01
	Time[0]=48+((data & 0b00010000)>>4);
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	9c 01       	movw	r18, r24
 364:	20 71       	andi	r18, 0x10	; 16
 366:	30 70       	andi	r19, 0x00	; 0
 368:	35 95       	asr	r19
 36a:	27 95       	ror	r18
 36c:	35 95       	asr	r19
 36e:	27 95       	ror	r18
 370:	35 95       	asr	r19
 372:	27 95       	ror	r18
 374:	35 95       	asr	r19
 376:	27 95       	ror	r18
 378:	20 5d       	subi	r18, 0xD0	; 208
 37a:	20 83       	st	Z, r18

	//AM/PM
	if(data & 0b00100000)
 37c:	85 ff       	sbrs	r24, 5
 37e:	04 c0       	rjmp	.+8      	; 0x388 <GetTimeString+0xd4>
	{
		Time[9]='P';
 380:	80 e5       	ldi	r24, 0x50	; 80
 382:	81 87       	std	Z+9, r24	; 0x09
	else
	{
		Time[9]='A';
	}

	return 1;//Success
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0a c0       	rjmp	.+20     	; 0x39c <GetTimeString+0xe8>
	{
		Time[9]='P';
	}
	else
	{
		Time[9]='A';
 388:	81 e4       	ldi	r24, 0x41	; 65
 38a:	f8 01       	movw	r30, r16
 38c:	81 87       	std	Z+9, r24	; 0x09
	}

	return 1;//Success
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	05 c0       	rjmp	.+10     	; 0x39c <GetTimeString+0xe8>
	uint8_t data;

	if(!DS1307Read(0x00,&data))
	{
		//I/O Error
		return 0;
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	03 c0       	rjmp	.+6      	; 0x39c <GetTimeString+0xe8>
	Time[5]=':';

	if(!DS1307Read(0x01,&data))
	{
		//I/O Error
		return 0;
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	01 c0       	rjmp	.+2      	; 0x39c <GetTimeString+0xe8>
	Time[2]=':';
	
	if(!DS1307Read(0x02,&data))
	{
		//I/O Error
		return 0;
 39a:	80 e0       	ldi	r24, 0x00	; 0
		Time[9]='A';
	}

	return 1;//Success

}
 39c:	0f 90       	pop	r0
 39e:	cf 91       	pop	r28
 3a0:	df 91       	pop	r29
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
 3a6:	08 95       	ret

000003a8 <DS1307Read>:
0= Failure
1= Success
***************************************************/

uint8_t DS1307Read(uint8_t address,uint8_t *data)
{
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	18 2f       	mov	r17, r24
 3b0:	eb 01       	movw	r28, r22
	uint8_t res;	//result
	
	//Start
	I2CStart();
 3b2:	0e 94 2f 02 	call	0x45e	; 0x45e <I2CStart>
	
	//SLA+W (for dummy write to set register pointer)
	res=I2CWriteByte(0b11010000);	//DS1307 address + W
 3b6:	80 ed       	ldi	r24, 0xD0	; 208
 3b8:	0e 94 3b 02 	call	0x476	; 0x476 <I2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
 3bc:	88 23       	and	r24, r24
 3be:	b1 f0       	breq	.+44     	; 0x3ec <DS1307Read+0x44>
	
	//Now send the address of required register
	res=I2CWriteByte(address);
 3c0:	81 2f       	mov	r24, r17
 3c2:	0e 94 3b 02 	call	0x476	; 0x476 <I2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
 3c6:	88 23       	and	r24, r24
 3c8:	99 f0       	breq	.+38     	; 0x3f0 <DS1307Read+0x48>
	
	//Repeat Start
	I2CStart();
 3ca:	0e 94 2f 02 	call	0x45e	; 0x45e <I2CStart>
	
	//SLA + R
	res=I2CWriteByte(0b11010001);	//DS1307 Address + R
 3ce:	81 ed       	ldi	r24, 0xD1	; 209
 3d0:	0e 94 3b 02 	call	0x476	; 0x476 <I2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
 3d4:	88 23       	and	r24, r24
 3d6:	71 f0       	breq	.+28     	; 0x3f4 <DS1307Read+0x4c>
	
	//Now read the value with NACK
	res=I2CReadByte(data,0);
 3d8:	ce 01       	movw	r24, r28
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	0e 94 54 02 	call	0x4a8	; 0x4a8 <I2CReadByte>
	
	//Error
	if(!res)	return FALSE;
 3e0:	88 23       	and	r24, r24
 3e2:	51 f0       	breq	.+20     	; 0x3f8 <DS1307Read+0x50>
	
	//STOP
	I2CStop();
 3e4:	0e 94 35 02 	call	0x46a	; 0x46a <I2CStop>
	
	return TRUE;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	07 c0       	rjmp	.+14     	; 0x3fa <DS1307Read+0x52>
	
	//SLA+W (for dummy write to set register pointer)
	res=I2CWriteByte(0b11010000);	//DS1307 address + W
	
	//Error
	if(!res)	return FALSE;
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	05 c0       	rjmp	.+10     	; 0x3fa <DS1307Read+0x52>
	
	//Now send the address of required register
	res=I2CWriteByte(address);
	
	//Error
	if(!res)	return FALSE;
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	03 c0       	rjmp	.+6      	; 0x3fa <DS1307Read+0x52>
	
	//SLA + R
	res=I2CWriteByte(0b11010001);	//DS1307 Address + R
	
	//Error
	if(!res)	return FALSE;
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	01 c0       	rjmp	.+2      	; 0x3fa <DS1307Read+0x52>
	
	//Now read the value with NACK
	res=I2CReadByte(data,0);
	
	//Error
	if(!res)	return FALSE;
 3f8:	80 e0       	ldi	r24, 0x00	; 0
	
	//STOP
	I2CStop();
	
	return TRUE;
}
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	1f 91       	pop	r17
 400:	08 95       	ret

00000402 <DS1307Write>:
0= Failure
1= Success
***************************************************/

uint8_t DS1307Write(uint8_t address,uint8_t data)
{
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	18 2f       	mov	r17, r24
 408:	06 2f       	mov	r16, r22
	uint8_t res;	//result
	
	//Start
	I2CStart();
 40a:	0e 94 2f 02 	call	0x45e	; 0x45e <I2CStart>
	
	//SLA+W
	res=I2CWriteByte(0b11010000);	//DS1307 address + W
 40e:	80 ed       	ldi	r24, 0xD0	; 208
 410:	0e 94 3b 02 	call	0x476	; 0x476 <I2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
 414:	88 23       	and	r24, r24
 416:	71 f0       	breq	.+28     	; 0x434 <DS1307Write+0x32>
	
	//Now send the address of required register
	res=I2CWriteByte(address);
 418:	81 2f       	mov	r24, r17
 41a:	0e 94 3b 02 	call	0x476	; 0x476 <I2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
 41e:	88 23       	and	r24, r24
 420:	59 f0       	breq	.+22     	; 0x438 <DS1307Write+0x36>
	
	//Now write the value
	res=I2CWriteByte(data);
 422:	80 2f       	mov	r24, r16
 424:	0e 94 3b 02 	call	0x476	; 0x476 <I2CWriteByte>
	
	//Error
	if(!res)	return FALSE;
 428:	88 23       	and	r24, r24
 42a:	41 f0       	breq	.+16     	; 0x43c <DS1307Write+0x3a>
	
	//STOP
	I2CStop();
 42c:	0e 94 35 02 	call	0x46a	; 0x46a <I2CStop>
	
	return TRUE;
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	05 c0       	rjmp	.+10     	; 0x43e <DS1307Write+0x3c>
	
	//SLA+W
	res=I2CWriteByte(0b11010000);	//DS1307 address + W
	
	//Error
	if(!res)	return FALSE;
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	03 c0       	rjmp	.+6      	; 0x43e <DS1307Write+0x3c>
	
	//Now send the address of required register
	res=I2CWriteByte(address);
	
	//Error
	if(!res)	return FALSE;
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	01 c0       	rjmp	.+2      	; 0x43e <DS1307Write+0x3c>
	
	//Now write the value
	res=I2CWriteByte(data);
	
	//Error
	if(!res)	return FALSE;
 43c:	80 e0       	ldi	r24, 0x00	; 0
	
	//STOP
	I2CStop();
	
	return TRUE;
}
 43e:	1f 91       	pop	r17
 440:	0f 91       	pop	r16
 442:	08 95       	ret

00000444 <I2CInit>:


void I2CInit()
{
	//Set up TWI Module
	TWBR = 2;
 444:	82 e0       	ldi	r24, 0x02	; 2
 446:	80 b9       	out	0x00, r24	; 0
	TWSR |=((1<<TWPS1)|(1<<TWPS0));
 448:	81 b1       	in	r24, 0x01	; 1
 44a:	83 60       	ori	r24, 0x03	; 3
 44c:	81 b9       	out	0x01, r24	; 1

	//Enable the TWI Module
	TWCR|=(1<<TWEN);
 44e:	86 b7       	in	r24, 0x36	; 54
 450:	84 60       	ori	r24, 0x04	; 4
 452:	86 bf       	out	0x36, r24	; 54


}
 454:	08 95       	ret

00000456 <I2CClose>:

void I2CClose()
{
	//Disable the module
	TWCR&=(~(1<<TWEN));
 456:	86 b7       	in	r24, 0x36	; 54
 458:	8b 7f       	andi	r24, 0xFB	; 251
 45a:	86 bf       	out	0x36, r24	; 54
}
 45c:	08 95       	ret

0000045e <I2CStart>:


void I2CStart()
{
	//Put Start Condition on Bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
 45e:	84 ea       	ldi	r24, 0xA4	; 164
 460:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 462:	06 b6       	in	r0, 0x36	; 54
 464:	07 fe       	sbrs	r0, 7
 466:	fd cf       	rjmp	.-6      	; 0x462 <__stack+0x3>

}
 468:	08 95       	ret

0000046a <I2CStop>:

void I2CStop()
{
	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 46a:	84 e9       	ldi	r24, 0x94	; 148
 46c:	86 bf       	out	0x36, r24	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
 46e:	06 b6       	in	r0, 0x36	; 54
 470:	04 fc       	sbrc	r0, 4
 472:	fd cf       	rjmp	.-6      	; 0x46e <I2CStop+0x4>
	//_delay_loop_2(250);
}
 474:	08 95       	ret

00000476 <I2CWriteByte>:

uint8_t I2CWriteByte(uint8_t data)
{
	
	TWDR=data;	
 476:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWEN)|(1<<TWINT);
 478:	84 e8       	ldi	r24, 0x84	; 132
 47a:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 47c:	06 b6       	in	r0, 0x36	; 54
 47e:	07 fe       	sbrs	r0, 7
 480:	fd cf       	rjmp	.-6      	; 0x47c <I2CWriteByte+0x6>

	//Check Status
	if((TWSR & 0xF8) == 0x18 || (TWSR & 0xF8) == 0x28 || (TWSR & 0xF8) == 0x40)
 482:	81 b1       	in	r24, 0x01	; 1
 484:	88 7f       	andi	r24, 0xF8	; 248
 486:	88 31       	cpi	r24, 0x18	; 24
 488:	59 f0       	breq	.+22     	; 0x4a0 <I2CWriteByte+0x2a>
 48a:	81 b1       	in	r24, 0x01	; 1
 48c:	88 7f       	andi	r24, 0xF8	; 248
 48e:	88 32       	cpi	r24, 0x28	; 40
 490:	49 f0       	breq	.+18     	; 0x4a4 <I2CWriteByte+0x2e>
 492:	91 b1       	in	r25, 0x01	; 1
 494:	98 7f       	andi	r25, 0xF8	; 248
		//or
		//SLA+R Transmitted and ACK received
		//or
		//DATA Transmitted and ACK recived

		return TRUE;
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 34       	cpi	r25, 0x40	; 64
 49a:	29 f0       	breq	.+10     	; 0x4a6 <I2CWriteByte+0x30>
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	08 95       	ret
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	08 95       	ret
 4a4:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return FALSE;	//Error
}
 4a6:	08 95       	ret

000004a8 <I2CReadByte>:

uint8_t I2CReadByte(uint8_t *data,uint8_t ack)
{
	//Set up ACK
	if(ack)
 4a8:	66 23       	and	r22, r22
 4aa:	21 f0       	breq	.+8      	; 0x4b4 <I2CReadByte+0xc>
	{
		//return ACK after reception
		TWCR|=(1<<TWEA);
 4ac:	26 b7       	in	r18, 0x36	; 54
 4ae:	20 64       	ori	r18, 0x40	; 64
 4b0:	26 bf       	out	0x36, r18	; 54
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <I2CReadByte+0x12>
	else
	{
		//return NACK after reception
		//Signals slave to stop giving more data
		//usually used for last byte read.
		TWCR&=(~(1<<TWEA));
 4b4:	26 b7       	in	r18, 0x36	; 54
 4b6:	2f 7b       	andi	r18, 0xBF	; 191
 4b8:	26 bf       	out	0x36, r18	; 54
	}

	//Now enable Reception of data by clearing TWINT
	TWCR|=(1<<TWINT);
 4ba:	26 b7       	in	r18, 0x36	; 54
 4bc:	20 68       	ori	r18, 0x80	; 128
 4be:	26 bf       	out	0x36, r18	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
 4c0:	06 b6       	in	r0, 0x36	; 54
 4c2:	07 fe       	sbrs	r0, 7
 4c4:	fd cf       	rjmp	.-6      	; 0x4c0 <I2CReadByte+0x18>

	//Check status
	if((TWSR & 0xF8) == 0x58 || (TWSR & 0xF8) == 0x50)
 4c6:	21 b1       	in	r18, 0x01	; 1
 4c8:	28 7f       	andi	r18, 0xF8	; 248
 4ca:	28 35       	cpi	r18, 0x58	; 88
 4cc:	21 f0       	breq	.+8      	; 0x4d6 <I2CReadByte+0x2e>
 4ce:	21 b1       	in	r18, 0x01	; 1
 4d0:	28 7f       	andi	r18, 0xF8	; 248
 4d2:	20 35       	cpi	r18, 0x50	; 80
 4d4:	29 f4       	brne	.+10     	; 0x4e0 <I2CReadByte+0x38>
		//	or
		//Data received and NACK returned

		//Read the data

		*data=TWDR;
 4d6:	23 b1       	in	r18, 0x03	; 3
 4d8:	fc 01       	movw	r30, r24
 4da:	20 83       	st	Z, r18
		return TRUE;
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	08 95       	ret
	}
	else
		return FALSE;	//Error
 4e0:	80 e0       	ldi	r24, 0x00	; 0
	
}
 4e2:	08 95       	ret

000004e4 <KeypadInit>:
//Queue
volatile uint8_t KeypadCmdQ[KEYPAD_QMAX];	//Final Command Received (Buffer)
volatile int8_t KeypadQFront=-1,KeypadQEnd=-1;

void KeypadInit()
{
 4e4:	0f 93       	push	r16
 4e6:	1f 93       	push	r17
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	e5 e4       	ldi	r30, 0x45	; 69
 4ee:	f1 e0       	ldi	r31, 0x01	; 1
 4f0:	81 e4       	ldi	r24, 0x41	; 65
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	c5 e5       	ldi	r28, 0x55	; 85
 4f6:	d1 e0       	ldi	r29, 0x01	; 1
 4f8:	09 e5       	ldi	r16, 0x59	; 89
 4fa:	11 e0       	ldi	r17, 0x01	; 1

//Queue
volatile uint8_t KeypadCmdQ[KEYPAD_QMAX];	//Final Command Received (Buffer)
volatile int8_t KeypadQFront=-1,KeypadQEnd=-1;

void KeypadInit()
 4fc:	9f 01       	movw	r18, r30
 4fe:	2c 5f       	subi	r18, 0xFC	; 252
 500:	3f 4f       	sbci	r19, 0xFF	; 255
{
	//Init Key States
	uint8_t i;
	for(i=0;i<4;i++)
	{
		KeyPrevState[i]=RELEASED;
 502:	41 e0       	ldi	r20, 0x01	; 1
		KeyState[i]=RELEASED;

		//Repeat
		KeyRepeatWait[i]=KEY_REPEAT_WAIT;
 504:	6b e4       	ldi	r22, 0x4B	; 75
		KeyRepeatRate[i]=KEY_REPEAT_RATE;
 506:	5a e0       	ldi	r21, 0x0A	; 10
{
	//Init Key States
	uint8_t i;
	for(i=0;i<4;i++)
	{
		KeyPrevState[i]=RELEASED;
 508:	41 93       	st	Z+, r20
		KeyState[i]=RELEASED;
 50a:	dc 01       	movw	r26, r24
 50c:	4d 93       	st	X+, r20
 50e:	cd 01       	movw	r24, r26

		//Repeat
		KeyRepeatWait[i]=KEY_REPEAT_WAIT;
 510:	69 93       	st	Y+, r22
		KeyRepeatRate[i]=KEY_REPEAT_RATE;
 512:	d8 01       	movw	r26, r16
 514:	5d 93       	st	X+, r21
 516:	8d 01       	movw	r16, r26

void KeypadInit()
{
	//Init Key States
	uint8_t i;
	for(i=0;i<4;i++)
 518:	e2 17       	cp	r30, r18
 51a:	f3 07       	cpc	r31, r19
 51c:	a9 f7       	brne	.-22     	; 0x508 <KeypadInit+0x24>
		KeyRepeatWait[i]=KEY_REPEAT_WAIT;
		KeyRepeatRate[i]=KEY_REPEAT_RATE;
	}

	//First make all i/o pins input
	D_LEFT_KEY_DDR&=(~(1<<D_LEFT_KEY_POS));		//LEFT
 51e:	a0 98       	cbi	0x14, 0	; 20
	D_RIGHT_KEY_DDR&=(~(1<<D_RIGHT_KEY_POS));	//RIGHT
 520:	a1 98       	cbi	0x14, 1	; 20
	D_ENTER_KEY_DDR&=(~(1<<D_ENTER_KEY_POS));	//ENTER
 522:	a2 98       	cbi	0x14, 2	; 20
	DEL_KEY_DDR&=(~(1<<DEL_KEY_POS));			//DEL
 524:	a3 98       	cbi	0x14, 3	; 20


	//Now enable internal pullups
	D_LEFT_KEY_PORT|=(1<<D_LEFT_KEY_POS);		//LEFT
 526:	a8 9a       	sbi	0x15, 0	; 21
	D_RIGHT_KEY_PORT|=(1<<D_RIGHT_KEY_POS);		//RIGHT
 528:	a9 9a       	sbi	0x15, 1	; 21
	D_ENTER_KEY_PORT|=(1<<D_ENTER_KEY_POS);		//ENTER
 52a:	aa 9a       	sbi	0x15, 2	; 21
	DEL_KEY_PORT|=(1<<DEL_KEY_POS);			//DEL
 52c:	ab 9a       	sbi	0x15, 3	; 21


	//Init TIMER0 for keypad scanner (Approx 244 fps)
	TCCR0=(1<<CS02);	//Prescaller 256
 52e:	84 e0       	ldi	r24, 0x04	; 4
 530:	83 bf       	out	0x33, r24	; 51
	TIMSK|=(1<<TOIE0);	//Enable overflow interrupt
 532:	89 b7       	in	r24, 0x39	; 57
 534:	81 60       	ori	r24, 0x01	; 1
 536:	89 bf       	out	0x39, r24	; 57

	sei();//Enable interrupts
 538:	78 94       	sei
}
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	1f 91       	pop	r17
 540:	0f 91       	pop	r16
 542:	08 95       	ret

00000544 <GetRawKeyState>:

}

uint8_t GetRawKeyState(uint8_t KeyCode)
{
	if(KeyCode==KEY_LEFT)
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	19 f4       	brne	.+6      	; 0x54e <GetRawKeyState+0xa>
	{
		return ((D_LEFT_KEY_PIN & (1<<D_LEFT_KEY_POS)));
 548:	83 b3       	in	r24, 0x13	; 19
 54a:	81 70       	andi	r24, 0x01	; 1
 54c:	08 95       	ret
	}

	if(KeyCode==KEY_RIGHT)
 54e:	82 30       	cpi	r24, 0x02	; 2
 550:	19 f4       	brne	.+6      	; 0x558 <GetRawKeyState+0x14>
	{
		return ((D_RIGHT_KEY_PIN & (1<<D_RIGHT_KEY_POS)));
 552:	83 b3       	in	r24, 0x13	; 19
 554:	82 70       	andi	r24, 0x02	; 2
 556:	08 95       	ret
	}

	if(KeyCode==KEY_ENTER)
 558:	83 30       	cpi	r24, 0x03	; 3
 55a:	19 f4       	brne	.+6      	; 0x562 <GetRawKeyState+0x1e>
	{
		return ((D_ENTER_KEY_PIN & (1<<D_ENTER_KEY_POS)));
 55c:	83 b3       	in	r24, 0x13	; 19
 55e:	84 70       	andi	r24, 0x04	; 4
 560:	08 95       	ret
	}

	if(KeyCode==KEY_DEL)
 562:	84 30       	cpi	r24, 0x04	; 4
 564:	19 f4       	brne	.+6      	; 0x56c <GetRawKeyState+0x28>
	{
		return ((DEL_KEY_PIN & (1<<DEL_KEY_POS)));
 566:	83 b3       	in	r24, 0x13	; 19
 568:	88 70       	andi	r24, 0x08	; 8
 56a:	08 95       	ret
	}

	return RELEASED;
 56c:	81 e0       	ldi	r24, 0x01	; 1
}
 56e:	08 95       	ret

00000570 <MajorVote>:

uint8_t MajorVote(uint8_t keycode)
{
	if(KeyBuffer[keycode][0]==PRESSED)
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	fc 01       	movw	r30, r24
 574:	ee 0f       	add	r30, r30
 576:	ff 1f       	adc	r31, r31
 578:	e8 0f       	add	r30, r24
 57a:	f9 1f       	adc	r31, r25
 57c:	e7 5b       	subi	r30, 0xB7	; 183
 57e:	fe 4f       	sbci	r31, 0xFE	; 254
 580:	20 81       	ld	r18, Z
 582:	22 23       	and	r18, r18
 584:	c1 f4       	brne	.+48     	; 0x5b6 <MajorVote+0x46>
	{
		if(KeyBuffer[keycode][1]==PRESSED)
 586:	fc 01       	movw	r30, r24
 588:	ee 0f       	add	r30, r30
 58a:	ff 1f       	adc	r31, r31
 58c:	e8 0f       	add	r30, r24
 58e:	f9 1f       	adc	r31, r25
 590:	e7 5b       	subi	r30, 0xB7	; 183
 592:	fe 4f       	sbci	r31, 0xFE	; 254
 594:	21 81       	ldd	r18, Z+1	; 0x01
 596:	22 23       	and	r18, r18
 598:	31 f1       	breq	.+76     	; 0x5e6 <MajorVote+0x76>
		{
			return PRESSED;
		}
		else
		{
			if(KeyBuffer[keycode][2]==PRESSED)
 59a:	fc 01       	movw	r30, r24
 59c:	ee 0f       	add	r30, r30
 59e:	ff 1f       	adc	r31, r31
 5a0:	8e 0f       	add	r24, r30
 5a2:	9f 1f       	adc	r25, r31
 5a4:	fc 01       	movw	r30, r24
 5a6:	e7 5b       	subi	r30, 0xB7	; 183
 5a8:	fe 4f       	sbci	r31, 0xFE	; 254
{
	if(KeyBuffer[keycode][0]==PRESSED)
	{
		if(KeyBuffer[keycode][1]==PRESSED)
		{
			return PRESSED;
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	92 81       	ldd	r25, Z+2	; 0x02
 5ae:	99 23       	and	r25, r25
 5b0:	e9 f4       	brne	.+58     	; 0x5ec <MajorVote+0x7c>
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	08 95       	ret
				return RELEASED;
		}
	}
	else
	{
		if(KeyBuffer[keycode][1]==RELEASED)
 5b6:	fc 01       	movw	r30, r24
 5b8:	ee 0f       	add	r30, r30
 5ba:	ff 1f       	adc	r31, r31
 5bc:	e8 0f       	add	r30, r24
 5be:	f9 1f       	adc	r31, r25
 5c0:	e7 5b       	subi	r30, 0xB7	; 183
 5c2:	fe 4f       	sbci	r31, 0xFE	; 254
 5c4:	21 81       	ldd	r18, Z+1	; 0x01
 5c6:	21 30       	cpi	r18, 0x01	; 1
 5c8:	81 f0       	breq	.+32     	; 0x5ea <MajorVote+0x7a>
		{
			return RELEASED;
		}
		else
		{
			if(KeyBuffer[keycode][2]==PRESSED)
 5ca:	fc 01       	movw	r30, r24
 5cc:	ee 0f       	add	r30, r30
 5ce:	ff 1f       	adc	r31, r31
 5d0:	8e 0f       	add	r24, r30
 5d2:	9f 1f       	adc	r25, r31
 5d4:	fc 01       	movw	r30, r24
 5d6:	e7 5b       	subi	r30, 0xB7	; 183
 5d8:	fe 4f       	sbci	r31, 0xFE	; 254
{
	if(KeyBuffer[keycode][0]==PRESSED)
	{
		if(KeyBuffer[keycode][1]==PRESSED)
		{
			return PRESSED;
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	92 81       	ldd	r25, Z+2	; 0x02
 5de:	99 23       	and	r25, r25
 5e0:	29 f4       	brne	.+10     	; 0x5ec <MajorVote+0x7c>
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	08 95       	ret
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	08 95       	ret
	}
	else
	{
		if(KeyBuffer[keycode][1]==RELEASED)
		{
			return RELEASED;
 5ea:	81 e0       	ldi	r24, 0x01	; 1
				return PRESSED;
			else
				return RELEASED;
		}
	}
}
 5ec:	08 95       	ret

000005ee <__vector_9>:

	sei();//Enable interrupts
}

ISR(TIMER0_OVF_vect)
{
 5ee:	1f 92       	push	r1
 5f0:	0f 92       	push	r0
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	0f 92       	push	r0
 5f6:	11 24       	eor	r1, r1
 5f8:	6f 92       	push	r6
 5fa:	7f 92       	push	r7
 5fc:	8f 92       	push	r8
 5fe:	9f 92       	push	r9
 600:	af 92       	push	r10
 602:	bf 92       	push	r11
 604:	cf 92       	push	r12
 606:	df 92       	push	r13
 608:	ef 92       	push	r14
 60a:	ff 92       	push	r15
 60c:	0f 93       	push	r16
 60e:	1f 93       	push	r17
 610:	2f 93       	push	r18
 612:	3f 93       	push	r19
 614:	4f 93       	push	r20
 616:	5f 93       	push	r21
 618:	6f 93       	push	r22
 61a:	7f 93       	push	r23
 61c:	8f 93       	push	r24
 61e:	9f 93       	push	r25
 620:	af 93       	push	r26
 622:	bf 93       	push	r27
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	ef 93       	push	r30
 62a:	ff 93       	push	r31
 62c:	c0 e0       	ldi	r28, 0x00	; 0
 62e:	d0 e0       	ldi	r29, 0x00	; 0
	static uint8_t n=0;

	//Take 3 raw samples for major voting
	for(uint8_t i=0;i<4;i++)
	{
		KeyBuffer[i][n]=GetRawKeyState(i);
 630:	0f 2e       	mov	r0, r31
 632:	f9 e4       	ldi	r31, 0x49	; 73
 634:	ef 2e       	mov	r14, r31
 636:	f1 e0       	ldi	r31, 0x01	; 1
 638:	ff 2e       	mov	r15, r31
 63a:	f0 2d       	mov	r31, r0
 63c:	00 91 20 01 	lds	r16, 0x0120
 640:	10 e0       	ldi	r17, 0x00	; 0
 642:	8c 2f       	mov	r24, r28
 644:	0e 94 a2 02 	call	0x544	; 0x544 <GetRawKeyState>
 648:	fe 01       	movw	r30, r28
 64a:	ee 0f       	add	r30, r30
 64c:	ff 1f       	adc	r31, r31
 64e:	ec 0f       	add	r30, r28
 650:	fd 1f       	adc	r31, r29
 652:	0e 0f       	add	r16, r30
 654:	1f 1f       	adc	r17, r31
 656:	f7 01       	movw	r30, r14
 658:	e0 0f       	add	r30, r16
 65a:	f1 1f       	adc	r31, r17
 65c:	80 83       	st	Z, r24
 65e:	21 96       	adiw	r28, 0x01	; 1
{
	
	static uint8_t n=0;

	//Take 3 raw samples for major voting
	for(uint8_t i=0;i<4;i++)
 660:	c4 30       	cpi	r28, 0x04	; 4
 662:	d1 05       	cpc	r29, r1
 664:	59 f7       	brne	.-42     	; 0x63c <__vector_9+0x4e>
	{
		KeyBuffer[i][n]=GetRawKeyState(i);
	}

	n++;
 666:	80 91 20 01 	lds	r24, 0x0120
 66a:	8f 5f       	subi	r24, 0xFF	; 255
 66c:	80 93 20 01 	sts	0x0120, r24
	
	//3 samples taken
	if(n==3)
 670:	83 30       	cpi	r24, 0x03	; 3
 672:	09 f0       	breq	.+2      	; 0x676 <__vector_9+0x88>
 674:	c7 c0       	rjmp	.+398    	; 0x804 <__vector_9+0x216>
	{
		//reset counter
		n=0;
 676:	10 92 20 01 	sts	0x0120, r1
 67a:	0f 2e       	mov	r0, r31
 67c:	f5 e4       	ldi	r31, 0x45	; 69
 67e:	af 2e       	mov	r10, r31
 680:	f1 e0       	ldi	r31, 0x01	; 1
 682:	bf 2e       	mov	r11, r31
 684:	f0 2d       	mov	r31, r0
 686:	0f 2e       	mov	r0, r31
 688:	f1 e4       	ldi	r31, 0x41	; 65
 68a:	ef 2e       	mov	r14, r31
 68c:	f1 e0       	ldi	r31, 0x01	; 1
 68e:	ff 2e       	mov	r15, r31
 690:	f0 2d       	mov	r31, r0
 692:	c5 e5       	ldi	r28, 0x55	; 85
 694:	d1 e0       	ldi	r29, 0x01	; 1
 696:	0f 2e       	mov	r0, r31
 698:	f9 e5       	ldi	r31, 0x59	; 89
 69a:	cf 2e       	mov	r12, r31
 69c:	f1 e0       	ldi	r31, 0x01	; 1
 69e:	df 2e       	mov	r13, r31
 6a0:	f0 2d       	mov	r31, r0
		
		
		for(uint8_t i=0;i<4;i++)
 6a2:	00 e0       	ldi	r16, 0x00	; 0

				}
			}
			else
			{
				KeyRepeatWait[i]=KEY_REPEAT_WAIT;
 6a4:	0f 2e       	mov	r0, r31
 6a6:	fb e4       	ldi	r31, 0x4B	; 75
 6a8:	9f 2e       	mov	r9, r31
 6aa:	f0 2d       	mov	r31, r0
					else
					{
						KeyRepeatRate[i]--;
						if(KeyRepeatRate[i]==0)
						{
							KeyRepeatRate[i]=KEY_REPEAT_RATE;
 6ac:	0f 2e       	mov	r0, r31
 6ae:	fa e0       	ldi	r31, 0x0A	; 10
 6b0:	8f 2e       	mov	r8, r31
 6b2:	f0 2d       	mov	r31, r0
							if(KeypadQEnd==(KEYPAD_QMAX-1))
								KeypadQEnd=0;
							else
								KeypadQEnd++;

							KeypadCmdQ[KeypadQEnd]=i;
 6b4:	0f 2e       	mov	r0, r31
 6b6:	f1 e2       	ldi	r31, 0x21	; 33
 6b8:	6f 2e       	mov	r6, r31
 6ba:	f1 e0       	ldi	r31, 0x01	; 1
 6bc:	7f 2e       	mov	r7, r31
 6be:	f0 2d       	mov	r31, r0
		n=0;
		
		
		for(uint8_t i=0;i<4;i++)
		{
			KeyPrevState[i]=KeyState[i];
 6c0:	f7 01       	movw	r30, r14
 6c2:	10 81       	ld	r17, Z
 6c4:	f5 01       	movw	r30, r10
 6c6:	11 93       	st	Z+, r17
 6c8:	5f 01       	movw	r10, r30
			KeyState[i]=MajorVote(i);
 6ca:	80 2f       	mov	r24, r16
 6cc:	0e 94 b8 02 	call	0x570	; 0x570 <MajorVote>
 6d0:	f7 01       	movw	r30, r14
 6d2:	81 93       	st	Z+, r24
 6d4:	7f 01       	movw	r14, r30

			if(KeyState[i]==PRESSED)
 6d6:	88 23       	and	r24, r24
 6d8:	09 f0       	breq	.+2      	; 0x6dc <__vector_9+0xee>
 6da:	8b c0       	rjmp	.+278    	; 0x7f2 <__vector_9+0x204>
			{
				if(KeyPrevState[i]==RELEASED)
 6dc:	11 30       	cpi	r17, 0x01	; 1
 6de:	f1 f5       	brne	.+124    	; 0x75c <__vector_9+0x16e>
				{
					//Now We Have Got a key press
					//Add it to Queue
				
					//Step1:Check of Q full
					if((KeypadQEnd==(KEYPAD_QMAX-1) && KeypadQFront==0)||((KeypadQEnd+1)==KeypadQFront))
 6e0:	80 91 62 00 	lds	r24, 0x0062
 6e4:	8f 31       	cpi	r24, 0x1F	; 31
 6e6:	21 f4       	brne	.+8      	; 0x6f0 <__vector_9+0x102>
 6e8:	80 91 61 00 	lds	r24, 0x0061
 6ec:	88 23       	and	r24, r24
 6ee:	79 f0       	breq	.+30     	; 0x70e <__vector_9+0x120>
 6f0:	20 91 62 00 	lds	r18, 0x0062
 6f4:	80 91 61 00 	lds	r24, 0x0061
 6f8:	33 27       	eor	r19, r19
 6fa:	27 fd       	sbrc	r18, 7
 6fc:	30 95       	com	r19
 6fe:	2f 5f       	subi	r18, 0xFF	; 255
 700:	3f 4f       	sbci	r19, 0xFF	; 255
 702:	99 27       	eor	r25, r25
 704:	87 fd       	sbrc	r24, 7
 706:	90 95       	com	r25
 708:	28 17       	cp	r18, r24
 70a:	39 07       	cpc	r19, r25
 70c:	59 f4       	brne	.+22     	; 0x724 <__vector_9+0x136>
					{
						KeypadQFront++;
 70e:	80 91 61 00 	lds	r24, 0x0061
 712:	8f 5f       	subi	r24, 0xFF	; 255
 714:	80 93 61 00 	sts	0x0061, r24
						if(KeypadQFront==(KEYPAD_QMAX)) 
 718:	80 91 61 00 	lds	r24, 0x0061
 71c:	80 32       	cpi	r24, 0x20	; 32
 71e:	11 f4       	brne	.+4      	; 0x724 <__vector_9+0x136>
							KeypadQFront=0;
 720:	10 92 61 00 	sts	0x0061, r1
					}

					if(KeypadQEnd==(KEYPAD_QMAX-1))
 724:	80 91 62 00 	lds	r24, 0x0062
 728:	8f 31       	cpi	r24, 0x1F	; 31
 72a:	19 f4       	brne	.+6      	; 0x732 <__vector_9+0x144>
						KeypadQEnd=0;
 72c:	10 92 62 00 	sts	0x0062, r1
 730:	05 c0       	rjmp	.+10     	; 0x73c <__vector_9+0x14e>
					else
						KeypadQEnd++;
 732:	80 91 62 00 	lds	r24, 0x0062
 736:	8f 5f       	subi	r24, 0xFF	; 255
 738:	80 93 62 00 	sts	0x0062, r24

					KeypadCmdQ[KeypadQEnd]=i;
 73c:	e0 91 62 00 	lds	r30, 0x0062
 740:	ff 27       	eor	r31, r31
 742:	e7 fd       	sbrc	r30, 7
 744:	f0 95       	com	r31
 746:	e6 0d       	add	r30, r6
 748:	f7 1d       	adc	r31, r7
 74a:	00 83       	st	Z, r16
					if(KeypadQFront==-1) KeypadQFront=0;
 74c:	80 91 61 00 	lds	r24, 0x0061
 750:	8f 3f       	cpi	r24, 0xFF	; 255
 752:	09 f0       	breq	.+2      	; 0x756 <__vector_9+0x168>
 754:	4f c0       	rjmp	.+158    	; 0x7f4 <__vector_9+0x206>
 756:	10 92 61 00 	sts	0x0061, r1
 75a:	4c c0       	rjmp	.+152    	; 0x7f4 <__vector_9+0x206>
				}
				else
				{
					if(KeyRepeatWait[i]!=0) KeyRepeatWait[i]--;
 75c:	88 81       	ld	r24, Y
 75e:	88 23       	and	r24, r24
 760:	19 f0       	breq	.+6      	; 0x768 <__vector_9+0x17a>
 762:	81 50       	subi	r24, 0x01	; 1
 764:	88 83       	st	Y, r24
 766:	46 c0       	rjmp	.+140    	; 0x7f4 <__vector_9+0x206>
					else
					{
						KeyRepeatRate[i]--;
 768:	f6 01       	movw	r30, r12
 76a:	80 81       	ld	r24, Z
 76c:	81 50       	subi	r24, 0x01	; 1
 76e:	80 83       	st	Z, r24
						if(KeyRepeatRate[i]==0)
 770:	88 23       	and	r24, r24
 772:	09 f0       	breq	.+2      	; 0x776 <__vector_9+0x188>
 774:	3f c0       	rjmp	.+126    	; 0x7f4 <__vector_9+0x206>
						{
							KeyRepeatRate[i]=KEY_REPEAT_RATE;
 776:	80 82       	st	Z, r8

							//Now We Have Got a keypress
							//Add it to Queue
				
							//Step1:Check of Q full
							if((KeypadQEnd==(KEYPAD_QMAX-1) && KeypadQFront==0)||((KeypadQEnd+1)==KeypadQFront))
 778:	80 91 62 00 	lds	r24, 0x0062
 77c:	8f 31       	cpi	r24, 0x1F	; 31
 77e:	21 f4       	brne	.+8      	; 0x788 <__vector_9+0x19a>
 780:	80 91 61 00 	lds	r24, 0x0061
 784:	88 23       	and	r24, r24
 786:	79 f0       	breq	.+30     	; 0x7a6 <__vector_9+0x1b8>
 788:	20 91 62 00 	lds	r18, 0x0062
 78c:	80 91 61 00 	lds	r24, 0x0061
 790:	33 27       	eor	r19, r19
 792:	27 fd       	sbrc	r18, 7
 794:	30 95       	com	r19
 796:	2f 5f       	subi	r18, 0xFF	; 255
 798:	3f 4f       	sbci	r19, 0xFF	; 255
 79a:	99 27       	eor	r25, r25
 79c:	87 fd       	sbrc	r24, 7
 79e:	90 95       	com	r25
 7a0:	28 17       	cp	r18, r24
 7a2:	39 07       	cpc	r19, r25
 7a4:	59 f4       	brne	.+22     	; 0x7bc <__vector_9+0x1ce>
							{
								KeypadQFront++;
 7a6:	80 91 61 00 	lds	r24, 0x0061
 7aa:	8f 5f       	subi	r24, 0xFF	; 255
 7ac:	80 93 61 00 	sts	0x0061, r24
								if(KeypadQFront==(KEYPAD_QMAX)) 
 7b0:	80 91 61 00 	lds	r24, 0x0061
 7b4:	80 32       	cpi	r24, 0x20	; 32
 7b6:	11 f4       	brne	.+4      	; 0x7bc <__vector_9+0x1ce>
									KeypadQFront=0;
 7b8:	10 92 61 00 	sts	0x0061, r1
							}

							if(KeypadQEnd==(KEYPAD_QMAX-1))
 7bc:	80 91 62 00 	lds	r24, 0x0062
 7c0:	8f 31       	cpi	r24, 0x1F	; 31
 7c2:	19 f4       	brne	.+6      	; 0x7ca <__vector_9+0x1dc>
								KeypadQEnd=0;
 7c4:	10 92 62 00 	sts	0x0062, r1
 7c8:	05 c0       	rjmp	.+10     	; 0x7d4 <__vector_9+0x1e6>
							else
								KeypadQEnd++;
 7ca:	80 91 62 00 	lds	r24, 0x0062
 7ce:	8f 5f       	subi	r24, 0xFF	; 255
 7d0:	80 93 62 00 	sts	0x0062, r24

							KeypadCmdQ[KeypadQEnd]=i;
 7d4:	e0 91 62 00 	lds	r30, 0x0062
 7d8:	ff 27       	eor	r31, r31
 7da:	e7 fd       	sbrc	r30, 7
 7dc:	f0 95       	com	r31
 7de:	e6 0d       	add	r30, r6
 7e0:	f7 1d       	adc	r31, r7
 7e2:	00 83       	st	Z, r16
							if(KeypadQFront==-1) KeypadQFront=0;
 7e4:	80 91 61 00 	lds	r24, 0x0061
 7e8:	8f 3f       	cpi	r24, 0xFF	; 255
 7ea:	21 f4       	brne	.+8      	; 0x7f4 <__vector_9+0x206>
 7ec:	10 92 61 00 	sts	0x0061, r1
 7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <__vector_9+0x206>

				}
			}
			else
			{
				KeyRepeatWait[i]=KEY_REPEAT_WAIT;
 7f2:	98 82       	st	Y, r9
	{
		//reset counter
		n=0;
		
		
		for(uint8_t i=0;i<4;i++)
 7f4:	0f 5f       	subi	r16, 0xFF	; 255
 7f6:	21 96       	adiw	r28, 0x01	; 1
 7f8:	08 94       	sec
 7fa:	c1 1c       	adc	r12, r1
 7fc:	d1 1c       	adc	r13, r1
 7fe:	04 30       	cpi	r16, 0x04	; 4
 800:	09 f0       	breq	.+2      	; 0x804 <__vector_9+0x216>
 802:	5e cf       	rjmp	.-324    	; 0x6c0 <__vector_9+0xd2>
				KeyRepeatWait[i]=KEY_REPEAT_WAIT;
			}
		}
	}

}
 804:	ff 91       	pop	r31
 806:	ef 91       	pop	r30
 808:	df 91       	pop	r29
 80a:	cf 91       	pop	r28
 80c:	bf 91       	pop	r27
 80e:	af 91       	pop	r26
 810:	9f 91       	pop	r25
 812:	8f 91       	pop	r24
 814:	7f 91       	pop	r23
 816:	6f 91       	pop	r22
 818:	5f 91       	pop	r21
 81a:	4f 91       	pop	r20
 81c:	3f 91       	pop	r19
 81e:	2f 91       	pop	r18
 820:	1f 91       	pop	r17
 822:	0f 91       	pop	r16
 824:	ff 90       	pop	r15
 826:	ef 90       	pop	r14
 828:	df 90       	pop	r13
 82a:	cf 90       	pop	r12
 82c:	bf 90       	pop	r11
 82e:	af 90       	pop	r10
 830:	9f 90       	pop	r9
 832:	8f 90       	pop	r8
 834:	7f 90       	pop	r7
 836:	6f 90       	pop	r6
 838:	0f 90       	pop	r0
 83a:	0f be       	out	0x3f, r0	; 63
 83c:	0f 90       	pop	r0
 83e:	1f 90       	pop	r1
 840:	18 95       	reti

00000842 <GetKeypadCmd>:

uint8_t GetKeypadCmd(char wait)
{
	unsigned char cmd;

	if(wait)
 842:	88 23       	and	r24, r24
 844:	29 f0       	breq	.+10     	; 0x850 <GetKeypadCmd+0xe>
		while(KeypadQFront==-1);
 846:	80 91 61 00 	lds	r24, 0x0061
 84a:	8f 3f       	cpi	r24, 0xFF	; 255
 84c:	e1 f3       	breq	.-8      	; 0x846 <GetKeypadCmd+0x4>
 84e:	04 c0       	rjmp	.+8      	; 0x858 <GetKeypadCmd+0x16>
	else
		if(KeypadQFront==-1) return (KEY_NONE);
 850:	80 91 61 00 	lds	r24, 0x0061
 854:	8f 3f       	cpi	r24, 0xFF	; 255
 856:	19 f1       	breq	.+70     	; 0x89e <GetKeypadCmd+0x5c>

	cmd=KeypadCmdQ[KeypadQFront];
 858:	e0 91 61 00 	lds	r30, 0x0061
 85c:	ff 27       	eor	r31, r31
 85e:	e7 fd       	sbrc	r30, 7
 860:	f0 95       	com	r31
 862:	ef 5d       	subi	r30, 0xDF	; 223
 864:	fe 4f       	sbci	r31, 0xFE	; 254
 866:	80 81       	ld	r24, Z

	if(KeypadQFront==KeypadQEnd) 
 868:	20 91 61 00 	lds	r18, 0x0061
 86c:	90 91 62 00 	lds	r25, 0x0062
 870:	29 17       	cp	r18, r25
 872:	41 f4       	brne	.+16     	; 0x884 <GetKeypadCmd+0x42>
		KeypadQFront=KeypadQEnd=-1;
 874:	9f ef       	ldi	r25, 0xFF	; 255
 876:	90 93 62 00 	sts	0x0062, r25
 87a:	90 91 62 00 	lds	r25, 0x0062
 87e:	90 93 61 00 	sts	0x0061, r25
 882:	08 95       	ret
	else
	{
		if(KeypadQFront==(KEYPAD_QMAX-1))
 884:	90 91 61 00 	lds	r25, 0x0061
 888:	9f 31       	cpi	r25, 0x1F	; 31
 88a:	19 f4       	brne	.+6      	; 0x892 <GetKeypadCmd+0x50>
			KeypadQFront=0;
 88c:	10 92 61 00 	sts	0x0061, r1
 890:	08 95       	ret
		else
			KeypadQFront++;
 892:	90 91 61 00 	lds	r25, 0x0061
 896:	9f 5f       	subi	r25, 0xFF	; 255
 898:	90 93 61 00 	sts	0x0061, r25
 89c:	08 95       	ret
	unsigned char cmd;

	if(wait)
		while(KeypadQFront==-1);
	else
		if(KeypadQFront==-1) return (KEY_NONE);
 89e:	83 e6       	ldi	r24, 0x63	; 99
		else
			KeypadQFront++;
	}

	return cmd;
}
 8a0:	08 95       	ret

000008a2 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
 8a2:	81 b3       	in	r24, 0x11	; 17
 8a4:	87 78       	andi	r24, 0x87	; 135
 8a6:	81 bb       	out	0x11, r24	; 17

	//change LCD mode
	SET_RW();		//Read mode
 8a8:	c0 9a       	sbi	0x18, 0	; 24
	CLEAR_RS();		//Read status
 8aa:	c2 98       	cbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8ac:	00 00       	nop

	
	do
	{

		SET_E();
 8ae:	97 9a       	sbi	0x12, 7	; 18
 8b0:	00 00       	nop

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
 8b2:	80 b3       	in	r24, 0x10	; 16
 8b4:	86 95       	lsr	r24
 8b6:	86 95       	lsr	r24
 8b8:	86 95       	lsr	r24
		status=status<<4;
 8ba:	82 95       	swap	r24
 8bc:	80 7f       	andi	r24, 0xF0	; 240
 8be:	00 00       	nop

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 8c0:	97 98       	cbi	0x12, 7	; 18
 8c2:	00 00       	nop
		_delay_us(1);	//tEL

		SET_E();
 8c4:	97 9a       	sbi	0x12, 7	; 18
 8c6:	00 00       	nop
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
 8c8:	90 b3       	in	r25, 0x10	; 16
 8ca:	00 00       	nop
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 8cc:	97 98       	cbi	0x12, 7	; 18
 8ce:	00 00       	nop
		_delay_us(1);	//tEL
	}while(busy);
 8d0:	88 23       	and	r24, r24
 8d2:	6c f3       	brlt	.-38     	; 0x8ae <LCDBusyLoop+0xc>

	CLEAR_RW();		//write mode
 8d4:	c0 98       	cbi	0x18, 0	; 24
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 8d6:	81 b3       	in	r24, 0x11	; 17
 8d8:	88 67       	ori	r24, 0x78	; 120
 8da:	81 bb       	out	0x11, r24	; 17

}
 8dc:	08 95       	ret

000008de <LCDByte>:
	//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS COMPLETED PROCESSING THE COMMAND

	uint8_t hn,ln;			//Nibbles
	uint8_t temp;

	hn=c>>4;
 8de:	28 2f       	mov	r18, r24
 8e0:	22 95       	swap	r18
 8e2:	2f 70       	andi	r18, 0x0F	; 15
	ln=(c & 0x0F);
 8e4:	8f 70       	andi	r24, 0x0F	; 15

	if(isdata==0)
 8e6:	66 23       	and	r22, r22
 8e8:	11 f4       	brne	.+4      	; 0x8ee <LCDByte+0x10>
		CLEAR_RS();
 8ea:	c2 98       	cbi	0x18, 2	; 24
 8ec:	01 c0       	rjmp	.+2      	; 0x8f0 <LCDByte+0x12>
	else
		SET_RS();
 8ee:	c2 9a       	sbi	0x18, 2	; 24
 8f0:	00 00       	nop

	_delay_us(0.500);		//tAS

	SET_E();
 8f2:	97 9a       	sbi	0x12, 7	; 18

	//Send high nibble

	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 8f4:	92 b3       	in	r25, 0x12	; 18
 8f6:	22 0f       	add	r18, r18
 8f8:	22 0f       	add	r18, r18
 8fa:	22 0f       	add	r18, r18
 8fc:	97 78       	andi	r25, 0x87	; 135
 8fe:	92 2b       	or	r25, r18
	LCD_DATA_PORT=temp;
 900:	92 bb       	out	0x12, r25	; 18
 902:	00 00       	nop

	_delay_us(1);			//tEH

	//Now data lines are stable pull E low for transmission

	CLEAR_E();
 904:	97 98       	cbi	0x12, 7	; 18
 906:	00 00       	nop

	_delay_us(1);

	//Send the lower nibble
	SET_E();
 908:	97 9a       	sbi	0x12, 7	; 18

	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 90a:	92 b3       	in	r25, 0x12	; 18
 90c:	88 0f       	add	r24, r24
 90e:	88 0f       	add	r24, r24
 910:	88 0f       	add	r24, r24
 912:	97 78       	andi	r25, 0x87	; 135
 914:	89 2b       	or	r24, r25

	LCD_DATA_PORT=temp;
 916:	82 bb       	out	0x12, r24	; 18
 918:	00 00       	nop

	_delay_us(1);			//tEH

	//SEND

	CLEAR_E();
 91a:	97 98       	cbi	0x12, 7	; 18
 91c:	00 00       	nop

	_delay_us(1);			//tEL

	LCDBusyLoop();
 91e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <LCDBusyLoop>
}
 922:	08 95       	ret

00000924 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 924:	0f 93       	push	r16
 926:	1f 93       	push	r17
 928:	cf 93       	push	r28
 92a:	df 93       	push	r29
 92c:	08 2f       	mov	r16, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 92e:	87 ea       	ldi	r24, 0xA7	; 167
 930:	91 e6       	ldi	r25, 0x61	; 97
 932:	01 97       	sbiw	r24, 0x01	; 1
 934:	f1 f7       	brne	.-4      	; 0x932 <LCDInit+0xe>
 936:	00 c0       	rjmp	.+0      	; 0x938 <LCDInit+0x14>
 938:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(100);
	
	//Clear Ports
	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 93a:	82 b3       	in	r24, 0x12	; 18
 93c:	87 78       	andi	r24, 0x87	; 135
 93e:	82 bb       	out	0x12, r24	; 18
	
	CLEAR_E();
 940:	97 98       	cbi	0x12, 7	; 18
	CLEAR_RW();
 942:	c0 98       	cbi	0x18, 0	; 24
	CLEAR_RS();
 944:	c2 98       	cbi	0x18, 2	; 24
	
	//Set IO Ports direction
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);	//data line direction
 946:	81 b3       	in	r24, 0x11	; 17
 948:	88 67       	ori	r24, 0x78	; 120
 94a:	81 bb       	out	0x11, r24	; 17
	LCD_E_DDR|=(1<<LCD_E_POS);			//E line line direction
 94c:	8f 9a       	sbi	0x11, 7	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);		//RS line direction
 94e:	ba 9a       	sbi	0x17, 2	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);		//RW line direction
 950:	b8 9a       	sbi	0x17, 0	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 952:	00 00       	nop
	//Reset sequence END
	
	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 954:	97 9a       	sbi	0x12, 7	; 18
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 956:	94 9a       	sbi	0x12, 4	; 18
 958:	00 00       	nop
	_delay_us(1);
	CLEAR_E();
 95a:	97 98       	cbi	0x12, 7	; 18
 95c:	00 00       	nop
 95e:	94 e6       	ldi	r25, 0x64	; 100
 960:	9a 95       	dec	r25
 962:	f1 f7       	brne	.-4      	; 0x960 <LCDInit+0x3c>
	//LCDBusyLoop();                                    //[B] Forgot this delay
	_delay_us(300);

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 964:	88 e2       	ldi	r24, 0x28	; 40
 966:	60 e0       	ldi	r22, 0x00	; 0
 968:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
	LCDCmd(0b00001000|style);	//Display Off
 96c:	80 2f       	mov	r24, r16
 96e:	88 60       	ori	r24, 0x08	; 8
 970:	60 e0       	ldi	r22, 0x00	; 0
 972:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
	LCDCmd(0b00001100|style);	//Display On
 976:	80 2f       	mov	r24, r16
 978:	8c 60       	ori	r24, 0x0C	; 12
 97a:	60 e0       	ldi	r22, 0x00	; 0
 97c:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 980:	80 e4       	ldi	r24, 0x40	; 64
 982:	60 e0       	ldi	r22, 0x00	; 0
 984:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
 988:	c3 e6       	ldi	r28, 0x63	; 99
 98a:	d0 e0       	ldi	r29, 0x00	; 0
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
 98c:	03 ea       	ldi	r16, 0xA3	; 163
 98e:	10 e0       	ldi	r17, 0x00	; 0
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 990:	89 91       	ld	r24, Y+
 992:	61 e0       	ldi	r22, 0x01	; 1
 994:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 998:	c0 17       	cp	r28, r16
 99a:	d1 07       	cpc	r29, r17
 99c:	c9 f7       	brne	.-14     	; 0x990 <LCDInit+0x6c>
		LCDData(__cgram[__i]);
	
	LCDClear();
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	60 e0       	ldi	r22, 0x00	; 0
 9a2:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>

}
 9a6:	df 91       	pop	r29
 9a8:	cf 91       	pop	r28
 9aa:	1f 91       	pop	r17
 9ac:	0f 91       	pop	r16
 9ae:	08 95       	ret

000009b0 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 9b0:	cf 93       	push	r28
 9b2:	df 93       	push	r29
 9b4:	ec 01       	movw	r28, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 9b6:	88 81       	ld	r24, Y
 9b8:	88 23       	and	r24, r24
 9ba:	d9 f0       	breq	.+54     	; 0x9f2 <LCDWriteString+0x42>
 {
 	//Custom Char Support
	if(*msg=='%')
 9bc:	85 32       	cpi	r24, 0x25	; 37
 9be:	91 f4       	brne	.+36     	; 0x9e4 <LCDWriteString+0x34>
	{
		msg++;
 9c0:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
 9c2:	88 81       	ld	r24, Y
 9c4:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 9c6:	88 30       	cpi	r24, 0x08	; 8
 9c8:	20 f4       	brcc	.+8      	; 0x9d2 <LCDWriteString+0x22>
		{
			LCDData(cc);
 9ca:	61 e0       	ldi	r22, 0x01	; 1
 9cc:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
 9d0:	0c c0       	rjmp	.+24     	; 0x9ea <LCDWriteString+0x3a>
		}
		else
		{
			LCDData('%');
 9d2:	85 e2       	ldi	r24, 0x25	; 37
 9d4:	61 e0       	ldi	r22, 0x01	; 1
 9d6:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
			LCDData(*msg);
 9da:	88 81       	ld	r24, Y
 9dc:	61 e0       	ldi	r22, 0x01	; 1
 9de:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
 9e2:	03 c0       	rjmp	.+6      	; 0x9ea <LCDWriteString+0x3a>
		}
	}
	else
	{
		LCDData(*msg);
 9e4:	61 e0       	ldi	r22, 0x01	; 1
 9e6:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
	}
	msg++;
 9ea:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 9ec:	88 81       	ld	r24, Y
 9ee:	88 23       	and	r24, r24
 9f0:	29 f7       	brne	.-54     	; 0x9bc <LCDWriteString+0xc>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 9f2:	df 91       	pop	r29
 9f4:	cf 91       	pop	r28
 9f6:	08 95       	ret

000009f8 <LCDWriteFString>:

void LCDWriteFString(const char *msg)
{
 9f8:	1f 93       	push	r17
 9fa:	cf 93       	push	r28
 9fc:	df 93       	push	r29
 9fe:	ec 01       	movw	r28, r24
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
	
 char ch=pgm_read_byte(msg);
 a00:	fc 01       	movw	r30, r24
 a02:	84 91       	lpm	r24, Z+
 while(ch!='\0')
 a04:	88 23       	and	r24, r24
 a06:	f1 f0       	breq	.+60     	; 0xa44 <LCDWriteFString+0x4c>
 {
 	//Custom Char Support
	if(ch=='%')
 a08:	85 32       	cpi	r24, 0x25	; 37
 a0a:	a1 f4       	brne	.+40     	; 0xa34 <LCDWriteFString+0x3c>
	{
		msg++;
 a0c:	21 96       	adiw	r28, 0x01	; 1
		
		ch=pgm_read_byte(msg);
 a0e:	fe 01       	movw	r30, r28
 a10:	14 91       	lpm	r17, Z+
		
		int8_t cc=ch-'0';
 a12:	81 2f       	mov	r24, r17
 a14:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 a16:	88 30       	cpi	r24, 0x08	; 8
 a18:	20 f4       	brcc	.+8      	; 0xa22 <LCDWriteFString+0x2a>
		{
			LCDData(cc);
 a1a:	61 e0       	ldi	r22, 0x01	; 1
 a1c:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
 a20:	0c c0       	rjmp	.+24     	; 0xa3a <LCDWriteFString+0x42>
		}
		else
		{
			LCDData('%');
 a22:	85 e2       	ldi	r24, 0x25	; 37
 a24:	61 e0       	ldi	r22, 0x01	; 1
 a26:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
			LCDData(ch);
 a2a:	81 2f       	mov	r24, r17
 a2c:	61 e0       	ldi	r22, 0x01	; 1
 a2e:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
 a32:	03 c0       	rjmp	.+6      	; 0xa3a <LCDWriteFString+0x42>
		}
	}
	else
	{
		LCDData(ch);
 a34:	61 e0       	ldi	r22, 0x01	; 1
 a36:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
	}
	msg++;
 a3a:	21 96       	adiw	r28, 0x01	; 1
	ch=pgm_read_byte(msg);
 a3c:	fe 01       	movw	r30, r28
 a3e:	84 91       	lpm	r24, Z+


	*****************************************************************/
	
 char ch=pgm_read_byte(msg);
 while(ch!='\0')
 a40:	88 23       	and	r24, r24
 a42:	11 f7       	brne	.-60     	; 0xa08 <LCDWriteFString+0x10>
		LCDData(ch);
	}
	msg++;
	ch=pgm_read_byte(msg);
 }
}
 a44:	df 91       	pop	r29
 a46:	cf 91       	pop	r28
 a48:	1f 91       	pop	r17
 a4a:	08 95       	ret

00000a4c <LCDWriteInt>:

void LCDWriteInt(int val,int8_t field_length)
{
 a4c:	ef 92       	push	r14
 a4e:	ff 92       	push	r15
 a50:	0f 93       	push	r16
 a52:	1f 93       	push	r17
 a54:	df 93       	push	r29
 a56:	cf 93       	push	r28
 a58:	00 d0       	rcall	.+0      	; 0xa5a <LCDWriteInt+0xe>
 a5a:	00 d0       	rcall	.+0      	; 0xa5c <LCDWriteInt+0x10>
 a5c:	0f 92       	push	r0
 a5e:	cd b7       	in	r28, 0x3d	; 61
 a60:	de b7       	in	r29, 0x3e	; 62
 a62:	8c 01       	movw	r16, r24
 a64:	e6 2e       	mov	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 a66:	fe 01       	movw	r30, r28
 a68:	31 96       	adiw	r30, 0x01	; 1
 a6a:	85 e0       	ldi	r24, 0x05	; 5
 a6c:	df 01       	movw	r26, r30
 a6e:	1d 92       	st	X+, r1
 a70:	8a 95       	dec	r24
 a72:	e9 f7       	brne	.-6      	; 0xa6e <LCDWriteInt+0x22>
	int i=4,j=0;
	
	//Handle negative integers
	if(val<0)
 a74:	11 23       	and	r17, r17
 a76:	3c f4       	brge	.+14     	; 0xa86 <LCDWriteInt+0x3a>
	{
		LCDData('-');   //Write Negative sign
 a78:	8d e2       	ldi	r24, 0x2D	; 45
 a7a:	61 e0       	ldi	r22, 0x01	; 1
 a7c:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
		val=val*-1;     //convert to positive
 a80:	10 95       	com	r17
 a82:	01 95       	neg	r16
 a84:	1f 4f       	sbci	r17, 0xFF	; 255
	else
	{
		//LCDData(' ');
	}
	
	while(val)
 a86:	01 15       	cp	r16, r1
 a88:	11 05       	cpc	r17, r1
 a8a:	71 f0       	breq	.+28     	; 0xaa8 <LCDWriteInt+0x5c>
 a8c:	fe 01       	movw	r30, r28
 a8e:	36 96       	adiw	r30, 0x06	; 6
	{
		str[i]=val%10;
 a90:	2a e0       	ldi	r18, 0x0A	; 10
 a92:	30 e0       	ldi	r19, 0x00	; 0
 a94:	c8 01       	movw	r24, r16
 a96:	b9 01       	movw	r22, r18
 a98:	0e 94 82 07 	call	0xf04	; 0xf04 <__divmodhi4>
 a9c:	82 93       	st	-Z, r24
		val=val/10;
 a9e:	06 2f       	mov	r16, r22
 aa0:	17 2f       	mov	r17, r23
	else
	{
		//LCDData(' ');
	}
	
	while(val)
 aa2:	01 15       	cp	r16, r1
 aa4:	11 05       	cpc	r17, r1
 aa6:	b1 f7       	brne	.-20     	; 0xa94 <LCDWriteInt+0x48>
		str[i]=val%10;
		val=val/10;
		i--;
	}
	
	if(field_length==-1)
 aa8:	be 2d       	mov	r27, r14
 aaa:	bf 3f       	cpi	r27, 0xFF	; 255
 aac:	b1 f4       	brne	.+44     	; 0xada <LCDWriteInt+0x8e>
		while(str[j]==0) j++;
 aae:	89 81       	ldd	r24, Y+1	; 0x01
 ab0:	88 23       	and	r24, r24
 ab2:	49 f0       	breq	.+18     	; 0xac6 <LCDWriteInt+0x7a>
 ab4:	00 e0       	ldi	r16, 0x00	; 0
 ab6:	10 e0       	ldi	r17, 0x00	; 0
	msg++;
	ch=pgm_read_byte(msg);
 }
}

void LCDWriteInt(int val,int8_t field_length)
 ab8:	7e 01       	movw	r14, r28
 aba:	08 94       	sec
 abc:	e1 1c       	adc	r14, r1
 abe:	f1 1c       	adc	r15, r1
 ac0:	e0 0e       	add	r14, r16
 ac2:	f1 1e       	adc	r15, r17
 ac4:	15 c0       	rjmp	.+42     	; 0xaf0 <LCDWriteInt+0xa4>
		val=val/10;
		i--;
	}
	
	if(field_length==-1)
		while(str[j]==0) j++;
 ac6:	fe 01       	movw	r30, r28
 ac8:	32 96       	adiw	r30, 0x02	; 2
 aca:	00 e0       	ldi	r16, 0x00	; 0
 acc:	10 e0       	ldi	r17, 0x00	; 0
 ace:	0f 5f       	subi	r16, 0xFF	; 255
 ad0:	1f 4f       	sbci	r17, 0xFF	; 255
 ad2:	81 91       	ld	r24, Z+
 ad4:	88 23       	and	r24, r24
 ad6:	d9 f3       	breq	.-10     	; 0xace <LCDWriteInt+0x82>
 ad8:	07 c0       	rjmp	.+14     	; 0xae8 <LCDWriteInt+0x9c>
	else
		j=5-field_length;
 ada:	ff 24       	eor	r15, r15
 adc:	e7 fc       	sbrc	r14, 7
 ade:	f0 94       	com	r15
 ae0:	05 e0       	ldi	r16, 0x05	; 5
 ae2:	10 e0       	ldi	r17, 0x00	; 0
 ae4:	0e 19       	sub	r16, r14
 ae6:	1f 09       	sbc	r17, r15

	for(i=j;i<5;i++)
 ae8:	05 30       	cpi	r16, 0x05	; 5
 aea:	11 05       	cpc	r17, r1
 aec:	2c f3       	brlt	.-54     	; 0xab8 <LCDWriteInt+0x6c>
 aee:	0c c0       	rjmp	.+24     	; 0xb08 <LCDWriteInt+0xbc>
	{
		LCDData('0'+str[i]);
 af0:	f7 01       	movw	r30, r14
 af2:	81 91       	ld	r24, Z+
 af4:	7f 01       	movw	r14, r30
 af6:	80 5d       	subi	r24, 0xD0	; 208
 af8:	61 e0       	ldi	r22, 0x01	; 1
 afa:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
	if(field_length==-1)
		while(str[j]==0) j++;
	else
		j=5-field_length;

	for(i=j;i<5;i++)
 afe:	0f 5f       	subi	r16, 0xFF	; 255
 b00:	1f 4f       	sbci	r17, 0xFF	; 255
 b02:	05 30       	cpi	r16, 0x05	; 5
 b04:	11 05       	cpc	r17, r1
 b06:	a4 f3       	brlt	.-24     	; 0xaf0 <LCDWriteInt+0xa4>
	{
		LCDData('0'+str[i]);
	}
}
 b08:	0f 90       	pop	r0
 b0a:	0f 90       	pop	r0
 b0c:	0f 90       	pop	r0
 b0e:	0f 90       	pop	r0
 b10:	0f 90       	pop	r0
 b12:	cf 91       	pop	r28
 b14:	df 91       	pop	r29
 b16:	1f 91       	pop	r17
 b18:	0f 91       	pop	r16
 b1a:	ff 90       	pop	r15
 b1c:	ef 90       	pop	r14
 b1e:	08 95       	ret

00000b20 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 b20:	84 31       	cpi	r24, 0x14	; 20
 b22:	78 f4       	brcc	.+30     	; 0xb42 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 b24:	62 30       	cpi	r22, 0x02	; 2
 b26:	31 f0       	breq	.+12     	; 0xb34 <LCDGotoXY+0x14>
 b28:	63 30       	cpi	r22, 0x03	; 3
 b2a:	31 f0       	breq	.+12     	; 0xb38 <LCDGotoXY+0x18>
 b2c:	61 30       	cpi	r22, 0x01	; 1
 b2e:	29 f4       	brne	.+10     	; 0xb3a <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 b30:	80 64       	ori	r24, 0x40	; 64
			break;
 b32:	03 c0       	rjmp	.+6      	; 0xb3a <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
 b34:	8c 5e       	subi	r24, 0xEC	; 236
			break;
 b36:	01 c0       	rjmp	.+2      	; 0xb3a <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
 b38:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 b3a:	80 68       	ori	r24, 0x80	; 128
 b3c:	60 e0       	ldi	r22, 0x00	; 0
 b3e:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
 b42:	08 95       	ret

00000b44 <SetTime>:
	}
	
}

bool SetTime()
{
 b44:	6f 92       	push	r6
 b46:	7f 92       	push	r7
 b48:	8f 92       	push	r8
 b4a:	9f 92       	push	r9
 b4c:	af 92       	push	r10
 b4e:	bf 92       	push	r11
 b50:	cf 92       	push	r12
 b52:	df 92       	push	r13
 b54:	ef 92       	push	r14
 b56:	ff 92       	push	r15
 b58:	0f 93       	push	r16
 b5a:	1f 93       	push	r17
 b5c:	cf 93       	push	r28
 b5e:	df 93       	push	r29

	uint8_t hr,min,sec,am_pm;

	//Get Seconds
	sec=GetSecond();
 b60:	0e 94 91 00 	call	0x122	; 0x122 <GetSecond>
 b64:	f8 2e       	mov	r15, r24

	//Get Minute
	min=GetMinute();
 b66:	0e 94 b5 00 	call	0x16a	; 0x16a <GetMinute>
 b6a:	e8 2e       	mov	r14, r24

	//Get Hour
	hr=GetHour();
 b6c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <GetHour>
 b70:	08 2f       	mov	r16, r24

	//Get AM/PM
	am_pm=GetAmPm();
 b72:	0e 94 fd 00 	call	0x1fa	; 0x1fa <GetAmPm>
 b76:	d8 2e       	mov	r13, r24

	//If Hour is 0 make it 12, as 00:00:00 invalid time
	if(hr==0 && min==0 && sec==0) hr=12;
 b78:	00 23       	and	r16, r16
 b7a:	29 f4       	brne	.+10     	; 0xb86 <SetTime+0x42>
 b7c:	ee 20       	and	r14, r14
 b7e:	19 f4       	brne	.+6      	; 0xb86 <SetTime+0x42>
 b80:	ff 20       	and	r15, r15
 b82:	09 f4       	brne	.+2      	; 0xb86 <SetTime+0x42>
 b84:	0c e0       	ldi	r16, 0x0C	; 12
 b86:	10 e0       	ldi	r17, 0x00	; 0

	while(!done)
	{
		LCDClear();

		LCDWriteString("00:00:00    <OK>");
 b88:	c3 ea       	ldi	r28, 0xA3	; 163
 b8a:	d0 e0       	ldi	r29, 0x00	; 0
		LCDWriteIntXY(3,0,min,2);
		LCDWriteIntXY(6,0,sec,2);

		if(am_pm)
		{
			LCDWriteStringXY(9,0,"PM");
 b8c:	0f 2e       	mov	r0, r31
 b8e:	f4 eb       	ldi	r31, 0xB4	; 180
 b90:	8f 2e       	mov	r8, r31
 b92:	f0 e0       	ldi	r31, 0x00	; 0
 b94:	9f 2e       	mov	r9, r31
 b96:	f0 2d       	mov	r31, r0
		}
		else
		{
			LCDWriteStringXY(9,0,"AM");
 b98:	0f 2e       	mov	r0, r31
 b9a:	f7 eb       	ldi	r31, 0xB7	; 183
 b9c:	6f 2e       	mov	r6, r31
 b9e:	f0 e0       	ldi	r31, 0x00	; 0
 ba0:	7f 2e       	mov	r7, r31
 ba2:	f0 2d       	mov	r31, r0
		}

		//Draw Pointer
		LCDWriteStringXY(sel*3,1,"^^");
 ba4:	0f 2e       	mov	r0, r31
 ba6:	fa eb       	ldi	r31, 0xBA	; 186
 ba8:	af 2e       	mov	r10, r31
 baa:	f0 e0       	ldi	r31, 0x00	; 0
 bac:	bf 2e       	mov	r11, r31
 bae:	f0 2d       	mov	r31, r0
				if(sel==0)
				{
					//Hour
					if(hr==1)
					{
						hr=12;
 bb0:	0f 2e       	mov	r0, r31
 bb2:	fc e0       	ldi	r31, 0x0C	; 12
 bb4:	cf 2e       	mov	r12, r31
 bb6:	f0 2d       	mov	r31, r0
	
	bool done=FALSE;

	while(!done)
	{
		LCDClear();
 bb8:	81 e0       	ldi	r24, 0x01	; 1
 bba:	60 e0       	ldi	r22, 0x00	; 0
 bbc:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>

		LCDWriteString("00:00:00    <OK>");
 bc0:	ce 01       	movw	r24, r28
 bc2:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDWriteString>
		
		LCDWriteIntXY(0,0,hr,2);
 bc6:	80 e0       	ldi	r24, 0x00	; 0
 bc8:	60 e0       	ldi	r22, 0x00	; 0
 bca:	0e 94 90 05 	call	0xb20	; 0xb20 <LCDGotoXY>
 bce:	80 2f       	mov	r24, r16
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	62 e0       	ldi	r22, 0x02	; 2
 bd4:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCDWriteInt>
		LCDWriteIntXY(3,0,min,2);
 bd8:	83 e0       	ldi	r24, 0x03	; 3
 bda:	60 e0       	ldi	r22, 0x00	; 0
 bdc:	0e 94 90 05 	call	0xb20	; 0xb20 <LCDGotoXY>
 be0:	8e 2d       	mov	r24, r14
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	62 e0       	ldi	r22, 0x02	; 2
 be6:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCDWriteInt>
		LCDWriteIntXY(6,0,sec,2);
 bea:	86 e0       	ldi	r24, 0x06	; 6
 bec:	60 e0       	ldi	r22, 0x00	; 0
 bee:	0e 94 90 05 	call	0xb20	; 0xb20 <LCDGotoXY>
 bf2:	8f 2d       	mov	r24, r15
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	62 e0       	ldi	r22, 0x02	; 2
 bf8:	0e 94 26 05 	call	0xa4c	; 0xa4c <LCDWriteInt>

		if(am_pm)
 bfc:	dd 20       	and	r13, r13
 bfe:	41 f0       	breq	.+16     	; 0xc10 <SetTime+0xcc>
		{
			LCDWriteStringXY(9,0,"PM");
 c00:	89 e0       	ldi	r24, 0x09	; 9
 c02:	60 e0       	ldi	r22, 0x00	; 0
 c04:	0e 94 90 05 	call	0xb20	; 0xb20 <LCDGotoXY>
 c08:	c4 01       	movw	r24, r8
 c0a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDWriteString>
 c0e:	07 c0       	rjmp	.+14     	; 0xc1e <SetTime+0xda>
		}
		else
		{
			LCDWriteStringXY(9,0,"AM");
 c10:	89 e0       	ldi	r24, 0x09	; 9
 c12:	60 e0       	ldi	r22, 0x00	; 0
 c14:	0e 94 90 05 	call	0xb20	; 0xb20 <LCDGotoXY>
 c18:	c3 01       	movw	r24, r6
 c1a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDWriteString>
		}

		//Draw Pointer
		LCDWriteStringXY(sel*3,1,"^^");
 c1e:	81 2f       	mov	r24, r17
 c20:	88 0f       	add	r24, r24
 c22:	81 0f       	add	r24, r17
 c24:	61 e0       	ldi	r22, 0x01	; 1
 c26:	0e 94 90 05 	call	0xb20	; 0xb20 <LCDGotoXY>
 c2a:	c5 01       	movw	r24, r10
 c2c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDWriteString>
		
		uint8_t key=GetKeypadCmd(1);
 c30:	81 e0       	ldi	r24, 0x01	; 1
 c32:	0e 94 21 04 	call	0x842	; 0x842 <GetKeypadCmd>

		switch(key)
 c36:	82 30       	cpi	r24, 0x02	; 2
 c38:	39 f0       	breq	.+14     	; 0xc48 <SetTime+0x104>
 c3a:	83 30       	cpi	r24, 0x03	; 3
 c3c:	09 f4       	brne	.+2      	; 0xc40 <SetTime+0xfc>
 c3e:	4c c0       	rjmp	.+152    	; 0xcd8 <SetTime+0x194>
 c40:	81 30       	cpi	r24, 0x01	; 1
 c42:	09 f0       	breq	.+2      	; 0xc46 <SetTime+0x102>
 c44:	b9 cf       	rjmp	.-142    	; 0xbb8 <SetTime+0x74>
 c46:	22 c0       	rjmp	.+68     	; 0xc8c <SetTime+0x148>
		{
			case KEY_RIGHT:
			
				if(sel==0)
 c48:	11 23       	and	r17, r17
 c4a:	29 f4       	brne	.+10     	; 0xc56 <SetTime+0x112>
				{
					//Hour
					if(hr==12)
 c4c:	0c 30       	cpi	r16, 0x0C	; 12
 c4e:	11 f0       	breq	.+4      	; 0xc54 <SetTime+0x110>
					{
						hr=1;
					}
					else
					{
						hr++;
 c50:	0f 5f       	subi	r16, 0xFF	; 255
 c52:	11 c0       	rjmp	.+34     	; 0xc76 <SetTime+0x132>
				if(sel==0)
				{
					//Hour
					if(hr==12)
					{
						hr=1;
 c54:	01 e0       	ldi	r16, 0x01	; 1
					{
						hr++;
					}
				}

				if(sel==1)
 c56:	11 30       	cpi	r17, 0x01	; 1
 c58:	31 f4       	brne	.+12     	; 0xc66 <SetTime+0x122>
				{
					//Min
					if(min==59)
 c5a:	8e 2d       	mov	r24, r14
 c5c:	8b 33       	cpi	r24, 0x3B	; 59
 c5e:	11 f0       	breq	.+4      	; 0xc64 <SetTime+0x120>
					{
						min=0;
					}
					else
					{
						min++;
 c60:	e3 94       	inc	r14
 c62:	10 c0       	rjmp	.+32     	; 0xc84 <SetTime+0x140>
				if(sel==1)
				{
					//Min
					if(min==59)
					{
						min=0;
 c64:	ee 24       	eor	r14, r14
					{
						min++;
					}
				}

				if(sel==2)
 c66:	12 30       	cpi	r17, 0x02	; 2
 c68:	31 f4       	brne	.+12     	; 0xc76 <SetTime+0x132>
				{
					//Sec
					if(sec==59)
 c6a:	8f 2d       	mov	r24, r15
 c6c:	8b 33       	cpi	r24, 0x3B	; 59
 c6e:	11 f0       	breq	.+4      	; 0xc74 <SetTime+0x130>
					{
						sec=0;
					}
					else
					{
						sec++;
 c70:	f3 94       	inc	r15
 c72:	a2 cf       	rjmp	.-188    	; 0xbb8 <SetTime+0x74>
				if(sel==2)
				{
					//Sec
					if(sec==59)
					{
						sec=0;
 c74:	ff 24       	eor	r15, r15
					{
						sec++;
					}
				}

				if(sel==3)
 c76:	13 30       	cpi	r17, 0x03	; 3
 c78:	29 f4       	brne	.+10     	; 0xc84 <SetTime+0x140>
				{
					//AM-PM
					if(am_pm==0)
					{
						am_pm=1;
 c7a:	81 e0       	ldi	r24, 0x01	; 1
 c7c:	d1 10       	cpse	r13, r1
 c7e:	80 e0       	ldi	r24, 0x00	; 0
 c80:	d8 2e       	mov	r13, r24
 c82:	9a cf       	rjmp	.-204    	; 0xbb8 <SetTime+0x74>
					else
					{
						am_pm=0;
					}
				}
				if(sel == 4)
 c84:	14 30       	cpi	r17, 0x04	; 4
 c86:	09 f4       	brne	.+2      	; 0xc8a <SetTime+0x146>
 c88:	ad c0       	rjmp	.+346    	; 0xde4 <SetTime+0x2a0>
 c8a:	96 cf       	rjmp	.-212    	; 0xbb8 <SetTime+0x74>
			
			break;
			
			case KEY_LEFT:
			
				if(sel==0)
 c8c:	11 23       	and	r17, r17
 c8e:	29 f4       	brne	.+10     	; 0xc9a <SetTime+0x156>
				{
					//Hour
					if(hr==1)
 c90:	01 30       	cpi	r16, 0x01	; 1
 c92:	11 f0       	breq	.+4      	; 0xc98 <SetTime+0x154>
					{
						hr=12;
					}
					else
					{
						hr--;
 c94:	01 50       	subi	r16, 0x01	; 1
 c96:	15 c0       	rjmp	.+42     	; 0xcc2 <SetTime+0x17e>
				if(sel==0)
				{
					//Hour
					if(hr==1)
					{
						hr=12;
 c98:	0c 2d       	mov	r16, r12
					{
						hr--;
					}
				}

				if(sel==1)
 c9a:	11 30       	cpi	r17, 0x01	; 1
 c9c:	41 f4       	brne	.+16     	; 0xcae <SetTime+0x16a>
				{
					//Min
					if(min==0)
 c9e:	ee 20       	and	r14, r14
 ca0:	11 f0       	breq	.+4      	; 0xca6 <SetTime+0x162>
					{
						min=59;
					}
					else
					{
						min--;
 ca2:	ea 94       	dec	r14
 ca4:	15 c0       	rjmp	.+42     	; 0xcd0 <SetTime+0x18c>
				if(sel==1)
				{
					//Min
					if(min==0)
					{
						min=59;
 ca6:	0f 2e       	mov	r0, r31
 ca8:	fb e3       	ldi	r31, 0x3B	; 59
 caa:	ef 2e       	mov	r14, r31
 cac:	f0 2d       	mov	r31, r0
					{
						min--;
					}
				}

				if(sel==2)
 cae:	12 30       	cpi	r17, 0x02	; 2
 cb0:	41 f4       	brne	.+16     	; 0xcc2 <SetTime+0x17e>
				{
					//Sec
					if(sec==0)
 cb2:	ff 20       	and	r15, r15
 cb4:	11 f0       	breq	.+4      	; 0xcba <SetTime+0x176>
					{
						sec=59;
					}
					else
					{
						sec--;
 cb6:	fa 94       	dec	r15
 cb8:	7f cf       	rjmp	.-258    	; 0xbb8 <SetTime+0x74>
				if(sel==2)
				{
					//Sec
					if(sec==0)
					{
						sec=59;
 cba:	0f 2e       	mov	r0, r31
 cbc:	fb e3       	ldi	r31, 0x3B	; 59
 cbe:	ff 2e       	mov	r15, r31
 cc0:	f0 2d       	mov	r31, r0
					{
						sec--;
					}
				}

				if(sel==3)
 cc2:	13 30       	cpi	r17, 0x03	; 3
 cc4:	29 f4       	brne	.+10     	; 0xcd0 <SetTime+0x18c>
				{
					//AM-PM
					if(am_pm==0)
					{
						am_pm=1;
 cc6:	81 e0       	ldi	r24, 0x01	; 1
 cc8:	d1 10       	cpse	r13, r1
 cca:	80 e0       	ldi	r24, 0x00	; 0
 ccc:	d8 2e       	mov	r13, r24
 cce:	74 cf       	rjmp	.-280    	; 0xbb8 <SetTime+0x74>
					else
					{
						am_pm=0;
					}
				}
				if(sel == 4)
 cd0:	14 30       	cpi	r17, 0x04	; 4
 cd2:	09 f0       	breq	.+2      	; 0xcd6 <SetTime+0x192>
 cd4:	71 cf       	rjmp	.-286    	; 0xbb8 <SetTime+0x74>
 cd6:	86 c0       	rjmp	.+268    	; 0xde4 <SetTime+0x2a0>
			break;
			
			case KEY_ENTER:
			
			//Change Selection
			if(sel==4)
 cd8:	14 30       	cpi	r17, 0x04	; 4
 cda:	11 f0       	breq	.+4      	; 0xce0 <SetTime+0x19c>
				sel=0;
			else
				sel++;
 cdc:	1f 5f       	subi	r17, 0xFF	; 255
 cde:	6c cf       	rjmp	.-296    	; 0xbb8 <SetTime+0x74>
			
			case KEY_ENTER:
			
			//Change Selection
			if(sel==4)
				sel=0;
 ce0:	10 e0       	ldi	r17, 0x00	; 0
 ce2:	6a cf       	rjmp	.-300    	; 0xbb8 <SetTime+0x74>
	}

	//Now write time back to RTC Module
	if(!SetSecond(sec))
	{
		LCDClear();
 ce4:	81 e0       	ldi	r24, 0x01	; 1
 ce6:	60 e0       	ldi	r22, 0x00	; 0
 ce8:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
		LCDWriteString("Error !");
 cec:	8d eb       	ldi	r24, 0xBD	; 189
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDWriteString>
		LCDWriteStringXY(0,1,"Cannot Set Time");
 cf4:	80 e0       	ldi	r24, 0x00	; 0
 cf6:	61 e0       	ldi	r22, 0x01	; 1
 cf8:	0e 94 90 05 	call	0xb20	; 0xb20 <LCDGotoXY>
 cfc:	85 ec       	ldi	r24, 0xC5	; 197
 cfe:	90 e0       	ldi	r25, 0x00	; 0
 d00:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDWriteString>
		return 0;
 d04:	80 e0       	ldi	r24, 0x00	; 0
 d06:	5f c0       	rjmp	.+190    	; 0xdc6 <SetTime+0x282>
	}
	if(!SetMinute(min))
 d08:	8e 2d       	mov	r24, r14
 d0a:	0e 94 1b 01 	call	0x236	; 0x236 <SetMinute>
 d0e:	88 23       	and	r24, r24
 d10:	91 f4       	brne	.+36     	; 0xd36 <SetTime+0x1f2>
	{
		LCDClear();
 d12:	81 e0       	ldi	r24, 0x01	; 1
 d14:	60 e0       	ldi	r22, 0x00	; 0
 d16:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
		LCDWriteString("Error !");
 d1a:	8d eb       	ldi	r24, 0xBD	; 189
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDWriteString>
		LCDWriteStringXY(0,1,"Cannot Set Time");
 d22:	80 e0       	ldi	r24, 0x00	; 0
 d24:	61 e0       	ldi	r22, 0x01	; 1
 d26:	0e 94 90 05 	call	0xb20	; 0xb20 <LCDGotoXY>
 d2a:	85 ec       	ldi	r24, 0xC5	; 197
 d2c:	90 e0       	ldi	r25, 0x00	; 0
 d2e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDWriteString>
		return 0;
 d32:	80 e0       	ldi	r24, 0x00	; 0
 d34:	48 c0       	rjmp	.+144    	; 0xdc6 <SetTime+0x282>
	}
	if(!SetHour(hr))
 d36:	80 2f       	mov	r24, r16
 d38:	0e 94 26 01 	call	0x24c	; 0x24c <SetHour>
 d3c:	88 23       	and	r24, r24
 d3e:	91 f4       	brne	.+36     	; 0xd64 <SetTime+0x220>
	{
		LCDClear();
 d40:	81 e0       	ldi	r24, 0x01	; 1
 d42:	60 e0       	ldi	r22, 0x00	; 0
 d44:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
		LCDWriteString("Error !");
 d48:	8d eb       	ldi	r24, 0xBD	; 189
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDWriteString>
		LCDWriteStringXY(0,1,"Cannot Set Time");
 d50:	80 e0       	ldi	r24, 0x00	; 0
 d52:	61 e0       	ldi	r22, 0x01	; 1
 d54:	0e 94 90 05 	call	0xb20	; 0xb20 <LCDGotoXY>
 d58:	85 ec       	ldi	r24, 0xC5	; 197
 d5a:	90 e0       	ldi	r25, 0x00	; 0
 d5c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDWriteString>
		return 0;
 d60:	80 e0       	ldi	r24, 0x00	; 0
 d62:	31 c0       	rjmp	.+98     	; 0xdc6 <SetTime+0x282>
	}
	if(!SetAmPm(am_pm))
 d64:	8d 2d       	mov	r24, r13
 d66:	0e 94 3b 01 	call	0x276	; 0x276 <SetAmPm>
 d6a:	88 23       	and	r24, r24
 d6c:	91 f4       	brne	.+36     	; 0xd92 <SetTime+0x24e>
	{
		LCDClear();
 d6e:	81 e0       	ldi	r24, 0x01	; 1
 d70:	60 e0       	ldi	r22, 0x00	; 0
 d72:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
		LCDWriteString("Error !");
 d76:	8d eb       	ldi	r24, 0xBD	; 189
 d78:	90 e0       	ldi	r25, 0x00	; 0
 d7a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDWriteString>
		LCDWriteStringXY(0,1,"Cannot Set Time");
 d7e:	80 e0       	ldi	r24, 0x00	; 0
 d80:	61 e0       	ldi	r22, 0x01	; 1
 d82:	0e 94 90 05 	call	0xb20	; 0xb20 <LCDGotoXY>
 d86:	85 ec       	ldi	r24, 0xC5	; 197
 d88:	90 e0       	ldi	r25, 0x00	; 0
 d8a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDWriteString>
		return 0;
 d8e:	80 e0       	ldi	r24, 0x00	; 0
 d90:	1a c0       	rjmp	.+52     	; 0xdc6 <SetTime+0x282>
	}


	//Show Message
	LCDClear();
 d92:	81 e0       	ldi	r24, 0x01	; 1
 d94:	60 e0       	ldi	r22, 0x00	; 0
 d96:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
	LCDWriteString("Message !");
 d9a:	85 ed       	ldi	r24, 0xD5	; 213
 d9c:	90 e0       	ldi	r25, 0x00	; 0
 d9e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDWriteString>
	LCDWriteStringXY(0,1,"Main Time Set");
 da2:	80 e0       	ldi	r24, 0x00	; 0
 da4:	61 e0       	ldi	r22, 0x01	; 1
 da6:	0e 94 90 05 	call	0xb20	; 0xb20 <LCDGotoXY>
 daa:	8f ed       	ldi	r24, 0xDF	; 223
 dac:	90 e0       	ldi	r25, 0x00	; 0
 dae:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDWriteString>

	uint8_t i;
	for(i=0;i<100;i++)
 db2:	40 e0       	ldi	r20, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 db4:	20 e0       	ldi	r18, 0x00	; 0
 db6:	30 e0       	ldi	r19, 0x00	; 0
 db8:	c9 01       	movw	r24, r18
 dba:	01 97       	sbiw	r24, 0x01	; 1
 dbc:	f1 f7       	brne	.-4      	; 0xdba <SetTime+0x276>
 dbe:	4f 5f       	subi	r20, 0xFF	; 255
 dc0:	44 36       	cpi	r20, 0x64	; 100
 dc2:	d1 f7       	brne	.-12     	; 0xdb8 <SetTime+0x274>
	_delay_loop_2(0);
	
	return 1;
 dc4:	81 e0       	ldi	r24, 0x01	; 1

 dc6:	df 91       	pop	r29
 dc8:	cf 91       	pop	r28
 dca:	1f 91       	pop	r17
 dcc:	0f 91       	pop	r16
 dce:	ff 90       	pop	r15
 dd0:	ef 90       	pop	r14
 dd2:	df 90       	pop	r13
 dd4:	cf 90       	pop	r12
 dd6:	bf 90       	pop	r11
 dd8:	af 90       	pop	r10
 dda:	9f 90       	pop	r9
 ddc:	8f 90       	pop	r8
 dde:	7f 90       	pop	r7
 de0:	6f 90       	pop	r6
 de2:	08 95       	ret
		}

	}

	//Now write time back to RTC Module
	if(!SetSecond(sec))
 de4:	8f 2d       	mov	r24, r15
 de6:	0e 94 10 01 	call	0x220	; 0x220 <SetSecond>
 dea:	88 23       	and	r24, r24
 dec:	09 f0       	breq	.+2      	; 0xdf0 <SetTime+0x2ac>
 dee:	8c cf       	rjmp	.-232    	; 0xd08 <SetTime+0x1c4>
 df0:	79 cf       	rjmp	.-270    	; 0xce4 <SetTime+0x1a0>

00000df2 <main>:
#define FALSE	0

bool SetTime();

int main(void)
{
 df2:	0f 93       	push	r16
 df4:	1f 93       	push	r17
 df6:	df 93       	push	r29
 df8:	cf 93       	push	r28
 dfa:	cd b7       	in	r28, 0x3d	; 61
 dfc:	de b7       	in	r29, 0x3e	; 62
 dfe:	2c 97       	sbiw	r28, 0x0c	; 12
 e00:	0f b6       	in	r0, 0x3f	; 63
 e02:	f8 94       	cli
 e04:	de bf       	out	0x3e, r29	; 62
 e06:	0f be       	out	0x3f, r0	; 63
 e08:	cd bf       	out	0x3d, r28	; 61
	//Initialize the LCD module
	LCDInit(LS_NONE);
 e0a:	80 e0       	ldi	r24, 0x00	; 0
 e0c:	0e 94 92 04 	call	0x924	; 0x924 <LCDInit>
	
	//Write a intro text
	LCDWriteFStringXY(0,0,PSTR("    eXtreme"));
 e10:	80 e0       	ldi	r24, 0x00	; 0
 e12:	60 e0       	ldi	r22, 0x00	; 0
 e14:	0e 94 90 05 	call	0xb20	; 0xb20 <LCDGotoXY>
 e18:	80 e7       	ldi	r24, 0x70	; 112
 e1a:	90 e0       	ldi	r25, 0x00	; 0
 e1c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LCDWriteFString>
	LCDWriteFStringXY(0,1,PSTR("  Electronics"));
 e20:	80 e0       	ldi	r24, 0x00	; 0
 e22:	61 e0       	ldi	r22, 0x01	; 1
 e24:	0e 94 90 05 	call	0xb20	; 0xb20 <LCDGotoXY>
 e28:	82 e6       	ldi	r24, 0x62	; 98
 e2a:	90 e0       	ldi	r25, 0x00	; 0
 e2c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LCDWriteFString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 e30:	8f e7       	ldi	r24, 0x7F	; 127
 e32:	9a e1       	ldi	r25, 0x1A	; 26
 e34:	a6 e0       	ldi	r26, 0x06	; 6
 e36:	81 50       	subi	r24, 0x01	; 1
 e38:	90 40       	sbci	r25, 0x00	; 0
 e3a:	a0 40       	sbci	r26, 0x00	; 0
 e3c:	e1 f7       	brne	.-8      	; 0xe36 <main+0x44>
 e3e:	00 c0       	rjmp	.+0      	; 0xe40 <main+0x4e>
 e40:	00 00       	nop
	
	_delay_ms(2000);
	
	LCDClear();
 e42:	81 e0       	ldi	r24, 0x01	; 1
 e44:	60 e0       	ldi	r22, 0x00	; 0
 e46:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
	//Initialize the Clock Module
	if(!ClockInit())
 e4a:	0e 94 5d 00 	call	0xba	; 0xba <ClockInit>
 e4e:	88 23       	and	r24, r24
 e50:	89 f4       	brne	.+34     	; 0xe74 <main+0x82>
	{
		//If we fail to initialize then warn user
		LCDClear();
 e52:	81 e0       	ldi	r24, 0x01	; 1
 e54:	60 e0       	ldi	r22, 0x00	; 0
 e56:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
		LCDWriteString("Error !");
 e5a:	8d eb       	ldi	r24, 0xBD	; 189
 e5c:	90 e0       	ldi	r25, 0x00	; 0
 e5e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDWriteString>
		LCDWriteStringXY(0,1,"DS1307 Not Found");
 e62:	80 e0       	ldi	r24, 0x00	; 0
 e64:	61 e0       	ldi	r22, 0x01	; 1
 e66:	0e 94 90 05 	call	0xb20	; 0xb20 <LCDGotoXY>
 e6a:	8d ee       	ldi	r24, 0xED	; 237
 e6c:	90 e0       	ldi	r25, 0x00	; 0
 e6e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDWriteString>
 e72:	ff cf       	rjmp	.-2      	; 0xe72 <main+0x80>

		while(1); //Halt
	}
	
	//Initialize the keypad
	KeypadInit();
 e74:	0e 94 72 02 	call	0x4e4	; 0x4e4 <KeypadInit>
		//Loop, read time from chip and show on lcd
		while(1)
		{
		
			//Get the Current Time as a String
			if(!GetTimeString(Time))
 e78:	8e 01       	movw	r16, r28
 e7a:	0f 5f       	subi	r16, 0xFF	; 255
 e7c:	1f 4f       	sbci	r17, 0xFF	; 255
	//Now Read and display time
	char Time[12];	//hh:mm:ss AM/PM
	
	while(1)
	{
		LCDClear();
 e7e:	81 e0       	ldi	r24, 0x01	; 1
 e80:	60 e0       	ldi	r22, 0x00	; 0
 e82:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
		
		LCDWriteFString(PSTR("  DS1307 Demo"));
 e86:	84 e5       	ldi	r24, 0x54	; 84
 e88:	90 e0       	ldi	r25, 0x00	; 0
 e8a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LCDWriteFString>
		//Loop, read time from chip and show on lcd
		while(1)
		{
		
			//Get the Current Time as a String
			if(!GetTimeString(Time))
 e8e:	c8 01       	movw	r24, r16
 e90:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <GetTimeString>
 e94:	88 23       	and	r24, r24
 e96:	89 f4       	brne	.+34     	; 0xeba <main+0xc8>
			
				Check
				 ->DS1307 Installed Properly
				*/

				LCDClear();
 e98:	81 e0       	ldi	r24, 0x01	; 1
 e9a:	60 e0       	ldi	r22, 0x00	; 0
 e9c:	0e 94 6f 04 	call	0x8de	; 0x8de <LCDByte>
				LCDWriteString("xBoard MINI v2.0");
 ea0:	8e ef       	ldi	r24, 0xFE	; 254
 ea2:	90 e0       	ldi	r25, 0x00	; 0
 ea4:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDWriteString>
				LCDWriteStringXY(0,1,"I2C i/o Error !");
 ea8:	80 e0       	ldi	r24, 0x00	; 0
 eaa:	61 e0       	ldi	r22, 0x01	; 1
 eac:	0e 94 90 05 	call	0xb20	; 0xb20 <LCDGotoXY>
 eb0:	8f e0       	ldi	r24, 0x0F	; 15
 eb2:	91 e0       	ldi	r25, 0x01	; 1
 eb4:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDWriteString>
 eb8:	ff cf       	rjmp	.-2      	; 0xeb8 <main+0xc6>
			
				while(1);//halt
			}

			//Display it
			LCDWriteStringXY(2,1,Time);
 eba:	82 e0       	ldi	r24, 0x02	; 2
 ebc:	61 e0       	ldi	r22, 0x01	; 1
 ebe:	0e 94 90 05 	call	0xb20	; 0xb20 <LCDGotoXY>
 ec2:	c8 01       	movw	r24, r16
 ec4:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <LCDWriteString>
		
			//Check input for ENTER key
			uint8_t key = GetKeypadCmd(FALSE);
 ec8:	80 e0       	ldi	r24, 0x00	; 0
 eca:	0e 94 21 04 	call	0x842	; 0x842 <GetKeypadCmd>
		
			if(key==KEY_ENTER)
 ece:	83 30       	cpi	r24, 0x03	; 3
 ed0:	19 f4       	brne	.+6      	; 0xed8 <main+0xe6>
			{
				//Enter time setup
				SetTime();
 ed2:	0e 94 a2 05 	call	0xb44	; 0xb44 <SetTime>
			}
		
			_delay_ms(500);
		}		
		
	}
 ed6:	d3 cf       	rjmp	.-90     	; 0xe7e <main+0x8c>
 ed8:	8f e9       	ldi	r24, 0x9F	; 159
 eda:	96 e8       	ldi	r25, 0x86	; 134
 edc:	a1 e0       	ldi	r26, 0x01	; 1
 ede:	81 50       	subi	r24, 0x01	; 1
 ee0:	90 40       	sbci	r25, 0x00	; 0
 ee2:	a0 40       	sbci	r26, 0x00	; 0
 ee4:	e1 f7       	brne	.-8      	; 0xede <main+0xec>
 ee6:	00 c0       	rjmp	.+0      	; 0xee8 <main+0xf6>
 ee8:	00 00       	nop
				
				break;
			}
		
			_delay_ms(500);
		}		
 eea:	d1 cf       	rjmp	.-94     	; 0xe8e <main+0x9c>

00000eec <__udivmodqi4>:
 eec:	99 1b       	sub	r25, r25
 eee:	79 e0       	ldi	r23, 0x09	; 9
 ef0:	04 c0       	rjmp	.+8      	; 0xefa <__udivmodqi4_ep>

00000ef2 <__udivmodqi4_loop>:
 ef2:	99 1f       	adc	r25, r25
 ef4:	96 17       	cp	r25, r22
 ef6:	08 f0       	brcs	.+2      	; 0xefa <__udivmodqi4_ep>
 ef8:	96 1b       	sub	r25, r22

00000efa <__udivmodqi4_ep>:
 efa:	88 1f       	adc	r24, r24
 efc:	7a 95       	dec	r23
 efe:	c9 f7       	brne	.-14     	; 0xef2 <__udivmodqi4_loop>
 f00:	80 95       	com	r24
 f02:	08 95       	ret

00000f04 <__divmodhi4>:
 f04:	97 fb       	bst	r25, 7
 f06:	09 2e       	mov	r0, r25
 f08:	07 26       	eor	r0, r23
 f0a:	0a d0       	rcall	.+20     	; 0xf20 <__divmodhi4_neg1>
 f0c:	77 fd       	sbrc	r23, 7
 f0e:	04 d0       	rcall	.+8      	; 0xf18 <__divmodhi4_neg2>
 f10:	0c d0       	rcall	.+24     	; 0xf2a <__udivmodhi4>
 f12:	06 d0       	rcall	.+12     	; 0xf20 <__divmodhi4_neg1>
 f14:	00 20       	and	r0, r0
 f16:	1a f4       	brpl	.+6      	; 0xf1e <__divmodhi4_exit>

00000f18 <__divmodhi4_neg2>:
 f18:	70 95       	com	r23
 f1a:	61 95       	neg	r22
 f1c:	7f 4f       	sbci	r23, 0xFF	; 255

00000f1e <__divmodhi4_exit>:
 f1e:	08 95       	ret

00000f20 <__divmodhi4_neg1>:
 f20:	f6 f7       	brtc	.-4      	; 0xf1e <__divmodhi4_exit>
 f22:	90 95       	com	r25
 f24:	81 95       	neg	r24
 f26:	9f 4f       	sbci	r25, 0xFF	; 255
 f28:	08 95       	ret

00000f2a <__udivmodhi4>:
 f2a:	aa 1b       	sub	r26, r26
 f2c:	bb 1b       	sub	r27, r27
 f2e:	51 e1       	ldi	r21, 0x11	; 17
 f30:	07 c0       	rjmp	.+14     	; 0xf40 <__udivmodhi4_ep>

00000f32 <__udivmodhi4_loop>:
 f32:	aa 1f       	adc	r26, r26
 f34:	bb 1f       	adc	r27, r27
 f36:	a6 17       	cp	r26, r22
 f38:	b7 07       	cpc	r27, r23
 f3a:	10 f0       	brcs	.+4      	; 0xf40 <__udivmodhi4_ep>
 f3c:	a6 1b       	sub	r26, r22
 f3e:	b7 0b       	sbc	r27, r23

00000f40 <__udivmodhi4_ep>:
 f40:	88 1f       	adc	r24, r24
 f42:	99 1f       	adc	r25, r25
 f44:	5a 95       	dec	r21
 f46:	a9 f7       	brne	.-22     	; 0xf32 <__udivmodhi4_loop>
 f48:	80 95       	com	r24
 f4a:	90 95       	com	r25
 f4c:	bc 01       	movw	r22, r24
 f4e:	cd 01       	movw	r24, r26
 f50:	08 95       	ret

00000f52 <_exit>:
 f52:	f8 94       	cli

00000f54 <__stop_program>:
 f54:	ff cf       	rjmp	.-2      	; 0xf54 <__stop_program>
