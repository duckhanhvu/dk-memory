
project 16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000302  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000040  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000d5  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000034b  00000000  00000000  00000bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000012d  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004cb  00000000  00000000  00001041  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  0000150c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000144  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000267  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000003d  00000000  00000000  00001997  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
int main(void)
{

	//uint8_t k;
	
	init_lcd();
  6c:	0e 94 79 00 	call	0xf2	; 0xf2 <init_lcd>
	
	cursor_home();
  70:	0e 94 9a 00 	call	0x134	; 0x134 <cursor_home>
	
	//eeprom_write_byte((uint8_t *)46, 10);
	//k=eeprom_read_dword((uint8_t *)46);
	printnumber_lcd(10);
  74:	8a e0       	ldi	r24, 0x0A	; 10
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	0e 94 ca 00 	call	0x194	; 0x194 <printnumber_lcd>
	return 0;
    
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	08 95       	ret

00000082 <read_2Nib>:


char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
  82:	da 9a       	sbi	0x1b, 2	; 27
	DDR_DATA=0x0F;
  84:	8f e0       	ldi	r24, 0x0F	; 15
  86:	8a bb       	out	0x1a, r24	; 26
	HNib=DATA_input&0xF0;
  88:	89 b3       	in	r24, 0x19	; 25
	clearbit(CTRL,EN);
  8a:	da 98       	cbi	0x1b, 2	; 27
	
	setbit(CTRL,EN);
  8c:	da 9a       	sbi	0x1b, 2	; 27
	LNib=DATA_input&0xF0;
  8e:	99 b3       	in	r25, 0x19	; 25
	clearbit(CTRL,EN);
  90:	da 98       	cbi	0x1b, 2	; 27
	LNib>>=4;
  92:	92 95       	swap	r25
  94:	9f 70       	andi	r25, 0x0F	; 15
char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
	DDR_DATA=0x0F;
	HNib=DATA_input&0xF0;
  96:	80 7f       	andi	r24, 0xF0	; 240
	LNib=DATA_input&0xF0;
	clearbit(CTRL,EN);
	LNib>>=4;
	
	return (HNib|LNib);
}
  98:	89 2b       	or	r24, r25
  9a:	08 95       	ret

0000009c <write_2Nib>:
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
  9c:	9b b3       	in	r25, 0x1b	; 27
  9e:	9f 70       	andi	r25, 0x0F	; 15
	HNib=data&0xF0;
  a0:	28 2f       	mov	r18, r24
  a2:	20 7f       	andi	r18, 0xF0	; 240
	LNib=(data<<4)&0xF0;
	
	DATA_output=HNib|temp;
  a4:	29 2b       	or	r18, r25
  a6:	2b bb       	out	0x1b, r18	; 27
	setbit(CTRL,EN);
  a8:	da 9a       	sbi	0x1b, 2	; 27
	clearbit(CTRL,EN);
  aa:	da 98       	cbi	0x1b, 2	; 27
}
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
	HNib=data&0xF0;
	LNib=(data<<4)&0xF0;
  ac:	82 95       	swap	r24
  ae:	80 7f       	andi	r24, 0xF0	; 240
	
	DATA_output=HNib|temp;
	setbit(CTRL,EN);
	clearbit(CTRL,EN);
	
	DATA_output=LNib|temp;
  b0:	98 2b       	or	r25, r24
  b2:	9b bb       	out	0x1b, r25	; 27
	setbit(CTRL,EN);
  b4:	da 9a       	sbi	0x1b, 2	; 27
	clearbit(CTRL,EN);
  b6:	da 98       	cbi	0x1b, 2	; 27
	
}
  b8:	08 95       	ret

000000ba <wait_lcd>:
void wait_lcd(void){
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	0f 92       	push	r0
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
     	clearbit(CTRL,RS);
		setbit(CTRL,RW);
		temp=read_2Nib();
		
	    //if(bit_is_clear(temp,7)) break;
		if(clear(temp,7)) break;
  c8:	8e 01       	movw	r16, r28
  ca:	0f 5f       	subi	r16, 0xFF	; 255
  cc:	1f 4f       	sbci	r17, 0xFF	; 255
}
void wait_lcd(void){
	unsigned char temp;
	
	while(1){
     	clearbit(CTRL,RS);
  ce:	d8 98       	cbi	0x1b, 0	; 27
		setbit(CTRL,RW);
  d0:	d9 9a       	sbi	0x1b, 1	; 27
		temp=read_2Nib();
  d2:	0e 94 41 00 	call	0x82	; 0x82 <read_2Nib>
  d6:	89 83       	std	Y+1, r24	; 0x01
		
	    //if(bit_is_clear(temp,7)) break;
		if(clear(temp,7)) break;
  d8:	f8 01       	movw	r30, r16
  da:	80 81       	ld	r24, Z
  dc:	88 23       	and	r24, r24
  de:	bc f3       	brlt	.-18     	; 0xce <wait_lcd+0x14>
		
	}
	clearbit(CTRL,RW);
  e0:	d9 98       	cbi	0x1b, 1	; 27
	DDR_DATA=0xFF;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	8a bb       	out	0x1a, r24	; 26
	
}
  e6:	0f 90       	pop	r0
  e8:	cf 91       	pop	r28
  ea:	df 91       	pop	r29
  ec:	1f 91       	pop	r17
  ee:	0f 91       	pop	r16
  f0:	08 95       	ret

000000f2 <init_lcd>:

void init_lcd(){//uses mode 4 bit
	DDR_CTRL=0xFF;
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	8a bb       	out	0x1a, r24	; 26
	DDR_DATA=0xFF;
  f6:	8a bb       	out	0x1a, r24	; 26
	clearbit(CTRL,RS);
  f8:	d8 98       	cbi	0x1b, 0	; 27
	clearbit(CTRL,RW);
  fa:	d9 98       	cbi	0x1b, 1	; 27
	clearbit(CTRL,EN);
  fc:	da 98       	cbi	0x1b, 2	; 27
	
//function set	
	setbit(CTRL,EN);
  fe:	da 9a       	sbi	0x1b, 2	; 27
	setbit(DATA_output,5);
 100:	dd 9a       	sbi	0x1b, 5	; 27
	clearbit(CTRL,EN);
 102:	da 98       	cbi	0x1b, 2	; 27
	wait_lcd();
 104:	0e 94 5d 00 	call	0xba	; 0xba <wait_lcd>
	write_2Nib(0x28);
 108:	88 e2       	ldi	r24, 0x28	; 40
 10a:	0e 94 4e 00 	call	0x9c	; 0x9c <write_2Nib>
	wait_lcd();
 10e:	0e 94 5d 00 	call	0xba	; 0xba <wait_lcd>
//display on/off control
    write_2Nib(0x0E);
 112:	8e e0       	ldi	r24, 0x0E	; 14
 114:	0e 94 4e 00 	call	0x9c	; 0x9c <write_2Nib>
	wait_lcd();
 118:	0e 94 5d 00 	call	0xba	; 0xba <wait_lcd>

//entry mode set 
    
    write_2Nib(0x06);
 11c:	86 e0       	ldi	r24, 0x06	; 6
 11e:	0e 94 4e 00 	call	0x9c	; 0x9c <write_2Nib>
    wait_lcd();		
 122:	0e 94 5d 00 	call	0xba	; 0xba <wait_lcd>
}
 126:	08 95       	ret

00000128 <putchar_lcd>:
void putchar_lcd(unsigned char data){
	
	setbit(CTRL,RS);
 128:	d8 9a       	sbi	0x1b, 0	; 27
	write_2Nib(data);
 12a:	0e 94 4e 00 	call	0x9c	; 0x9c <write_2Nib>
	wait_lcd();
 12e:	0e 94 5d 00 	call	0xba	; 0xba <wait_lcd>
}
 132:	08 95       	ret

00000134 <cursor_home>:
void cursor_home(){
	clearbit(CTRL,RS);
 134:	d8 98       	cbi	0x1b, 0	; 27
	write_2Nib(0x03);
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	0e 94 4e 00 	call	0x9c	; 0x9c <write_2Nib>
	wait_lcd();
 13c:	0e 94 5d 00 	call	0xba	; 0xba <wait_lcd>
}
 140:	08 95       	ret

00000142 <clear_lcd>:
void clear_lcd(){
	clearbit(CTRL,RS);
 142:	d8 98       	cbi	0x1b, 0	; 27
	write_2Nib(0x01);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 4e 00 	call	0x9c	; 0x9c <write_2Nib>
	wait_lcd();
 14a:	0e 94 5d 00 	call	0xba	; 0xba <wait_lcd>
}
 14e:	08 95       	ret

00000150 <movecursor>:
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
	clearbit(CTRL,RS);
 150:	d8 98       	cbi	0x1b, 0	; 27
	write_2Nib(0x01);
	wait_lcd();
}
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
 152:	82 95       	swap	r24
 154:	88 0f       	add	r24, r24
 156:	88 0f       	add	r24, r24
 158:	80 7c       	andi	r24, 0xC0	; 192
 15a:	86 0f       	add	r24, r22
	clearbit(CTRL,RS);
	write_2Nib(x);
 15c:	81 5c       	subi	r24, 0xC1	; 193
 15e:	0e 94 4e 00 	call	0x9c	; 0x9c <write_2Nib>
	wait_lcd();
 162:	0e 94 5d 00 	call	0xba	; 0xba <wait_lcd>
}
 166:	08 95       	ret

00000168 <count_number>:
int count_number(unsigned int number){
 168:	bc 01       	movw	r22, r24
	int dem=0;
	if(number!=0) {
 16a:	00 97       	sbiw	r24, 0x00	; 0
 16c:	71 f0       	breq	.+28     	; 0x18a <count_number+0x22>
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
	   while(number){
		number=number/10;
 172:	ea e0       	ldi	r30, 0x0A	; 10
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	cb 01       	movw	r24, r22
 178:	bf 01       	movw	r22, r30
 17a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__udivmodhi4>
		dem++;
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
	wait_lcd();
}
int count_number(unsigned int number){
	int dem=0;
	if(number!=0) {
	   while(number){
 182:	61 15       	cp	r22, r1
 184:	71 05       	cpc	r23, r1
 186:	b9 f7       	brne	.-18     	; 0x176 <count_number+0xe>
 188:	02 c0       	rjmp	.+4      	; 0x18e <count_number+0x26>
		number=number/10;
		dem++;
	}	
    } 
	else dem=dem+1; 
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
	return dem;
	}
 18e:	82 2f       	mov	r24, r18
 190:	93 2f       	mov	r25, r19
 192:	08 95       	ret

00000194 <printnumber_lcd>:
void printnumber_lcd(unsigned int number){
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
	putchar_lcd(a+48);
	b=number%10;
	putchar_lcd(b+48);
	*/
		int a,b,c,d,e;
	    a=number/10000;
 1a0:	60 e1       	ldi	r22, 0x10	; 16
 1a2:	77 e2       	ldi	r23, 0x27	; 39
 1a4:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__udivmodhi4>
 1a8:	9b 01       	movw	r18, r22
	    //putchar_lcd(a+48);
		number=number%10000;
	    b=number/1000;
 1aa:	68 ee       	ldi	r22, 0xE8	; 232
 1ac:	73 e0       	ldi	r23, 0x03	; 3
 1ae:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__udivmodhi4>
 1b2:	06 2f       	mov	r16, r22
 1b4:	e6 2f       	mov	r30, r22
 1b6:	f7 2f       	mov	r31, r23
	    //putchar_lcd(b+48);
	    number=number%1000;
	    c=number/100;
 1b8:	64 e6       	ldi	r22, 0x64	; 100
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__udivmodhi4>
 1c0:	16 2f       	mov	r17, r22
 1c2:	e6 2e       	mov	r14, r22
 1c4:	e7 01       	movw	r28, r14
 1c6:	7e 01       	movw	r14, r28
 1c8:	f7 2e       	mov	r15, r23
 1ca:	e7 01       	movw	r28, r14
	    //putchar_lcd(c+48);	
	    number=number%100;
	    d=number/10;
 1cc:	6a e0       	ldi	r22, 0x0A	; 10
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__udivmodhi4>
 1d4:	e6 2e       	mov	r14, r22
 1d6:	46 2f       	mov	r20, r22
 1d8:	57 2f       	mov	r21, r23
	    //putchar_lcd(d+48);	
	    e=number%10;
 1da:	f8 2e       	mov	r15, r24
	   // putchar_lcd(e+48);
    if(a==0 && b==0 && c==0 && d==0){
 1dc:	21 15       	cp	r18, r1
 1de:	31 05       	cpc	r19, r1
 1e0:	a1 f5       	brne	.+104    	; 0x24a <printnumber_lcd+0xb6>
 1e2:	30 97       	sbiw	r30, 0x00	; 0
 1e4:	09 f5       	brne	.+66     	; 0x228 <printnumber_lcd+0x94>
 1e6:	20 97       	sbiw	r28, 0x00	; 0
 1e8:	39 f4       	brne	.+14     	; 0x1f8 <printnumber_lcd+0x64>
 1ea:	41 15       	cp	r20, r1
 1ec:	51 05       	cpc	r21, r1
 1ee:	21 f4       	brne	.+8      	; 0x1f8 <printnumber_lcd+0x64>
		putchar_lcd(e+48);
 1f0:	80 5d       	subi	r24, 0xD0	; 208
 1f2:	0e 94 94 00 	call	0x128	; 0x128 <putchar_lcd>
 1f6:	44 c0       	rjmp	.+136    	; 0x280 <printnumber_lcd+0xec>
	}
	else if(a==0 && b==0 && c==0){
 1f8:	20 97       	sbiw	r28, 0x00	; 0
 1fa:	49 f4       	brne	.+18     	; 0x20e <printnumber_lcd+0x7a>
		putchar_lcd(d+48);
 1fc:	8e 2d       	mov	r24, r14
 1fe:	80 5d       	subi	r24, 0xD0	; 208
 200:	0e 94 94 00 	call	0x128	; 0x128 <putchar_lcd>
		putchar_lcd(e+48);
 204:	8f 2d       	mov	r24, r15
 206:	80 5d       	subi	r24, 0xD0	; 208
 208:	0e 94 94 00 	call	0x128	; 0x128 <putchar_lcd>
 20c:	39 c0       	rjmp	.+114    	; 0x280 <printnumber_lcd+0xec>
	}
	else if(a==0 && b==0){
		putchar_lcd(c+48);
 20e:	81 2f       	mov	r24, r17
 210:	80 5d       	subi	r24, 0xD0	; 208
 212:	0e 94 94 00 	call	0x128	; 0x128 <putchar_lcd>
		putchar_lcd(d+48);
 216:	8e 2d       	mov	r24, r14
 218:	80 5d       	subi	r24, 0xD0	; 208
 21a:	0e 94 94 00 	call	0x128	; 0x128 <putchar_lcd>
		putchar_lcd(e+48);
 21e:	8f 2d       	mov	r24, r15
 220:	80 5d       	subi	r24, 0xD0	; 208
 222:	0e 94 94 00 	call	0x128	; 0x128 <putchar_lcd>
 226:	2c c0       	rjmp	.+88     	; 0x280 <printnumber_lcd+0xec>
	}
	else if(a==0){
		putchar_lcd(b+48);
 228:	80 2f       	mov	r24, r16
 22a:	80 5d       	subi	r24, 0xD0	; 208
 22c:	0e 94 94 00 	call	0x128	; 0x128 <putchar_lcd>
	    putchar_lcd(c+48);
 230:	81 2f       	mov	r24, r17
 232:	80 5d       	subi	r24, 0xD0	; 208
 234:	0e 94 94 00 	call	0x128	; 0x128 <putchar_lcd>
		putchar_lcd(d+48);
 238:	8e 2d       	mov	r24, r14
 23a:	80 5d       	subi	r24, 0xD0	; 208
 23c:	0e 94 94 00 	call	0x128	; 0x128 <putchar_lcd>
		putchar_lcd(e+48);
 240:	8f 2d       	mov	r24, r15
 242:	80 5d       	subi	r24, 0xD0	; 208
 244:	0e 94 94 00 	call	0x128	; 0x128 <putchar_lcd>
 248:	1b c0       	rjmp	.+54     	; 0x280 <printnumber_lcd+0xec>
	}
	else if(a!=0 && b!=0 && c!=0 && d!=0){
 24a:	30 97       	sbiw	r30, 0x00	; 0
 24c:	c9 f0       	breq	.+50     	; 0x280 <printnumber_lcd+0xec>
 24e:	20 97       	sbiw	r28, 0x00	; 0
 250:	b9 f0       	breq	.+46     	; 0x280 <printnumber_lcd+0xec>
 252:	41 15       	cp	r20, r1
 254:	51 05       	cpc	r21, r1
 256:	a1 f0       	breq	.+40     	; 0x280 <printnumber_lcd+0xec>
		putchar_lcd(a+48);
 258:	82 2f       	mov	r24, r18
 25a:	80 5d       	subi	r24, 0xD0	; 208
 25c:	0e 94 94 00 	call	0x128	; 0x128 <putchar_lcd>
		putchar_lcd(b+48);
 260:	80 2f       	mov	r24, r16
 262:	80 5d       	subi	r24, 0xD0	; 208
 264:	0e 94 94 00 	call	0x128	; 0x128 <putchar_lcd>
	    putchar_lcd(c+48);
 268:	81 2f       	mov	r24, r17
 26a:	80 5d       	subi	r24, 0xD0	; 208
 26c:	0e 94 94 00 	call	0x128	; 0x128 <putchar_lcd>
		putchar_lcd(d+48);
 270:	8e 2d       	mov	r24, r14
 272:	80 5d       	subi	r24, 0xD0	; 208
 274:	0e 94 94 00 	call	0x128	; 0x128 <putchar_lcd>
		putchar_lcd(e+48);
 278:	8f 2d       	mov	r24, r15
 27a:	80 5d       	subi	r24, 0xD0	; 208
 27c:	0e 94 94 00 	call	0x128	; 0x128 <putchar_lcd>
	}
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	ff 90       	pop	r15
 28a:	ef 90       	pop	r14
 28c:	08 95       	ret

0000028e <putstr_lcd>:
putstr_lcd(unsigned char *str, unsigned int lenght){
 28e:	ef 92       	push	r14
 290:	ff 92       	push	r15
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	7b 01       	movw	r14, r22
	unsigned int i;
	for(i=0;i<lenght;i++){
 29c:	61 15       	cp	r22, r1
 29e:	71 05       	cpc	r23, r1
 2a0:	99 f0       	breq	.+38     	; 0x2c8 <putstr_lcd+0x3a>
 2a2:	08 2f       	mov	r16, r24
 2a4:	19 2f       	mov	r17, r25
 2a6:	c0 e0       	ldi	r28, 0x00	; 0
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
		if(*(str+i)>0){ 
 2aa:	f8 01       	movw	r30, r16
 2ac:	81 91       	ld	r24, Z+
 2ae:	8f 01       	movw	r16, r30
 2b0:	88 23       	and	r24, r24
 2b2:	19 f0       	breq	.+6      	; 0x2ba <putstr_lcd+0x2c>
			putchar_lcd(*(str+i));
 2b4:	0e 94 94 00 	call	0x128	; 0x128 <putchar_lcd>
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <putstr_lcd+0x32>
			}
		else putchar_lcd(0);	
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	0e 94 94 00 	call	0x128	; 0x128 <putchar_lcd>
		putchar_lcd(e+48);
	}
}
putstr_lcd(unsigned char *str, unsigned int lenght){
	unsigned int i;
	for(i=0;i<lenght;i++){
 2c0:	21 96       	adiw	r28, 0x01	; 1
 2c2:	ce 15       	cp	r28, r14
 2c4:	df 05       	cpc	r29, r15
 2c6:	88 f3       	brcs	.-30     	; 0x2aa <putstr_lcd+0x1c>
		if(*(str+i)>0){ 
			putchar_lcd(*(str+i));
			}
		else putchar_lcd(0);	
}
}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	ff 90       	pop	r15
 2d2:	ef 90       	pop	r14
 2d4:	08 95       	ret

000002d6 <__udivmodhi4>:
 2d6:	aa 1b       	sub	r26, r26
 2d8:	bb 1b       	sub	r27, r27
 2da:	51 e1       	ldi	r21, 0x11	; 17
 2dc:	07 c0       	rjmp	.+14     	; 0x2ec <__udivmodhi4_ep>

000002de <__udivmodhi4_loop>:
 2de:	aa 1f       	adc	r26, r26
 2e0:	bb 1f       	adc	r27, r27
 2e2:	a6 17       	cp	r26, r22
 2e4:	b7 07       	cpc	r27, r23
 2e6:	10 f0       	brcs	.+4      	; 0x2ec <__udivmodhi4_ep>
 2e8:	a6 1b       	sub	r26, r22
 2ea:	b7 0b       	sbc	r27, r23

000002ec <__udivmodhi4_ep>:
 2ec:	88 1f       	adc	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	5a 95       	dec	r21
 2f2:	a9 f7       	brne	.-22     	; 0x2de <__udivmodhi4_loop>
 2f4:	80 95       	com	r24
 2f6:	90 95       	com	r25
 2f8:	bc 01       	movw	r22, r24
 2fa:	cd 01       	movw	r24, r26
 2fc:	08 95       	ret

000002fe <_exit>:
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
