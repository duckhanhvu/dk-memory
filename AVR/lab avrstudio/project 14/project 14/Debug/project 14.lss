
project 14.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000069e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  0000069e  00000732  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800098  00800098  0000076a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000076c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000162  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006cf  00000000  00000000  0000108a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003b0  00000000  00000000  00001759  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000009e8  00000000  00000000  00001b09  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000130  00000000  00000000  000024f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001f8  00000000  00000000  00002624  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000032e  00000000  00000000  0000281c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000009b  00000000  00000000  00002b4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e9       	ldi	r26, 0x98	; 152
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3a       	cpi	r26, 0xA8	; 168
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  8a:	0c 94 4d 03 	jmp	0x69a	; 0x69a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KEY4x4_Ispush>:
return 0;
}
*/

unsigned char KEY4x4_Ispush(void){
if((bit_is_clear(control_pin,KEY4x4_COL1))|(bit_is_clear(control_pin,KEY4x4_COL2))|(bit_is_clear(control_pin,KEY4x4_COL3))|(bit_is_clear(control_pin,KEY4x4_COL4)))
  92:	60 b3       	in	r22, 0x10	; 16
  94:	50 b3       	in	r21, 0x10	; 16
  96:	30 b3       	in	r19, 0x10	; 16
  98:	20 b3       	in	r18, 0x10	; 16
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	36 ff       	sbrs	r19, 6
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <KEY4x4_Ispush+0x14>
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	33 27       	eor	r19, r19
  a8:	27 fd       	sbrc	r18, 7
  aa:	30 95       	com	r19
  ac:	20 95       	com	r18
  ae:	30 95       	com	r19
  b0:	22 27       	eor	r18, r18
  b2:	33 0f       	add	r19, r19
  b4:	22 1f       	adc	r18, r18
  b6:	33 27       	eor	r19, r19
  b8:	82 2b       	or	r24, r18
  ba:	93 2b       	or	r25, r19
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	64 fd       	sbrc	r22, 4
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	55 fd       	sbrc	r21, 5
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	42 2b       	or	r20, r18
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	9c 01       	movw	r18, r24
  ce:	24 2b       	or	r18, r20
  d0:	35 2b       	or	r19, r21
return 1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	21 15       	cp	r18, r1
  d6:	31 05       	cpc	r19, r1
  d8:	09 f4       	brne	.+2      	; 0xdc <KEY4x4_Ispush+0x4a>
  da:	80 e0       	ldi	r24, 0x00	; 0
else return 0;
}
  dc:	08 95       	ret

000000de <KEY4x4_checkROW>:
void KEY4x4_checkROW(unsigned char i){

setbit(control_port,KEY4x4_ROW1);
  de:	93 9a       	sbi	0x12, 3	; 18
setbit(control_port,KEY4x4_ROW2);
  e0:	92 9a       	sbi	0x12, 2	; 18
setbit(control_port,KEY4x4_ROW3);
  e2:	91 9a       	sbi	0x12, 1	; 18
setbit(control_port,KEY4x4_ROW4);
  e4:	90 9a       	sbi	0x12, 0	; 18
if(i==0){
  e6:	88 23       	and	r24, r24
  e8:	11 f4       	brne	.+4      	; 0xee <KEY4x4_checkROW+0x10>
    clearbit(control_port,KEY4x4_ROW1);
  ea:	93 98       	cbi	0x12, 3	; 18
  ec:	08 c0       	rjmp	.+16     	; 0xfe <KEY4x4_checkROW+0x20>
}
if(i==1){
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	11 f4       	brne	.+4      	; 0xf6 <KEY4x4_checkROW+0x18>
    clearbit(control_port,KEY4x4_ROW2);
  f2:	92 98       	cbi	0x12, 2	; 18
  f4:	08 95       	ret
}
if(i==2){
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	11 f4       	brne	.+4      	; 0xfe <KEY4x4_checkROW+0x20>
    clearbit(control_port,KEY4x4_ROW3);
  fa:	91 98       	cbi	0x12, 1	; 18
  fc:	08 95       	ret
}
if(i==3){
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	09 f4       	brne	.+2      	; 0x104 <KEY4x4_checkROW+0x26>
    clearbit(control_port,KEY4x4_ROW4);
 102:	90 98       	cbi	0x12, 0	; 18
 104:	08 95       	ret

00000106 <KEY4x4_Getkey>:
}   
}
unsigned char KEY4x4_Getkey(void){
 106:	1f 93       	push	r17
unsigned char i,button;
clearbit(control_port,KEY4x4_ROW1);
 108:	93 98       	cbi	0x12, 3	; 18
clearbit(control_port,KEY4x4_ROW2);
 10a:	92 98       	cbi	0x12, 2	; 18
clearbit(control_port,KEY4x4_ROW3);
 10c:	91 98       	cbi	0x12, 1	; 18
clearbit(control_port,KEY4x4_ROW4);
 10e:	90 98       	cbi	0x12, 0	; 18

if(KEY4x4_Ispush()){
 110:	0e 94 49 00 	call	0x92	; 0x92 <KEY4x4_Ispush>
 114:	88 23       	and	r24, r24
 116:	09 f4       	brne	.+2      	; 0x11a <KEY4x4_Getkey+0x14>
 118:	43 c0       	rjmp	.+134    	; 0x1a0 <KEY4x4_Getkey+0x9a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	81 ee       	ldi	r24, 0xE1	; 225
 11c:	94 e0       	ldi	r25, 0x04	; 4
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <KEY4x4_Getkey+0x18>
 122:	00 c0       	rjmp	.+0      	; 0x124 <KEY4x4_Getkey+0x1e>
 124:	00 00       	nop
_delay_ms(5);
if(KEY4x4_Ispush()){
 126:	0e 94 49 00 	call	0x92	; 0x92 <KEY4x4_Ispush>
 12a:	88 23       	and	r24, r24
 12c:	d9 f1       	breq	.+118    	; 0x1a4 <KEY4x4_Getkey+0x9e>
 12e:	10 e0       	ldi	r17, 0x00	; 0
for(i=0;i<4;i++){
KEY4x4_checkROW(i);
 130:	81 2f       	mov	r24, r17
 132:	0e 94 6f 00 	call	0xde	; 0xde <KEY4x4_checkROW>
if(bit_is_clear(control_pin,KEY4x4_COL1))  return KEY_4x4[i][0];
 136:	84 99       	sbic	0x10, 4	; 16
 138:	0a c0       	rjmp	.+20     	; 0x14e <KEY4x4_Getkey+0x48>
 13a:	e1 2f       	mov	r30, r17
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	ee 0f       	add	r30, r30
 144:	ff 1f       	adc	r31, r31
 146:	e0 5a       	subi	r30, 0xA0	; 160
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	80 81       	ld	r24, Z
 14c:	2c c0       	rjmp	.+88     	; 0x1a6 <KEY4x4_Getkey+0xa0>
if(bit_is_clear(control_pin,KEY4x4_COL2))  return KEY_4x4[i][1];
 14e:	85 99       	sbic	0x10, 5	; 16
 150:	0a c0       	rjmp	.+20     	; 0x166 <KEY4x4_Getkey+0x60>
 152:	e1 2f       	mov	r30, r17
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	ee 0f       	add	r30, r30
 15c:	ff 1f       	adc	r31, r31
 15e:	e0 5a       	subi	r30, 0xA0	; 160
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	81 81       	ldd	r24, Z+1	; 0x01
 164:	20 c0       	rjmp	.+64     	; 0x1a6 <KEY4x4_Getkey+0xa0>
if(bit_is_clear(control_pin,KEY4x4_COL3))  return KEY_4x4[i][2];
 166:	86 99       	sbic	0x10, 6	; 16
 168:	0a c0       	rjmp	.+20     	; 0x17e <KEY4x4_Getkey+0x78>
 16a:	e1 2f       	mov	r30, r17
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	e0 5a       	subi	r30, 0xA0	; 160
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	82 81       	ldd	r24, Z+2	; 0x02
 17c:	14 c0       	rjmp	.+40     	; 0x1a6 <KEY4x4_Getkey+0xa0>
if(bit_is_clear(control_pin,KEY4x4_COL4))  return KEY_4x4[i][3];
 17e:	87 99       	sbic	0x10, 7	; 16
 180:	0a c0       	rjmp	.+20     	; 0x196 <KEY4x4_Getkey+0x90>
 182:	e1 2f       	mov	r30, r17
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	ee 0f       	add	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	e0 5a       	subi	r30, 0xA0	; 160
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	83 81       	ldd	r24, Z+3	; 0x03
 194:	08 c0       	rjmp	.+16     	; 0x1a6 <KEY4x4_Getkey+0xa0>
clearbit(control_port,KEY4x4_ROW4);

if(KEY4x4_Ispush()){
_delay_ms(5);
if(KEY4x4_Ispush()){
for(i=0;i<4;i++){
 196:	1f 5f       	subi	r17, 0xFF	; 255
 198:	14 30       	cpi	r17, 0x04	; 4
 19a:	51 f6       	brne	.-108    	; 0x130 <KEY4x4_Getkey+0x2a>
if(bit_is_clear(control_pin,KEY4x4_COL3))  return KEY_4x4[i][2];
if(bit_is_clear(control_pin,KEY4x4_COL4))  return KEY_4x4[i][3];
}
}
}
return 0;
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <KEY4x4_Getkey+0xa0>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <KEY4x4_Getkey+0xa0>
 1a4:	80 e0       	ldi	r24, 0x00	; 0
}
 1a6:	1f 91       	pop	r17
 1a8:	08 95       	ret

000001aa <main>:
#include <avr/delay.h>
#include <avr/sfr_defs.h>

volatile long int x=0,y;
int main(void)
{
 1aa:	1f 93       	push	r17
DDRC=0x00;
 1ac:	14 ba       	out	0x14, r1	; 20
PORTC=0xFF;	
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	85 bb       	out	0x15, r24	; 21
	
PORTD=0xFF;
 1b2:	82 bb       	out	0x12, r24	; 18
DDRD=0x0F; 
 1b4:	8f e0       	ldi	r24, 0x0F	; 15
 1b6:	81 bb       	out	0x11, r24	; 17
TIMSK=(1<<TOIE0);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	89 bf       	out	0x39, r24	; 57
sei();
 1bc:	78 94       	sei
init_lcd();
 1be:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <init_lcd>
putstr_lcd("khanh",5);
_delay_ms(10000);
clear_lcd();
cursor_home();
*/	
movecursor(1,1);
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	0e 94 0f 02 	call	0x41e	; 0x41e <movecursor>
putstr_lcd("set van toc:",12);
 1ca:	80 e7       	ldi	r24, 0x70	; 112
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	6c e0       	ldi	r22, 0x0C	; 12
 1d0:	70 e0       	ldi	r23, 0x00	; 0
 1d2:	0e 94 b9 02 	call	0x572	; 0x572 <putstr_lcd>
movecursor(1,14);
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	6e e0       	ldi	r22, 0x0E	; 14
 1da:	0e 94 0f 02 	call	0x41e	; 0x41e <movecursor>
       int i;
       key =KEY4x4_Getkey();
	   
	   if(key){
		   TCNT0=0;
		   TCCR0=(1<<CS01)|(1<<CS00);
 1de:	13 e0       	ldi	r17, 0x03	; 3
movecursor(1,1);
putstr_lcd("set van toc:",12);
movecursor(1,14);
while(1){
       int i;
       key =KEY4x4_Getkey();
 1e0:	0e 94 83 00 	call	0x106	; 0x106 <KEY4x4_Getkey>
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	80 93 a0 00 	sts	0x00A0, r24
 1ee:	90 93 a1 00 	sts	0x00A1, r25
 1f2:	a0 93 a2 00 	sts	0x00A2, r26
 1f6:	b0 93 a3 00 	sts	0x00A3, r27
	   
	   if(key){
 1fa:	80 91 a0 00 	lds	r24, 0x00A0
 1fe:	90 91 a1 00 	lds	r25, 0x00A1
 202:	a0 91 a2 00 	lds	r26, 0x00A2
 206:	b0 91 a3 00 	lds	r27, 0x00A3
 20a:	00 97       	sbiw	r24, 0x00	; 0
 20c:	a1 05       	cpc	r26, r1
 20e:	b1 05       	cpc	r27, r1
 210:	91 f0       	breq	.+36     	; 0x236 <main+0x8c>
		   TCNT0=0;
 212:	12 be       	out	0x32, r1	; 50
		   TCCR0=(1<<CS01)|(1<<CS00);
 214:	13 bf       	out	0x33, r17	; 51
		   k=key;
 216:	80 91 a0 00 	lds	r24, 0x00A0
 21a:	90 91 a1 00 	lds	r25, 0x00A1
 21e:	a0 91 a2 00 	lds	r26, 0x00A2
 222:	b0 91 a3 00 	lds	r27, 0x00A3
 226:	80 93 9c 00 	sts	0x009C, r24
 22a:	90 93 9d 00 	sts	0x009D, r25
 22e:	a0 93 9e 00 	sts	0x009E, r26
 232:	b0 93 9f 00 	sts	0x009F, r27
	   }
	   if(bit_is_clear(PINC,2)){
 236:	9a 99       	sbic	0x13, 2	; 19
 238:	d3 cf       	rjmp	.-90     	; 0x1e0 <main+0x36>
		   break;
	   }	     
	   }
      
      //_delay_ms(1000);
	  clear_lcd();
 23a:	0e 94 08 02 	call	0x410	; 0x410 <clear_lcd>
	  movecursor(1,1);
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	0e 94 0f 02 	call	0x41e	; 0x41e <movecursor>
	  putstr_lcd("da nhap du lieu",15);
 246:	8d e7       	ldi	r24, 0x7D	; 125
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	6f e0       	ldi	r22, 0x0F	; 15
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	0e 94 b9 02 	call	0x572	; 0x572 <putstr_lcd>
	  movecursor(2,4);
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	64 e0       	ldi	r22, 0x04	; 4
 256:	0e 94 0f 02 	call	0x41e	; 0x41e <movecursor>
	  putstr_lcd("thanh cong",10);
 25a:	8d e8       	ldi	r24, 0x8D	; 141
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	6a e0       	ldi	r22, 0x0A	; 10
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	0e 94 b9 02 	call	0x572	; 0x572 <putstr_lcd>
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	98 e0       	ldi	r25, 0x08	; 8
 26a:	ad e3       	ldi	r26, 0x3D	; 61
 26c:	81 50       	subi	r24, 0x01	; 1
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	a0 40       	sbci	r26, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0xc2>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0xcc>
 276:	00 00       	nop
	  _delay_ms(20000);
	  clear_lcd();
 278:	0e 94 08 02 	call	0x410	; 0x410 <clear_lcd>
	  movecursor(2,1);
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	0e 94 0f 02 	call	0x41e	; 0x41e <movecursor>
	  printnumber_lcd(x);
 284:	60 91 98 00 	lds	r22, 0x0098
 288:	70 91 99 00 	lds	r23, 0x0099
 28c:	80 91 9a 00 	lds	r24, 0x009A
 290:	90 91 9b 00 	lds	r25, 0x009B
 294:	0e 94 31 02 	call	0x462	; 0x462 <printnumber_lcd>
	  	   	  
return 0;
}
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	1f 91       	pop	r17
 29e:	08 95       	ret

000002a0 <__vector_9>:
ISR(TIMER0_OVF_vect){
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	ef 92       	push	r14
 2ac:	ff 92       	push	r15
 2ae:	0f 93       	push	r16
 2b0:	1f 93       	push	r17
 2b2:	2f 93       	push	r18
 2b4:	3f 93       	push	r19
 2b6:	4f 93       	push	r20
 2b8:	5f 93       	push	r21
 2ba:	6f 93       	push	r22
 2bc:	7f 93       	push	r23
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	af 93       	push	r26
 2c4:	bf 93       	push	r27
 2c6:	ef 93       	push	r30
 2c8:	ff 93       	push	r31
	printnumber_lcd(k);
 2ca:	60 91 9c 00 	lds	r22, 0x009C
 2ce:	70 91 9d 00 	lds	r23, 0x009D
 2d2:	80 91 9e 00 	lds	r24, 0x009E
 2d6:	90 91 9f 00 	lds	r25, 0x009F
 2da:	0e 94 31 02 	call	0x462	; 0x462 <printnumber_lcd>
	x=x*10+k;
 2de:	60 91 98 00 	lds	r22, 0x0098
 2e2:	70 91 99 00 	lds	r23, 0x0099
 2e6:	80 91 9a 00 	lds	r24, 0x009A
 2ea:	90 91 9b 00 	lds	r25, 0x009B
 2ee:	e0 90 9c 00 	lds	r14, 0x009C
 2f2:	f0 90 9d 00 	lds	r15, 0x009D
 2f6:	00 91 9e 00 	lds	r16, 0x009E
 2fa:	10 91 9f 00 	lds	r17, 0x009F
 2fe:	2a e0       	ldi	r18, 0x0A	; 10
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__mulsi3>
 30a:	e6 0e       	add	r14, r22
 30c:	f7 1e       	adc	r15, r23
 30e:	08 1f       	adc	r16, r24
 310:	19 1f       	adc	r17, r25
 312:	e0 92 98 00 	sts	0x0098, r14
 316:	f0 92 99 00 	sts	0x0099, r15
 31a:	00 93 9a 00 	sts	0x009A, r16
 31e:	10 93 9b 00 	sts	0x009B, r17
	TCNT0=0;
 322:	12 be       	out	0x32, r1	; 50
	TCCR0=0;
 324:	13 be       	out	0x33, r1	; 51
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	bf 91       	pop	r27
 32c:	af 91       	pop	r26
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	7f 91       	pop	r23
 334:	6f 91       	pop	r22
 336:	5f 91       	pop	r21
 338:	4f 91       	pop	r20
 33a:	3f 91       	pop	r19
 33c:	2f 91       	pop	r18
 33e:	1f 91       	pop	r17
 340:	0f 91       	pop	r16
 342:	ff 90       	pop	r15
 344:	ef 90       	pop	r14
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti

00000350 <read_2Nib>:


char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
 350:	da 9a       	sbi	0x1b, 2	; 27
	DDR_DATA=0x0F;
 352:	8f e0       	ldi	r24, 0x0F	; 15
 354:	8a bb       	out	0x1a, r24	; 26
	HNib=DATA_input&0xF0;
 356:	89 b3       	in	r24, 0x19	; 25
	clearbit(CTRL,EN);
 358:	da 98       	cbi	0x1b, 2	; 27
	
	setbit(CTRL,EN);
 35a:	da 9a       	sbi	0x1b, 2	; 27
	LNib=DATA_input&0xF0;
 35c:	99 b3       	in	r25, 0x19	; 25
	clearbit(CTRL,EN);
 35e:	da 98       	cbi	0x1b, 2	; 27
	LNib>>=4;
 360:	92 95       	swap	r25
 362:	9f 70       	andi	r25, 0x0F	; 15
char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
	DDR_DATA=0x0F;
	HNib=DATA_input&0xF0;
 364:	80 7f       	andi	r24, 0xF0	; 240
	LNib=DATA_input&0xF0;
	clearbit(CTRL,EN);
	LNib>>=4;
	
	return (HNib|LNib);
}
 366:	89 2b       	or	r24, r25
 368:	08 95       	ret

0000036a <write_2Nib>:
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
 36a:	9b b3       	in	r25, 0x1b	; 27
 36c:	9f 70       	andi	r25, 0x0F	; 15
	HNib=data&0xF0;
 36e:	28 2f       	mov	r18, r24
 370:	20 7f       	andi	r18, 0xF0	; 240
	LNib=(data<<4)&0xF0;
	
	DATA_output=HNib|temp;
 372:	29 2b       	or	r18, r25
 374:	2b bb       	out	0x1b, r18	; 27
	setbit(CTRL,EN);
 376:	da 9a       	sbi	0x1b, 2	; 27
	clearbit(CTRL,EN);
 378:	da 98       	cbi	0x1b, 2	; 27
}
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
	HNib=data&0xF0;
	LNib=(data<<4)&0xF0;
 37a:	82 95       	swap	r24
 37c:	80 7f       	andi	r24, 0xF0	; 240
	
	DATA_output=HNib|temp;
	setbit(CTRL,EN);
	clearbit(CTRL,EN);
	
	DATA_output=LNib|temp;
 37e:	98 2b       	or	r25, r24
 380:	9b bb       	out	0x1b, r25	; 27
	setbit(CTRL,EN);
 382:	da 9a       	sbi	0x1b, 2	; 27
	clearbit(CTRL,EN);
 384:	da 98       	cbi	0x1b, 2	; 27
	
}
 386:	08 95       	ret

00000388 <wait_lcd>:
void wait_lcd(void){
 388:	0f 93       	push	r16
 38a:	1f 93       	push	r17
 38c:	df 93       	push	r29
 38e:	cf 93       	push	r28
 390:	0f 92       	push	r0
 392:	cd b7       	in	r28, 0x3d	; 61
 394:	de b7       	in	r29, 0x3e	; 62
	while(1){
     	clearbit(CTRL,RS);
		setbit(CTRL,RW);
		temp=read_2Nib();
		
		if(bit_is_clear(temp,7)) break;
 396:	8e 01       	movw	r16, r28
 398:	0f 5f       	subi	r16, 0xFF	; 255
 39a:	1f 4f       	sbci	r17, 0xFF	; 255
}
void wait_lcd(void){
	unsigned char temp;
	
	while(1){
     	clearbit(CTRL,RS);
 39c:	d8 98       	cbi	0x1b, 0	; 27
		setbit(CTRL,RW);
 39e:	d9 9a       	sbi	0x1b, 1	; 27
		temp=read_2Nib();
 3a0:	0e 94 a8 01 	call	0x350	; 0x350 <read_2Nib>
 3a4:	89 83       	std	Y+1, r24	; 0x01
		
		if(bit_is_clear(temp,7)) break;
 3a6:	f8 01       	movw	r30, r16
 3a8:	80 81       	ld	r24, Z
 3aa:	88 23       	and	r24, r24
 3ac:	bc f3       	brlt	.-18     	; 0x39c <wait_lcd+0x14>
	}
	clearbit(CTRL,RW);
 3ae:	d9 98       	cbi	0x1b, 1	; 27
	DDR_DATA=0xFF;
 3b0:	8f ef       	ldi	r24, 0xFF	; 255
 3b2:	8a bb       	out	0x1a, r24	; 26
	
}
 3b4:	0f 90       	pop	r0
 3b6:	cf 91       	pop	r28
 3b8:	df 91       	pop	r29
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	08 95       	ret

000003c0 <init_lcd>:

void init_lcd(){//uses mode 4 bit
	DDR_CTRL=0xFF;
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	8a bb       	out	0x1a, r24	; 26
	DDR_DATA=0xFF;
 3c4:	8a bb       	out	0x1a, r24	; 26
	clearbit(CTRL,RS);
 3c6:	d8 98       	cbi	0x1b, 0	; 27
	clearbit(CTRL,RW);
 3c8:	d9 98       	cbi	0x1b, 1	; 27
	clearbit(CTRL,EN);
 3ca:	da 98       	cbi	0x1b, 2	; 27
	
//function set	
	setbit(CTRL,EN);
 3cc:	da 9a       	sbi	0x1b, 2	; 27
	setbit(DATA_output,5);
 3ce:	dd 9a       	sbi	0x1b, 5	; 27
	clearbit(CTRL,EN);
 3d0:	da 98       	cbi	0x1b, 2	; 27
	wait_lcd();
 3d2:	0e 94 c4 01 	call	0x388	; 0x388 <wait_lcd>
	write_2Nib(0x28);
 3d6:	88 e2       	ldi	r24, 0x28	; 40
 3d8:	0e 94 b5 01 	call	0x36a	; 0x36a <write_2Nib>
	wait_lcd();
 3dc:	0e 94 c4 01 	call	0x388	; 0x388 <wait_lcd>
//display on/off control
    write_2Nib(0x0C);
 3e0:	8c e0       	ldi	r24, 0x0C	; 12
 3e2:	0e 94 b5 01 	call	0x36a	; 0x36a <write_2Nib>
	wait_lcd();
 3e6:	0e 94 c4 01 	call	0x388	; 0x388 <wait_lcd>

//entry mode set 
    
    write_2Nib(0x06);
 3ea:	86 e0       	ldi	r24, 0x06	; 6
 3ec:	0e 94 b5 01 	call	0x36a	; 0x36a <write_2Nib>
    wait_lcd();		
 3f0:	0e 94 c4 01 	call	0x388	; 0x388 <wait_lcd>
}
 3f4:	08 95       	ret

000003f6 <putchar_lcd>:
void putchar_lcd(unsigned char data){
	
	setbit(CTRL,RS);
 3f6:	d8 9a       	sbi	0x1b, 0	; 27
	write_2Nib(data);
 3f8:	0e 94 b5 01 	call	0x36a	; 0x36a <write_2Nib>
	wait_lcd();
 3fc:	0e 94 c4 01 	call	0x388	; 0x388 <wait_lcd>
}
 400:	08 95       	ret

00000402 <cursor_home>:
void cursor_home(){
	clearbit(CTRL,RS);
 402:	d8 98       	cbi	0x1b, 0	; 27
	write_2Nib(0x03);
 404:	83 e0       	ldi	r24, 0x03	; 3
 406:	0e 94 b5 01 	call	0x36a	; 0x36a <write_2Nib>
	wait_lcd();
 40a:	0e 94 c4 01 	call	0x388	; 0x388 <wait_lcd>
}
 40e:	08 95       	ret

00000410 <clear_lcd>:
void clear_lcd(){
	clearbit(CTRL,RS);
 410:	d8 98       	cbi	0x1b, 0	; 27
	write_2Nib(0x01);
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 b5 01 	call	0x36a	; 0x36a <write_2Nib>
	wait_lcd();
 418:	0e 94 c4 01 	call	0x388	; 0x388 <wait_lcd>
}
 41c:	08 95       	ret

0000041e <movecursor>:
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
	clearbit(CTRL,RS);
 41e:	d8 98       	cbi	0x1b, 0	; 27
	write_2Nib(0x01);
	wait_lcd();
}
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
 420:	82 95       	swap	r24
 422:	88 0f       	add	r24, r24
 424:	88 0f       	add	r24, r24
 426:	80 7c       	andi	r24, 0xC0	; 192
 428:	86 0f       	add	r24, r22
	clearbit(CTRL,RS);
	write_2Nib(x);
 42a:	81 5c       	subi	r24, 0xC1	; 193
 42c:	0e 94 b5 01 	call	0x36a	; 0x36a <write_2Nib>
	wait_lcd();
 430:	0e 94 c4 01 	call	0x388	; 0x388 <wait_lcd>
}
 434:	08 95       	ret

00000436 <count_number>:
int count_number(unsigned int number){
 436:	bc 01       	movw	r22, r24
    } 
	else dem=dem+1; 
	return dem;
*/
		int dem=0;
	while(number){
 438:	00 97       	sbiw	r24, 0x00	; 0
 43a:	71 f0       	breq	.+28     	; 0x458 <count_number+0x22>
	}	
    } 
	else dem=dem+1; 
	return dem;
*/
		int dem=0;
 43c:	20 e0       	ldi	r18, 0x00	; 0
 43e:	30 e0       	ldi	r19, 0x00	; 0
	while(number){
		number=number/10;
 440:	ea e0       	ldi	r30, 0x0A	; 10
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	cb 01       	movw	r24, r22
 446:	bf 01       	movw	r22, r30
 448:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__udivmodhi4>
		dem++;
 44c:	2f 5f       	subi	r18, 0xFF	; 255
 44e:	3f 4f       	sbci	r19, 0xFF	; 255
    } 
	else dem=dem+1; 
	return dem;
*/
		int dem=0;
	while(number){
 450:	61 15       	cp	r22, r1
 452:	71 05       	cpc	r23, r1
 454:	b9 f7       	brne	.-18     	; 0x444 <count_number+0xe>
 456:	02 c0       	rjmp	.+4      	; 0x45c <count_number+0x26>
	}	
    } 
	else dem=dem+1; 
	return dem;
*/
		int dem=0;
 458:	20 e0       	ldi	r18, 0x00	; 0
 45a:	30 e0       	ldi	r19, 0x00	; 0
	while(number){
		number=number/10;
		dem++;
	}
	return dem;
}
 45c:	82 2f       	mov	r24, r18
 45e:	93 2f       	mov	r25, r19
 460:	08 95       	ret

00000462 <printnumber_lcd>:
void printnumber_lcd(long int number){
 462:	af 92       	push	r10
 464:	bf 92       	push	r11
 466:	cf 92       	push	r12
 468:	df 92       	push	r13
 46a:	ef 92       	push	r14
 46c:	ff 92       	push	r15
 46e:	1f 93       	push	r17
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
		temp=temp/10;
		putchar_lcd(a+48);
	}*/
		
	int a,b,c,d,e;
	    a=number/10000;
 474:	20 e1       	ldi	r18, 0x10	; 16
 476:	37 e2       	ldi	r19, 0x27	; 39
 478:	40 e0       	ldi	r20, 0x00	; 0
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	0e 94 10 03 	call	0x620	; 0x620 <__divmodsi4>
 480:	e9 01       	movw	r28, r18
	    //putchar_lcd(a+48);
		number=number%10000;
	    b=number/1000;
 482:	28 ee       	ldi	r18, 0xE8	; 232
 484:	33 e0       	ldi	r19, 0x03	; 3
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	50 e0       	ldi	r21, 0x00	; 0
 48a:	0e 94 10 03 	call	0x620	; 0x620 <__divmodsi4>
 48e:	59 01       	movw	r10, r18
	    //putchar_lcd(b+48);
	    number=number%1000;
	    c=number/100;
 490:	24 e6       	ldi	r18, 0x64	; 100
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	0e 94 10 03 	call	0x620	; 0x620 <__divmodsi4>
 49c:	79 01       	movw	r14, r18
	    //putchar_lcd(c+48);	
	    number=number%100;
	    d=number/10;
 49e:	2a e0       	ldi	r18, 0x0A	; 10
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	40 e0       	ldi	r20, 0x00	; 0
 4a4:	50 e0       	ldi	r21, 0x00	; 0
 4a6:	0e 94 10 03 	call	0x620	; 0x620 <__divmodsi4>
 4aa:	69 01       	movw	r12, r18
	    //putchar_lcd(d+48);	
	    e=number%10;
 4ac:	16 2f       	mov	r17, r22
	   // putchar_lcd(e+48);
    if(a==0 && b==0 && c==0 && d==0){
 4ae:	20 97       	sbiw	r28, 0x00	; 0
 4b0:	c1 f5       	brne	.+112    	; 0x522 <printnumber_lcd+0xc0>
 4b2:	a1 14       	cp	r10, r1
 4b4:	b1 04       	cpc	r11, r1
 4b6:	21 f5       	brne	.+72     	; 0x500 <printnumber_lcd+0x9e>
 4b8:	e1 14       	cp	r14, r1
 4ba:	f1 04       	cpc	r15, r1
 4bc:	41 f4       	brne	.+16     	; 0x4ce <printnumber_lcd+0x6c>
 4be:	21 15       	cp	r18, r1
 4c0:	31 05       	cpc	r19, r1
 4c2:	29 f4       	brne	.+10     	; 0x4ce <printnumber_lcd+0x6c>
		putchar_lcd(e+48);
 4c4:	86 2f       	mov	r24, r22
 4c6:	80 5d       	subi	r24, 0xD0	; 208
 4c8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <putchar_lcd>
 4cc:	48 c0       	rjmp	.+144    	; 0x55e <printnumber_lcd+0xfc>
	}
	else if(a==0 && b==0 && c==0){
 4ce:	e1 14       	cp	r14, r1
 4d0:	f1 04       	cpc	r15, r1
 4d2:	49 f4       	brne	.+18     	; 0x4e6 <printnumber_lcd+0x84>
		putchar_lcd(d+48);
 4d4:	8c 2d       	mov	r24, r12
 4d6:	80 5d       	subi	r24, 0xD0	; 208
 4d8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <putchar_lcd>
		putchar_lcd(e+48);
 4dc:	81 2f       	mov	r24, r17
 4de:	80 5d       	subi	r24, 0xD0	; 208
 4e0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <putchar_lcd>
 4e4:	3c c0       	rjmp	.+120    	; 0x55e <printnumber_lcd+0xfc>
	}
	else if(a==0 && b==0){
		putchar_lcd(c+48);
 4e6:	8e 2d       	mov	r24, r14
 4e8:	80 5d       	subi	r24, 0xD0	; 208
 4ea:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <putchar_lcd>
		putchar_lcd(d+48);
 4ee:	8c 2d       	mov	r24, r12
 4f0:	80 5d       	subi	r24, 0xD0	; 208
 4f2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <putchar_lcd>
		putchar_lcd(e+48);
 4f6:	81 2f       	mov	r24, r17
 4f8:	80 5d       	subi	r24, 0xD0	; 208
 4fa:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <putchar_lcd>
 4fe:	2f c0       	rjmp	.+94     	; 0x55e <printnumber_lcd+0xfc>
	}
	else if(a==0){
		putchar_lcd(b+48);
 500:	8a 2d       	mov	r24, r10
 502:	80 5d       	subi	r24, 0xD0	; 208
 504:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <putchar_lcd>
	    putchar_lcd(c+48);
 508:	8e 2d       	mov	r24, r14
 50a:	80 5d       	subi	r24, 0xD0	; 208
 50c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <putchar_lcd>
		putchar_lcd(d+48);
 510:	8c 2d       	mov	r24, r12
 512:	80 5d       	subi	r24, 0xD0	; 208
 514:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <putchar_lcd>
		putchar_lcd(e+48);
 518:	81 2f       	mov	r24, r17
 51a:	80 5d       	subi	r24, 0xD0	; 208
 51c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <putchar_lcd>
 520:	1e c0       	rjmp	.+60     	; 0x55e <printnumber_lcd+0xfc>
	}
	else if(a!=0 && b!=0 && c!=0 && d!=0){
 522:	a1 14       	cp	r10, r1
 524:	b1 04       	cpc	r11, r1
 526:	d9 f0       	breq	.+54     	; 0x55e <printnumber_lcd+0xfc>
 528:	e1 14       	cp	r14, r1
 52a:	f1 04       	cpc	r15, r1
 52c:	c1 f0       	breq	.+48     	; 0x55e <printnumber_lcd+0xfc>
 52e:	21 15       	cp	r18, r1
 530:	31 05       	cpc	r19, r1
 532:	a9 f0       	breq	.+42     	; 0x55e <printnumber_lcd+0xfc>
		putchar_lcd(a+48);
 534:	9e 01       	movw	r18, r28
 536:	20 5d       	subi	r18, 0xD0	; 208
 538:	82 2f       	mov	r24, r18
 53a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <putchar_lcd>
		putchar_lcd(b+48);
 53e:	8a 2d       	mov	r24, r10
 540:	80 5d       	subi	r24, 0xD0	; 208
 542:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <putchar_lcd>
	    putchar_lcd(c+48);
 546:	8e 2d       	mov	r24, r14
 548:	80 5d       	subi	r24, 0xD0	; 208
 54a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <putchar_lcd>
		putchar_lcd(d+48);
 54e:	8c 2d       	mov	r24, r12
 550:	80 5d       	subi	r24, 0xD0	; 208
 552:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <putchar_lcd>
		putchar_lcd(e+48);
 556:	81 2f       	mov	r24, r17
 558:	80 5d       	subi	r24, 0xD0	; 208
 55a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <putchar_lcd>
	}
	
			
}
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	ff 90       	pop	r15
 566:	ef 90       	pop	r14
 568:	df 90       	pop	r13
 56a:	cf 90       	pop	r12
 56c:	bf 90       	pop	r11
 56e:	af 90       	pop	r10
 570:	08 95       	ret

00000572 <putstr_lcd>:
putstr_lcd(unsigned char *str, unsigned int lenght){
 572:	ef 92       	push	r14
 574:	ff 92       	push	r15
 576:	0f 93       	push	r16
 578:	1f 93       	push	r17
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
 57e:	7b 01       	movw	r14, r22
	unsigned int i;
	for(i=0;i<lenght;i++){
 580:	61 15       	cp	r22, r1
 582:	71 05       	cpc	r23, r1
 584:	99 f0       	breq	.+38     	; 0x5ac <putstr_lcd+0x3a>
 586:	08 2f       	mov	r16, r24
 588:	19 2f       	mov	r17, r25
 58a:	c0 e0       	ldi	r28, 0x00	; 0
 58c:	d0 e0       	ldi	r29, 0x00	; 0
		if(*(str+i)>0){ 
 58e:	f8 01       	movw	r30, r16
 590:	81 91       	ld	r24, Z+
 592:	8f 01       	movw	r16, r30
 594:	88 23       	and	r24, r24
 596:	19 f0       	breq	.+6      	; 0x59e <putstr_lcd+0x2c>
			putchar_lcd(*(str+i));
 598:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <putchar_lcd>
 59c:	03 c0       	rjmp	.+6      	; 0x5a4 <putstr_lcd+0x32>
			}
		else putchar_lcd(0);	
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <putchar_lcd>
	
			
}
putstr_lcd(unsigned char *str, unsigned int lenght){
	unsigned int i;
	for(i=0;i<lenght;i++){
 5a4:	21 96       	adiw	r28, 0x01	; 1
 5a6:	ce 15       	cp	r28, r14
 5a8:	df 05       	cpc	r29, r15
 5aa:	88 f3       	brcs	.-30     	; 0x58e <putstr_lcd+0x1c>
		if(*(str+i)>0){ 
			putchar_lcd(*(str+i));
			}
		else putchar_lcd(0);	
}
}
 5ac:	df 91       	pop	r29
 5ae:	cf 91       	pop	r28
 5b0:	1f 91       	pop	r17
 5b2:	0f 91       	pop	r16
 5b4:	ff 90       	pop	r15
 5b6:	ef 90       	pop	r14
 5b8:	08 95       	ret

000005ba <__mulsi3>:
 5ba:	62 9f       	mul	r22, r18
 5bc:	d0 01       	movw	r26, r0
 5be:	73 9f       	mul	r23, r19
 5c0:	f0 01       	movw	r30, r0
 5c2:	82 9f       	mul	r24, r18
 5c4:	e0 0d       	add	r30, r0
 5c6:	f1 1d       	adc	r31, r1
 5c8:	64 9f       	mul	r22, r20
 5ca:	e0 0d       	add	r30, r0
 5cc:	f1 1d       	adc	r31, r1
 5ce:	92 9f       	mul	r25, r18
 5d0:	f0 0d       	add	r31, r0
 5d2:	83 9f       	mul	r24, r19
 5d4:	f0 0d       	add	r31, r0
 5d6:	74 9f       	mul	r23, r20
 5d8:	f0 0d       	add	r31, r0
 5da:	65 9f       	mul	r22, r21
 5dc:	f0 0d       	add	r31, r0
 5de:	99 27       	eor	r25, r25
 5e0:	72 9f       	mul	r23, r18
 5e2:	b0 0d       	add	r27, r0
 5e4:	e1 1d       	adc	r30, r1
 5e6:	f9 1f       	adc	r31, r25
 5e8:	63 9f       	mul	r22, r19
 5ea:	b0 0d       	add	r27, r0
 5ec:	e1 1d       	adc	r30, r1
 5ee:	f9 1f       	adc	r31, r25
 5f0:	bd 01       	movw	r22, r26
 5f2:	cf 01       	movw	r24, r30
 5f4:	11 24       	eor	r1, r1
 5f6:	08 95       	ret

000005f8 <__udivmodhi4>:
 5f8:	aa 1b       	sub	r26, r26
 5fa:	bb 1b       	sub	r27, r27
 5fc:	51 e1       	ldi	r21, 0x11	; 17
 5fe:	07 c0       	rjmp	.+14     	; 0x60e <__udivmodhi4_ep>

00000600 <__udivmodhi4_loop>:
 600:	aa 1f       	adc	r26, r26
 602:	bb 1f       	adc	r27, r27
 604:	a6 17       	cp	r26, r22
 606:	b7 07       	cpc	r27, r23
 608:	10 f0       	brcs	.+4      	; 0x60e <__udivmodhi4_ep>
 60a:	a6 1b       	sub	r26, r22
 60c:	b7 0b       	sbc	r27, r23

0000060e <__udivmodhi4_ep>:
 60e:	88 1f       	adc	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	5a 95       	dec	r21
 614:	a9 f7       	brne	.-22     	; 0x600 <__udivmodhi4_loop>
 616:	80 95       	com	r24
 618:	90 95       	com	r25
 61a:	bc 01       	movw	r22, r24
 61c:	cd 01       	movw	r24, r26
 61e:	08 95       	ret

00000620 <__divmodsi4>:
 620:	97 fb       	bst	r25, 7
 622:	09 2e       	mov	r0, r25
 624:	05 26       	eor	r0, r21
 626:	0e d0       	rcall	.+28     	; 0x644 <__divmodsi4_neg1>
 628:	57 fd       	sbrc	r21, 7
 62a:	04 d0       	rcall	.+8      	; 0x634 <__divmodsi4_neg2>
 62c:	14 d0       	rcall	.+40     	; 0x656 <__udivmodsi4>
 62e:	0a d0       	rcall	.+20     	; 0x644 <__divmodsi4_neg1>
 630:	00 1c       	adc	r0, r0
 632:	38 f4       	brcc	.+14     	; 0x642 <__divmodsi4_exit>

00000634 <__divmodsi4_neg2>:
 634:	50 95       	com	r21
 636:	40 95       	com	r20
 638:	30 95       	com	r19
 63a:	21 95       	neg	r18
 63c:	3f 4f       	sbci	r19, 0xFF	; 255
 63e:	4f 4f       	sbci	r20, 0xFF	; 255
 640:	5f 4f       	sbci	r21, 0xFF	; 255

00000642 <__divmodsi4_exit>:
 642:	08 95       	ret

00000644 <__divmodsi4_neg1>:
 644:	f6 f7       	brtc	.-4      	; 0x642 <__divmodsi4_exit>
 646:	90 95       	com	r25
 648:	80 95       	com	r24
 64a:	70 95       	com	r23
 64c:	61 95       	neg	r22
 64e:	7f 4f       	sbci	r23, 0xFF	; 255
 650:	8f 4f       	sbci	r24, 0xFF	; 255
 652:	9f 4f       	sbci	r25, 0xFF	; 255
 654:	08 95       	ret

00000656 <__udivmodsi4>:
 656:	a1 e2       	ldi	r26, 0x21	; 33
 658:	1a 2e       	mov	r1, r26
 65a:	aa 1b       	sub	r26, r26
 65c:	bb 1b       	sub	r27, r27
 65e:	fd 01       	movw	r30, r26
 660:	0d c0       	rjmp	.+26     	; 0x67c <__udivmodsi4_ep>

00000662 <__udivmodsi4_loop>:
 662:	aa 1f       	adc	r26, r26
 664:	bb 1f       	adc	r27, r27
 666:	ee 1f       	adc	r30, r30
 668:	ff 1f       	adc	r31, r31
 66a:	a2 17       	cp	r26, r18
 66c:	b3 07       	cpc	r27, r19
 66e:	e4 07       	cpc	r30, r20
 670:	f5 07       	cpc	r31, r21
 672:	20 f0       	brcs	.+8      	; 0x67c <__udivmodsi4_ep>
 674:	a2 1b       	sub	r26, r18
 676:	b3 0b       	sbc	r27, r19
 678:	e4 0b       	sbc	r30, r20
 67a:	f5 0b       	sbc	r31, r21

0000067c <__udivmodsi4_ep>:
 67c:	66 1f       	adc	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	88 1f       	adc	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	1a 94       	dec	r1
 686:	69 f7       	brne	.-38     	; 0x662 <__udivmodsi4_loop>
 688:	60 95       	com	r22
 68a:	70 95       	com	r23
 68c:	80 95       	com	r24
 68e:	90 95       	com	r25
 690:	9b 01       	movw	r18, r22
 692:	ac 01       	movw	r20, r24
 694:	bd 01       	movw	r22, r26
 696:	cf 01       	movw	r24, r30
 698:	08 95       	ret

0000069a <_exit>:
 69a:	f8 94       	cli

0000069c <__stop_program>:
 69c:	ff cf       	rjmp	.-2      	; 0x69c <__stop_program>
