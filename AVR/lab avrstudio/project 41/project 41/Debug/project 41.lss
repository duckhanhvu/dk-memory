
project 41.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000004f6  0000056a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000023b  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000086e  00000000  00000000  00000f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002c5  00000000  00000000  000017b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008e4  00000000  00000000  00001a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00002360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f4  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000040d  00000000  00000000  00002864  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000006c  00000000  00000000  00002c71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 88 01 	call	0x310	; 0x310 <main>
  7a:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <I2C_Init>:
volatile uint8_t  ngay=3, thang=5, nam=2016, gio=3, phut=20, giay=30; 
void I2C_Init()
// at 16 MHz, the SCL frequency will be 16/(16+2(TWBR)), assuming prescalar of 0.
// so for 100KHz SCL, TWBR = ((F_CPU/F_SCL)-16)/2 = ((16/0.1)-16)/2 = 144/2 = 72.
{
TWSR = 0; // set prescalar to zero
  82:	11 b8       	out	0x01, r1	; 1
TWBR = ((F_CPU/F_SCL)-16)/2; // set SCL frequency in TWI bit register
  84:	80 e2       	ldi	r24, 0x20	; 32
  86:	80 b9       	out	0x00, r24	; 0
}
  88:	08 95       	ret

0000008a <Dec_BCD>:
uint8_t Dec_BCD(uint8_t Dec){
	uint8_t temp,H,L;
	L=(Dec%10);
	H=(Dec/10)<<4;
  8a:	6a e0       	ldi	r22, 0x0A	; 10
  8c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__udivmodqi4>
  90:	82 95       	swap	r24
  92:	80 7f       	andi	r24, 0xF0	; 240
	
	return (H+L);
}
  94:	89 0f       	add	r24, r25
  96:	08 95       	ret

00000098 <BCD_Dec>:

uint8_t BCD_Dec(uint8_t BCD){
	uint8_t L,H;
	L=BCD&0x0F;
	H=(BCD>>4)*10;
  98:	98 2f       	mov	r25, r24
  9a:	92 95       	swap	r25
  9c:	9f 70       	andi	r25, 0x0F	; 15
  9e:	99 0f       	add	r25, r25
  a0:	29 2f       	mov	r18, r25
  a2:	22 0f       	add	r18, r18
  a4:	22 0f       	add	r18, r18
  a6:	92 0f       	add	r25, r18
	return (H+L);
}

uint8_t BCD_Dec(uint8_t BCD){
	uint8_t L,H;
	L=BCD&0x0F;
  a8:	8f 70       	andi	r24, 0x0F	; 15
	H=(BCD>>4)*10;
	return (H+L);	
}
  aa:	89 0f       	add	r24, r25
  ac:	08 95       	ret

000000ae <I2C_Detect>:
byte I2C_Detect(byte addr)
// look for device at specified address; return 1=found, 0=not found
{
TWCR = TW_START; // send start condition
  ae:	94 ea       	ldi	r25, 0xA4	; 164
  b0:	96 bf       	out	0x36, r25	; 54
while (!TW_READY); // wait
  b2:	06 b6       	in	r0, 0x36	; 54
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <I2C_Detect+0x4>
TWDR = addr; // load device's bus address
  b8:	83 b9       	out	0x03, r24	; 3
TWCR = TW_SEND; // and send it
  ba:	84 e8       	ldi	r24, 0x84	; 132
  bc:	86 bf       	out	0x36, r24	; 54
while (!TW_READY); // wait
  be:	06 b6       	in	r0, 0x36	; 54
  c0:	07 fe       	sbrs	r0, 7
  c2:	fd cf       	rjmp	.-6      	; 0xbe <I2C_Detect+0x10>
return (TW_STATUS==0x18); // return 1 if found; 0 otherwise
  c4:	91 b1       	in	r25, 0x01	; 1
  c6:	98 7f       	andi	r25, 0xF8	; 248
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	98 31       	cpi	r25, 0x18	; 24
  cc:	09 f0       	breq	.+2      	; 0xd0 <I2C_Detect+0x22>
  ce:	80 e0       	ldi	r24, 0x00	; 0
}
  d0:	08 95       	ret

000000d2 <I2C_Start>:

void I2C_Start (byte slaveAddr)
{
I2C_Detect(slaveAddr);
  d2:	0e 94 57 00 	call	0xae	; 0xae <I2C_Detect>
}
  d6:	08 95       	ret

000000d8 <I2C_FindDevice>:

byte I2C_FindDevice(byte start)
// returns with address of first device found; 0=not found
{
  d8:	1f 93       	push	r17
for (byte addr=start;addr<0xFF;addr++) // search all 256 addresses
  da:	8f 3f       	cpi	r24, 0xFF	; 255
  dc:	59 f0       	breq	.+22     	; 0xf4 <I2C_FindDevice+0x1c>
  de:	18 2f       	mov	r17, r24
{
if (I2C_Detect(addr)) // I2C detected?
  e0:	81 2f       	mov	r24, r17
  e2:	0e 94 57 00 	call	0xae	; 0xae <I2C_Detect>
  e6:	88 23       	and	r24, r24
  e8:	31 f4       	brne	.+12     	; 0xf6 <I2C_FindDevice+0x1e>
}

byte I2C_FindDevice(byte start)
// returns with address of first device found; 0=not found
{
for (byte addr=start;addr<0xFF;addr++) // search all 256 addresses
  ea:	1f 5f       	subi	r17, 0xFF	; 255
  ec:	1f 3f       	cpi	r17, 0xFF	; 255
  ee:	c1 f7       	brne	.-16     	; 0xe0 <I2C_FindDevice+0x8>
{
if (I2C_Detect(addr)) // I2C detected?
return addr; // leave as soon as one is found
}
return 0; // none detected, so return 0.
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <I2C_FindDevice+0x1e>
  f4:	10 e0       	ldi	r17, 0x00	; 0
}
  f6:	81 2f       	mov	r24, r17
  f8:	1f 91       	pop	r17
  fa:	08 95       	ret

000000fc <I2C_Write>:

byte I2C_Write (byte data) // sends a data byte to slave
{
TWDR = data; // load data to be sent
  fc:	83 b9       	out	0x03, r24	; 3
TWCR = TW_SEND; // and send it
  fe:	84 e8       	ldi	r24, 0x84	; 132
 100:	86 bf       	out	0x36, r24	; 54
while (!TW_READY); // wait
 102:	06 b6       	in	r0, 0x36	; 54
 104:	07 fe       	sbrs	r0, 7
 106:	fd cf       	rjmp	.-6      	; 0x102 <I2C_Write+0x6>
return (TW_STATUS!=0x28);
 108:	91 b1       	in	r25, 0x01	; 1
 10a:	98 7f       	andi	r25, 0xF8	; 248
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	98 32       	cpi	r25, 0x28	; 40
 110:	09 f4       	brne	.+2      	; 0x114 <I2C_Write+0x18>
 112:	80 e0       	ldi	r24, 0x00	; 0
}
 114:	08 95       	ret

00000116 <I2C_ReadACK>:
byte I2C_ReadACK () // reads a data byte from slave
{
TWCR = TW_ACK; // ack = will read more data
 116:	84 ec       	ldi	r24, 0xC4	; 196
 118:	86 bf       	out	0x36, r24	; 54
while (!TW_READY); // wait
 11a:	06 b6       	in	r0, 0x36	; 54
 11c:	07 fe       	sbrs	r0, 7
 11e:	fd cf       	rjmp	.-6      	; 0x11a <I2C_ReadACK+0x4>
return TWDR;
 120:	83 b1       	in	r24, 0x03	; 3
//return (TW_STATUS!=0x28);
}
 122:	08 95       	ret

00000124 <I2C_ReadNACK>:
byte I2C_ReadNACK () // reads a data byte from slave
{
TWCR = TW_NACK; // nack = not reading more data
 124:	84 e8       	ldi	r24, 0x84	; 132
 126:	86 bf       	out	0x36, r24	; 54
while (!TW_READY); // wait
 128:	06 b6       	in	r0, 0x36	; 54
 12a:	07 fe       	sbrs	r0, 7
 12c:	fd cf       	rjmp	.-6      	; 0x128 <I2C_ReadNACK+0x4>
return TWDR;
 12e:	83 b1       	in	r24, 0x03	; 3
//return (TW_STATUS!=0x28);
}
 130:	08 95       	ret

00000132 <I2C_WriteRegister>:


void I2C_WriteRegister(byte busAddr, byte deviceRegister, byte data){
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	06 2f       	mov	r16, r22
 138:	14 2f       	mov	r17, r20
I2C_Start(busAddr); // send bus address
 13a:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_Start>
I2C_Write(deviceRegister); // first byte = device register address
 13e:	80 2f       	mov	r24, r16
 140:	0e 94 7e 00 	call	0xfc	; 0xfc <I2C_Write>
I2C_Write(data); // second byte = data for device register
 144:	81 2f       	mov	r24, r17
 146:	0e 94 7e 00 	call	0xfc	; 0xfc <I2C_Write>
I2C_Stop();
 14a:	84 e9       	ldi	r24, 0x94	; 148
 14c:	86 bf       	out	0x36, r24	; 54
}
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	08 95       	ret

00000154 <I2C_ReadRegister>:

byte I2C_ReadRegister(byte busAddr, byte deviceRegister)
{
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	18 2f       	mov	r17, r24
 15a:	06 2f       	mov	r16, r22
byte data = 0;
I2C_Start(busAddr); // send device address
 15c:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_Start>
I2C_Write(deviceRegister); // set register pointer
 160:	80 2f       	mov	r24, r16
 162:	0e 94 7e 00 	call	0xfc	; 0xfc <I2C_Write>
I2C_Start(busAddr+READ); // restart as a read operation
 166:	81 2f       	mov	r24, r17
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_Start>
data = I2C_ReadNACK(); // read the register data
 16e:	0e 94 92 00 	call	0x124	; 0x124 <I2C_ReadNACK>
I2C_Stop(); // stop
 172:	94 e9       	ldi	r25, 0x94	; 148
 174:	96 bf       	out	0x36, r25	; 54
return data;
}
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <DS1307_GetTime>:

void DS1307_GetTime()
// returns hours, minutes, and seconds in BCD format
{
gio = I2C_ReadRegister(DS1307,HOURS_REGISTER);
 17c:	80 ed       	ldi	r24, 0xD0	; 208
 17e:	62 e0       	ldi	r22, 0x02	; 2
 180:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_ReadRegister>
 184:	80 93 63 00 	sts	0x0063, r24
phut = I2C_ReadRegister(DS1307,MINUTES_REGISTER);
 188:	80 ed       	ldi	r24, 0xD0	; 208
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_ReadRegister>
 190:	80 93 64 00 	sts	0x0064, r24
giay = I2C_ReadRegister(DS1307,SECONDS_REGISTER);
 194:	80 ed       	ldi	r24, 0xD0	; 208
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_ReadRegister>
 19c:	80 93 65 00 	sts	0x0065, r24
if (gio & 0x40) // 12hr mode:
 1a0:	80 91 63 00 	lds	r24, 0x0063
 1a4:	86 ff       	sbrs	r24, 6
 1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <DS1307_GetTime+0x38>
gio &= 0x1F; // use bottom 5 bits (pm bit = temp & 0x20)
 1a8:	80 91 63 00 	lds	r24, 0x0063
 1ac:	8f 71       	andi	r24, 0x1F	; 31
 1ae:	80 93 63 00 	sts	0x0063, r24
 1b2:	08 95       	ret
else gio &= 0x3F; // 24hr mode: use bottom 6 bits
 1b4:	80 91 63 00 	lds	r24, 0x0063
 1b8:	8f 73       	andi	r24, 0x3F	; 63
 1ba:	80 93 63 00 	sts	0x0063, r24
 1be:	08 95       	ret

000001c0 <DS1307_GetDate>:
}

void DS1307_GetDate()
// returns months, days, and years in BCD format
{
thang = I2C_ReadRegister(DS1307,MONTHS_REGISTER);
 1c0:	80 ed       	ldi	r24, 0xD0	; 208
 1c2:	65 e0       	ldi	r22, 0x05	; 5
 1c4:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_ReadRegister>
 1c8:	80 93 61 00 	sts	0x0061, r24
ngay = I2C_ReadRegister(DS1307,DAYS_REGISTER);
 1cc:	80 ed       	ldi	r24, 0xD0	; 208
 1ce:	64 e0       	ldi	r22, 0x04	; 4
 1d0:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_ReadRegister>
 1d4:	80 93 60 00 	sts	0x0060, r24
nam = I2C_ReadRegister(DS1307,YEARS_REGISTER);
 1d8:	80 ed       	ldi	r24, 0xD0	; 208
 1da:	66 e0       	ldi	r22, 0x06	; 6
 1dc:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_ReadRegister>
 1e0:	80 93 62 00 	sts	0x0062, r24
}
 1e4:	08 95       	ret

000001e6 <SetTimeDate>:

void SetTimeDate()
// simple, hard-coded way to set the date.
{
I2C_WriteRegister(DS1307,MONTHS_REGISTER, Dec_BCD(thang));
 1e6:	80 91 61 00 	lds	r24, 0x0061
 1ea:	0e 94 45 00 	call	0x8a	; 0x8a <Dec_BCD>
 1ee:	48 2f       	mov	r20, r24
 1f0:	80 ed       	ldi	r24, 0xD0	; 208
 1f2:	65 e0       	ldi	r22, 0x05	; 5
 1f4:	0e 94 99 00 	call	0x132	; 0x132 <I2C_WriteRegister>
I2C_WriteRegister(DS1307,DAYS_REGISTER, Dec_BCD(ngay));
 1f8:	80 91 60 00 	lds	r24, 0x0060
 1fc:	0e 94 45 00 	call	0x8a	; 0x8a <Dec_BCD>
 200:	48 2f       	mov	r20, r24
 202:	80 ed       	ldi	r24, 0xD0	; 208
 204:	64 e0       	ldi	r22, 0x04	; 4
 206:	0e 94 99 00 	call	0x132	; 0x132 <I2C_WriteRegister>
I2C_WriteRegister(DS1307,YEARS_REGISTER, Dec_BCD(nam));
 20a:	80 91 62 00 	lds	r24, 0x0062
 20e:	0e 94 45 00 	call	0x8a	; 0x8a <Dec_BCD>
 212:	48 2f       	mov	r20, r24
 214:	80 ed       	ldi	r24, 0xD0	; 208
 216:	66 e0       	ldi	r22, 0x06	; 6
 218:	0e 94 99 00 	call	0x132	; 0x132 <I2C_WriteRegister>
I2C_WriteRegister(DS1307,HOURS_REGISTER, Dec_BCD(gio)+0x40); // add 0x40 for PM
 21c:	80 91 63 00 	lds	r24, 0x0063
 220:	0e 94 45 00 	call	0x8a	; 0x8a <Dec_BCD>
 224:	48 2f       	mov	r20, r24
 226:	40 5c       	subi	r20, 0xC0	; 192
 228:	80 ed       	ldi	r24, 0xD0	; 208
 22a:	62 e0       	ldi	r22, 0x02	; 2
 22c:	0e 94 99 00 	call	0x132	; 0x132 <I2C_WriteRegister>
I2C_WriteRegister(DS1307,MINUTES_REGISTER, Dec_BCD(phut));
 230:	80 91 64 00 	lds	r24, 0x0064
 234:	0e 94 45 00 	call	0x8a	; 0x8a <Dec_BCD>
 238:	48 2f       	mov	r20, r24
 23a:	80 ed       	ldi	r24, 0xD0	; 208
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	0e 94 99 00 	call	0x132	; 0x132 <I2C_WriteRegister>
I2C_WriteRegister(DS1307,SECONDS_REGISTER, Dec_BCD(giay));
 242:	80 91 65 00 	lds	r24, 0x0065
 246:	0e 94 45 00 	call	0x8a	; 0x8a <Dec_BCD>
 24a:	48 2f       	mov	r20, r24
 24c:	80 ed       	ldi	r24, 0xD0	; 208
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	0e 94 99 00 	call	0x132	; 0x132 <I2C_WriteRegister>
}
 254:	08 95       	ret

00000256 <LCD_TwoDigits>:
void LCD_TwoDigits(byte data)
// helper function for WriteDate()
// input is two digits in BCD format
// output is to LCD display at current cursor position
{
 256:	1f 93       	push	r17
 258:	18 2f       	mov	r17, r24
byte temp = data>>4;
 25a:	82 95       	swap	r24
 25c:	8f 70       	andi	r24, 0x0F	; 15
putchar_lcd(temp+'0');
 25e:	80 5d       	subi	r24, 0xD0	; 208
 260:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <putchar_lcd>
data &= 0x0F;
 264:	81 2f       	mov	r24, r17
 266:	8f 70       	andi	r24, 0x0F	; 15
putchar_lcd(data+'0');
 268:	80 5d       	subi	r24, 0xD0	; 208
 26a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <putchar_lcd>
}
 26e:	1f 91       	pop	r17
 270:	08 95       	ret

00000272 <WriteDate>:

void WriteDate()
{
byte *months, *days, *years;
DS1307_GetDate();
 272:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DS1307_GetDate>
printnumber_lcd(BCD_Dec(thang));
 276:	80 91 61 00 	lds	r24, 0x0061
 27a:	0e 94 4c 00 	call	0x98	; 0x98 <BCD_Dec>
 27e:	0e 94 27 02 	call	0x44e	; 0x44e <printnumber_lcd>
putchar_lcd('/');
 282:	8f e2       	ldi	r24, 0x2F	; 47
 284:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <putchar_lcd>
printnumber_lcd(BCD_Dec(ngay));
 288:	80 91 60 00 	lds	r24, 0x0060
 28c:	0e 94 4c 00 	call	0x98	; 0x98 <BCD_Dec>
 290:	0e 94 27 02 	call	0x44e	; 0x44e <printnumber_lcd>
putchar_lcd('/');
 294:	8f e2       	ldi	r24, 0x2F	; 47
 296:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <putchar_lcd>
printnumber_lcd(BCD_Dec(nam));
 29a:	80 91 62 00 	lds	r24, 0x0062
 29e:	0e 94 4c 00 	call	0x98	; 0x98 <BCD_Dec>
 2a2:	0e 94 27 02 	call	0x44e	; 0x44e <printnumber_lcd>
}
 2a6:	08 95       	ret

000002a8 <WriteTime>:

void WriteTime()
{
byte *hours, *minutes, *seconds;
DS1307_GetTime();
 2a8:	0e 94 be 00 	call	0x17c	; 0x17c <DS1307_GetTime>
printnumber_lcd(BCD_Dec(gio));
 2ac:	80 91 63 00 	lds	r24, 0x0063
 2b0:	0e 94 4c 00 	call	0x98	; 0x98 <BCD_Dec>
 2b4:	0e 94 27 02 	call	0x44e	; 0x44e <printnumber_lcd>
putchar_lcd(':');
 2b8:	8a e3       	ldi	r24, 0x3A	; 58
 2ba:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <putchar_lcd>
printnumber_lcd(BCD_Dec(phut));
 2be:	80 91 64 00 	lds	r24, 0x0064
 2c2:	0e 94 4c 00 	call	0x98	; 0x98 <BCD_Dec>
 2c6:	0e 94 27 02 	call	0x44e	; 0x44e <printnumber_lcd>
putchar_lcd(':');
 2ca:	8a e3       	ldi	r24, 0x3A	; 58
 2cc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <putchar_lcd>
printnumber_lcd(BCD_Dec(giay));
 2d0:	80 91 65 00 	lds	r24, 0x0065
 2d4:	0e 94 4c 00 	call	0x98	; 0x98 <BCD_Dec>
 2d8:	0e 94 27 02 	call	0x44e	; 0x44e <printnumber_lcd>
}
 2dc:	08 95       	ret

000002de <LCD_TimeDate>:

void LCD_TimeDate()
{
movecursor(1,1) ; WriteTime();
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	0e 94 05 02 	call	0x40a	; 0x40a <movecursor>
 2e6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <WriteTime>
movecursor(2,1) ; WriteDate();
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	0e 94 05 02 	call	0x40a	; 0x40a <movecursor>
 2f2:	0e 94 39 01 	call	0x272	; 0x272 <WriteDate>
}
 2f6:	08 95       	ret

000002f8 <MainLoop>:

void MainLoop()
{
while(1)
{
LCD_TimeDate(); // put time & date on LCD
 2f8:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_TimeDate>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	99 e6       	ldi	r25, 0x69	; 105
 300:	a8 e1       	ldi	r26, 0x18	; 24
 302:	81 50       	subi	r24, 0x01	; 1
 304:	90 40       	sbci	r25, 0x00	; 0
 306:	a0 40       	sbci	r26, 0x00	; 0
 308:	e1 f7       	brne	.-8      	; 0x302 <MainLoop+0xa>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <MainLoop+0x14>
 30c:	00 00       	nop
 30e:	f4 cf       	rjmp	.-24     	; 0x2f8 <MainLoop>

00000310 <main>:
}
}

int main(void)
{
	DDRC=0x00;
 310:	14 ba       	out	0x14, r1	; 20
	PORTC=0x00;
 312:	15 ba       	out	0x15, r1	; 21
    init_lcd(); // initialize HD44780 LCD controller
 314:	0e 94 d6 01 	call	0x3ac	; 0x3ac <init_lcd>

	I2C_Init(); // set I2C clock frequency
 318:	0e 94 41 00 	call	0x82	; 0x82 <I2C_Init>
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	93 ec       	ldi	r25, 0xC3	; 195
 320:	a9 e0       	ldi	r26, 0x09	; 9
 322:	81 50       	subi	r24, 0x01	; 1
 324:	90 40       	sbci	r25, 0x00	; 0
 326:	a0 40       	sbci	r26, 0x00	; 0
 328:	e1 f7       	brne	.-8      	; 0x322 <main+0x12>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <main+0x1c>
 32c:	00 00       	nop

	_delay_ms(400);
	clear_lcd();
 32e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <clear_lcd>
	MainLoop();
 332:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <MainLoop>
return 0;
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	08 95       	ret

0000033c <read_2Nib>:


char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
 33c:	92 9a       	sbi	0x12, 2	; 18
	DDR_DATA=0x0F;
 33e:	8f e0       	ldi	r24, 0x0F	; 15
 340:	81 bb       	out	0x11, r24	; 17
	HNib=DATA_input&0xF0;
 342:	80 b3       	in	r24, 0x10	; 16
	clearbit(CTRL,EN);
 344:	92 98       	cbi	0x12, 2	; 18
	
	setbit(CTRL,EN);
 346:	92 9a       	sbi	0x12, 2	; 18
	LNib=DATA_input&0xF0;
 348:	90 b3       	in	r25, 0x10	; 16
	clearbit(CTRL,EN);
 34a:	92 98       	cbi	0x12, 2	; 18
	LNib>>=4;
 34c:	92 95       	swap	r25
 34e:	9f 70       	andi	r25, 0x0F	; 15
char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
	DDR_DATA=0x0F;
	HNib=DATA_input&0xF0;
 350:	80 7f       	andi	r24, 0xF0	; 240
	LNib=DATA_input&0xF0;
	clearbit(CTRL,EN);
	LNib>>=4;
	
	return (HNib|LNib);
}
 352:	89 2b       	or	r24, r25
 354:	08 95       	ret

00000356 <write_2Nib>:
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
 356:	92 b3       	in	r25, 0x12	; 18
 358:	9f 70       	andi	r25, 0x0F	; 15
	HNib=data&0xF0;
 35a:	28 2f       	mov	r18, r24
 35c:	20 7f       	andi	r18, 0xF0	; 240
	LNib=(data<<4)&0xF0;
	
	DATA_output=HNib|temp;
 35e:	29 2b       	or	r18, r25
 360:	22 bb       	out	0x12, r18	; 18
	setbit(CTRL,EN);
 362:	92 9a       	sbi	0x12, 2	; 18
	clearbit(CTRL,EN);
 364:	92 98       	cbi	0x12, 2	; 18
}
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
	HNib=data&0xF0;
	LNib=(data<<4)&0xF0;
 366:	82 95       	swap	r24
 368:	80 7f       	andi	r24, 0xF0	; 240
	
	DATA_output=HNib|temp;
	setbit(CTRL,EN);
	clearbit(CTRL,EN);
	
	DATA_output=LNib|temp;
 36a:	98 2b       	or	r25, r24
 36c:	92 bb       	out	0x12, r25	; 18
	setbit(CTRL,EN);
 36e:	92 9a       	sbi	0x12, 2	; 18
	clearbit(CTRL,EN);
 370:	92 98       	cbi	0x12, 2	; 18
	
}
 372:	08 95       	ret

00000374 <wait_lcd>:
void wait_lcd(void){
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	df 93       	push	r29
 37a:	cf 93       	push	r28
 37c:	0f 92       	push	r0
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
	while(1){
     	clearbit(CTRL,RS);
		setbit(CTRL,RW);
		temp=read_2Nib();
		
		if(bit_is_clear(temp,7)) break;
 382:	8e 01       	movw	r16, r28
 384:	0f 5f       	subi	r16, 0xFF	; 255
 386:	1f 4f       	sbci	r17, 0xFF	; 255
}
void wait_lcd(void){
	unsigned char temp;
	
	while(1){
     	clearbit(CTRL,RS);
 388:	90 98       	cbi	0x12, 0	; 18
		setbit(CTRL,RW);
 38a:	91 9a       	sbi	0x12, 1	; 18
		temp=read_2Nib();
 38c:	0e 94 9e 01 	call	0x33c	; 0x33c <read_2Nib>
 390:	89 83       	std	Y+1, r24	; 0x01
		
		if(bit_is_clear(temp,7)) break;
 392:	f8 01       	movw	r30, r16
 394:	80 81       	ld	r24, Z
 396:	88 23       	and	r24, r24
 398:	bc f3       	brlt	.-18     	; 0x388 <wait_lcd+0x14>
	}
	clearbit(CTRL,RW);
 39a:	91 98       	cbi	0x12, 1	; 18
	DDR_DATA=0xFF;
 39c:	8f ef       	ldi	r24, 0xFF	; 255
 39e:	81 bb       	out	0x11, r24	; 17
	
}
 3a0:	0f 90       	pop	r0
 3a2:	cf 91       	pop	r28
 3a4:	df 91       	pop	r29
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	08 95       	ret

000003ac <init_lcd>:

void init_lcd(){//uses mode 4 bit
	DDR_CTRL=0xFF;
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
 3ae:	81 bb       	out	0x11, r24	; 17
	DDR_DATA=0xFF;
 3b0:	81 bb       	out	0x11, r24	; 17
	clearbit(CTRL,RS);
 3b2:	90 98       	cbi	0x12, 0	; 18
	clearbit(CTRL,RW);
 3b4:	91 98       	cbi	0x12, 1	; 18
	clearbit(CTRL,EN);
 3b6:	92 98       	cbi	0x12, 2	; 18
	
//function set	
	setbit(CTRL,EN);
 3b8:	92 9a       	sbi	0x12, 2	; 18
	setbit(DATA_output,5);
 3ba:	95 9a       	sbi	0x12, 5	; 18
	clearbit(CTRL,EN);
 3bc:	92 98       	cbi	0x12, 2	; 18
	wait_lcd();
 3be:	0e 94 ba 01 	call	0x374	; 0x374 <wait_lcd>
	write_2Nib(0x28);
 3c2:	88 e2       	ldi	r24, 0x28	; 40
 3c4:	0e 94 ab 01 	call	0x356	; 0x356 <write_2Nib>
	wait_lcd();
 3c8:	0e 94 ba 01 	call	0x374	; 0x374 <wait_lcd>
//display on/off control
    write_2Nib(0x0C);
 3cc:	8c e0       	ldi	r24, 0x0C	; 12
 3ce:	0e 94 ab 01 	call	0x356	; 0x356 <write_2Nib>
	wait_lcd();
 3d2:	0e 94 ba 01 	call	0x374	; 0x374 <wait_lcd>

//entry mode set 
    
    write_2Nib(0x06);
 3d6:	86 e0       	ldi	r24, 0x06	; 6
 3d8:	0e 94 ab 01 	call	0x356	; 0x356 <write_2Nib>
    wait_lcd();		
 3dc:	0e 94 ba 01 	call	0x374	; 0x374 <wait_lcd>
}
 3e0:	08 95       	ret

000003e2 <putchar_lcd>:
void putchar_lcd(unsigned char data){
	
	setbit(CTRL,RS);
 3e2:	90 9a       	sbi	0x12, 0	; 18
	write_2Nib(data);
 3e4:	0e 94 ab 01 	call	0x356	; 0x356 <write_2Nib>
	wait_lcd();
 3e8:	0e 94 ba 01 	call	0x374	; 0x374 <wait_lcd>
}
 3ec:	08 95       	ret

000003ee <cursor_home>:
void cursor_home(){
	clearbit(CTRL,RS);
 3ee:	90 98       	cbi	0x12, 0	; 18
	write_2Nib(0x03);
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	0e 94 ab 01 	call	0x356	; 0x356 <write_2Nib>
	wait_lcd();
 3f6:	0e 94 ba 01 	call	0x374	; 0x374 <wait_lcd>
}
 3fa:	08 95       	ret

000003fc <clear_lcd>:
void clear_lcd(){
	clearbit(CTRL,RS);
 3fc:	90 98       	cbi	0x12, 0	; 18
	write_2Nib(0x01);
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	0e 94 ab 01 	call	0x356	; 0x356 <write_2Nib>
	wait_lcd();
 404:	0e 94 ba 01 	call	0x374	; 0x374 <wait_lcd>
}
 408:	08 95       	ret

0000040a <movecursor>:
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
	clearbit(CTRL,RS);
 40a:	90 98       	cbi	0x12, 0	; 18
	write_2Nib(0x01);
	wait_lcd();
}
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
 40c:	82 95       	swap	r24
 40e:	88 0f       	add	r24, r24
 410:	88 0f       	add	r24, r24
 412:	80 7c       	andi	r24, 0xC0	; 192
 414:	86 0f       	add	r24, r22
	clearbit(CTRL,RS);
	write_2Nib(x);
 416:	81 5c       	subi	r24, 0xC1	; 193
 418:	0e 94 ab 01 	call	0x356	; 0x356 <write_2Nib>
	wait_lcd();
 41c:	0e 94 ba 01 	call	0x374	; 0x374 <wait_lcd>
}
 420:	08 95       	ret

00000422 <count_number>:
int count_number(unsigned int number){
 422:	bc 01       	movw	r22, r24
	int dem=0;
	if(number!=0) {
 424:	00 97       	sbiw	r24, 0x00	; 0
 426:	71 f0       	breq	.+28     	; 0x444 <count_number+0x22>
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	30 e0       	ldi	r19, 0x00	; 0
	   while(number){
		number=number/10;
 42c:	ea e0       	ldi	r30, 0x0A	; 10
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	cb 01       	movw	r24, r22
 432:	bf 01       	movw	r22, r30
 434:	0e 94 65 02 	call	0x4ca	; 0x4ca <__udivmodhi4>
		dem++;
 438:	2f 5f       	subi	r18, 0xFF	; 255
 43a:	3f 4f       	sbci	r19, 0xFF	; 255
	wait_lcd();
}
int count_number(unsigned int number){
	int dem=0;
	if(number!=0) {
	   while(number){
 43c:	61 15       	cp	r22, r1
 43e:	71 05       	cpc	r23, r1
 440:	b9 f7       	brne	.-18     	; 0x430 <count_number+0xe>
 442:	02 c0       	rjmp	.+4      	; 0x448 <count_number+0x26>
		number=number/10;
		dem++;
	}	
    } 
	else dem=dem+1; 
 444:	21 e0       	ldi	r18, 0x01	; 1
 446:	30 e0       	ldi	r19, 0x00	; 0
	while(number){
		number=number/10;
		dem++;
	}
	return dem;*/
}
 448:	82 2f       	mov	r24, r18
 44a:	93 2f       	mov	r25, r19
 44c:	08 95       	ret

0000044e <printnumber_lcd>:
void printnumber_lcd(uint8_t number){
 44e:	1f 93       	push	r17
		temp=temp/10;
		putchar_lcd(a+48);
	}*/
		
	uint8_t a,b,c,d,e;
	    a=number/10;
 450:	6a e0       	ldi	r22, 0x0A	; 10
 452:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__udivmodqi4>
 456:	19 2f       	mov	r17, r25
	    putchar_lcd(a+48);
 458:	80 5d       	subi	r24, 0xD0	; 208
 45a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <putchar_lcd>
		//number=number%10000;
	    b=number%10;
	    putchar_lcd(b+48);
 45e:	81 2f       	mov	r24, r17
 460:	80 5d       	subi	r24, 0xD0	; 208
 462:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <putchar_lcd>
		putchar_lcd(d+48);
		putchar_lcd(e+48);
	}
	*/
			
}
 466:	1f 91       	pop	r17
 468:	08 95       	ret

0000046a <putstr_lcd>:
putstr_lcd(unsigned char *str, unsigned int lenght){
 46a:	ef 92       	push	r14
 46c:	ff 92       	push	r15
 46e:	0f 93       	push	r16
 470:	1f 93       	push	r17
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	7b 01       	movw	r14, r22
	unsigned int i;
	for(i=0;i<lenght;i++){
 478:	61 15       	cp	r22, r1
 47a:	71 05       	cpc	r23, r1
 47c:	99 f0       	breq	.+38     	; 0x4a4 <putstr_lcd+0x3a>
 47e:	08 2f       	mov	r16, r24
 480:	19 2f       	mov	r17, r25
 482:	c0 e0       	ldi	r28, 0x00	; 0
 484:	d0 e0       	ldi	r29, 0x00	; 0
		if(*(str+i)>0){ 
 486:	f8 01       	movw	r30, r16
 488:	81 91       	ld	r24, Z+
 48a:	8f 01       	movw	r16, r30
 48c:	88 23       	and	r24, r24
 48e:	19 f0       	breq	.+6      	; 0x496 <putstr_lcd+0x2c>
			putchar_lcd(*(str+i));
 490:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <putchar_lcd>
 494:	03 c0       	rjmp	.+6      	; 0x49c <putstr_lcd+0x32>
			}
		else putchar_lcd(0);	
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <putchar_lcd>
	*/
			
}
putstr_lcd(unsigned char *str, unsigned int lenght){
	unsigned int i;
	for(i=0;i<lenght;i++){
 49c:	21 96       	adiw	r28, 0x01	; 1
 49e:	ce 15       	cp	r28, r14
 4a0:	df 05       	cpc	r29, r15
 4a2:	88 f3       	brcs	.-30     	; 0x486 <putstr_lcd+0x1c>
		if(*(str+i)>0){ 
			putchar_lcd(*(str+i));
			}
		else putchar_lcd(0);	
}
}
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	1f 91       	pop	r17
 4aa:	0f 91       	pop	r16
 4ac:	ff 90       	pop	r15
 4ae:	ef 90       	pop	r14
 4b0:	08 95       	ret

000004b2 <__udivmodqi4>:
 4b2:	99 1b       	sub	r25, r25
 4b4:	79 e0       	ldi	r23, 0x09	; 9
 4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <__udivmodqi4_ep>

000004b8 <__udivmodqi4_loop>:
 4b8:	99 1f       	adc	r25, r25
 4ba:	96 17       	cp	r25, r22
 4bc:	08 f0       	brcs	.+2      	; 0x4c0 <__udivmodqi4_ep>
 4be:	96 1b       	sub	r25, r22

000004c0 <__udivmodqi4_ep>:
 4c0:	88 1f       	adc	r24, r24
 4c2:	7a 95       	dec	r23
 4c4:	c9 f7       	brne	.-14     	; 0x4b8 <__udivmodqi4_loop>
 4c6:	80 95       	com	r24
 4c8:	08 95       	ret

000004ca <__udivmodhi4>:
 4ca:	aa 1b       	sub	r26, r26
 4cc:	bb 1b       	sub	r27, r27
 4ce:	51 e1       	ldi	r21, 0x11	; 17
 4d0:	07 c0       	rjmp	.+14     	; 0x4e0 <__udivmodhi4_ep>

000004d2 <__udivmodhi4_loop>:
 4d2:	aa 1f       	adc	r26, r26
 4d4:	bb 1f       	adc	r27, r27
 4d6:	a6 17       	cp	r26, r22
 4d8:	b7 07       	cpc	r27, r23
 4da:	10 f0       	brcs	.+4      	; 0x4e0 <__udivmodhi4_ep>
 4dc:	a6 1b       	sub	r26, r22
 4de:	b7 0b       	sbc	r27, r23

000004e0 <__udivmodhi4_ep>:
 4e0:	88 1f       	adc	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	5a 95       	dec	r21
 4e6:	a9 f7       	brne	.-22     	; 0x4d2 <__udivmodhi4_loop>
 4e8:	80 95       	com	r24
 4ea:	90 95       	com	r25
 4ec:	bc 01       	movw	r22, r24
 4ee:	cd 01       	movw	r24, r26
 4f0:	08 95       	ret

000004f2 <_exit>:
 4f2:	f8 94       	cli

000004f4 <__stop_program>:
 4f4:	ff cf       	rjmp	.-2      	; 0x4f4 <__stop_program>
