
project 10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000c00  00000c94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800070  00800070  00000ca4  2**0
                  ALLOC
  3 .stab         000033e4  00000000  00000000  00000ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000abd  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  00004b45  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000156  00000000  00000000  00004ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000005ba  00000000  00000000  00004cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000312  00000000  00000000  000052b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000087a  00000000  00000000  000055c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000130  00000000  00000000  00005e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001f7  00000000  00000000  00005f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002b2  00000000  00000000  0000616b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000081  00000000  00000000  0000641d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_9>
  28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  54:	07 63       	ori	r16, 0x37	; 55
  56:	42 36       	cpi	r20, 0x62	; 98
  58:	b7 9b       	sbis	0x16, 7	; 22
  5a:	d8 a7       	std	Y+40, r29	; 0x28
  5c:	1a 39       	cpi	r17, 0x9A	; 154
  5e:	68 56       	subi	r22, 0x68	; 104
  60:	18 ae       	std	Y+56, r1	; 0x38
  62:	ba ab       	std	Y+50, r27	; 0x32
  64:	55 8c       	ldd	r5, Z+29	; 0x1d
  66:	1d 3c       	cpi	r17, 0xCD	; 205
  68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
  6a:	57 63       	ori	r21, 0x37	; 55
  6c:	bd 6d       	ori	r27, 0xDD	; 221
  6e:	ed fd       	.word	0xfded	; ????
  70:	75 3e       	cpi	r23, 0xE5	; 229
  72:	f6 17       	cp	r31, r22
  74:	72 31       	cpi	r23, 0x12	; 18
  76:	bf 00       	.word	0x00bf	; ????
  78:	00 00       	nop
  7a:	80 3f       	cpi	r24, 0xF0	; 240
  7c:	08 00       	.word	0x0008	; ????
  7e:	00 00       	nop
  80:	be 92       	st	-X, r11
  82:	24 49       	sbci	r18, 0x94	; 148
  84:	12 3e       	cpi	r17, 0xE2	; 226
  86:	ab aa       	std	Y+51, r10	; 0x33
  88:	aa 2a       	or	r10, r26
  8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
  8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
  8e:	4c 3e       	cpi	r20, 0xEC	; 236
  90:	00 00       	nop
  92:	00 80       	ld	r0, Z
  94:	be ab       	std	Y+54, r27	; 0x36
  96:	aa aa       	std	Y+50, r10	; 0x32
  98:	aa 3e       	cpi	r26, 0xEA	; 234
  9a:	00 00       	nop
  9c:	00 00       	nop
  9e:	bf 00       	.word	0x00bf	; ????
  a0:	00 00       	nop
  a2:	80 3f       	cpi	r24, 0xF0	; 240
  a4:	00 00       	nop
  a6:	00 00       	nop
  a8:	00 08       	sbc	r0, r0
  aa:	41 78       	andi	r20, 0x81	; 129
  ac:	d3 bb       	out	0x13, r29	; 19
  ae:	43 87       	std	Z+11, r20	; 0x0b
  b0:	d1 13       	cpse	r29, r17
  b2:	3d 19       	sub	r19, r13
  b4:	0e 3c       	cpi	r16, 0xCE	; 206
  b6:	c3 bd       	out	0x23, r28	; 35
  b8:	42 82       	std	Z+2, r4	; 0x02
  ba:	ad 2b       	or	r26, r29
  bc:	3e 68       	ori	r19, 0x8E	; 142
  be:	ec 82       	std	Y+4, r14	; 0x04
  c0:	76 be       	out	0x36, r7	; 54
  c2:	d9 8f       	std	Y+25, r29	; 0x19
  c4:	e1 a9       	ldd	r30, Z+49	; 0x31
  c6:	3e 4c       	sbci	r19, 0xCE	; 206
  c8:	80 ef       	ldi	r24, 0xF0	; 240
  ca:	ff be       	out	0x3f, r15	; 63
  cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <modf+0x42>
  ce:	ff 7f       	andi	r31, 0xFF	; 255
  d0:	3f 00       	.word	0x003f	; ????
  d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
  d6:	11 24       	eor	r1, r1
  d8:	1f be       	out	0x3f, r1	; 63
  da:	cf e5       	ldi	r28, 0x5F	; 95
  dc:	d4 e0       	ldi	r29, 0x04	; 4
  de:	de bf       	out	0x3e, r29	; 62
  e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
  e2:	10 e0       	ldi	r17, 0x00	; 0
  e4:	a0 e6       	ldi	r26, 0x60	; 96
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	e0 e0       	ldi	r30, 0x00	; 0
  ea:	fc e0       	ldi	r31, 0x0C	; 12
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
  ee:	05 90       	lpm	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	a0 37       	cpi	r26, 0x70	; 112
  f4:	b1 07       	cpc	r27, r17
  f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	a0 e7       	ldi	r26, 0x70	; 112
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	a8 37       	cpi	r26, 0x78	; 120
 104:	b1 07       	cpc	r27, r17
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	0e 94 8a 00 	call	0x114	; 0x114 <main>
 10c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <_exit>

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <main>:
#include "setandclear_bit.h"
#include <avr/delay.h>
#include <avr/interrupt.h>
#include "matrix4x4.h"
void main(void)
{
 114:	1f 93       	push	r17
	
init_lcd();
 116:	0e 94 c0 01 	call	0x380	; 0x380 <init_lcd>

PORTA=0xFF;
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	8b bb       	out	0x1b, r24	; 27
DDRA=0xFF;
 11e:	8a bb       	out	0x1a, r24	; 26

DDRC=0xFF;
 120:	84 bb       	out	0x14, r24	; 20
PORTC=0x00;
 122:	15 ba       	out	0x15, r1	; 21
 


PORTD=0xFF;
 124:	82 bb       	out	0x12, r24	; 18
DDRD=0x0F; 
 126:	8f e0       	ldi	r24, 0x0F	; 15
 128:	81 bb       	out	0x11, r24	; 17
/*
DDRD=0xF0;
PORTD=0x0F;
*/

TCCR0=0;//TCCR0=(1<<CS02)|(1<<CS00);
 12a:	13 be       	out	0x33, r1	; 51

TIMSK=(1<<TOIE0);
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	89 bf       	out	0x39, r24	; 57
sei();
 130:	78 94       	sei
clear_lcd();
 132:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <clear_lcd>
cursor_home();
 136:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <cursor_home>
movecursor(1,6);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	66 e0       	ldi	r22, 0x06	; 6
 13e:	0e 94 ef 01 	call	0x3de	; 0x3de <movecursor>
       key =KEY4x4_Getkey();
	   
	   if(key){
		   
		   TCNT0=0;
		   TCCR0=(1<<CS02)|(1<<CS00);
 142:	15 e0       	ldi	r17, 0x05	; 5
clear_lcd();
cursor_home();
movecursor(1,6);
while(1){
       int i;
       key =KEY4x4_Getkey();
 144:	0e 94 36 01 	call	0x26c	; 0x26c <KEY4x4_Getkey>
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	a0 e0       	ldi	r26, 0x00	; 0
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	80 93 74 00 	sts	0x0074, r24
 152:	90 93 75 00 	sts	0x0075, r25
 156:	a0 93 76 00 	sts	0x0076, r26
 15a:	b0 93 77 00 	sts	0x0077, r27
	   
	   if(key){
 15e:	80 91 74 00 	lds	r24, 0x0074
 162:	90 91 75 00 	lds	r25, 0x0075
 166:	a0 91 76 00 	lds	r26, 0x0076
 16a:	b0 91 77 00 	lds	r27, 0x0077
 16e:	00 97       	sbiw	r24, 0x00	; 0
 170:	a1 05       	cpc	r26, r1
 172:	b1 05       	cpc	r27, r1
 174:	39 f3       	breq	.-50     	; 0x144 <main+0x30>
		   
		   TCNT0=0;
 176:	12 be       	out	0x32, r1	; 50
		   TCCR0=(1<<CS02)|(1<<CS00);
 178:	13 bf       	out	0x33, r17	; 51
		   k=key;
 17a:	80 91 74 00 	lds	r24, 0x0074
 17e:	90 91 75 00 	lds	r25, 0x0075
 182:	a0 91 76 00 	lds	r26, 0x0076
 186:	b0 91 77 00 	lds	r27, 0x0077
 18a:	80 93 70 00 	sts	0x0070, r24
 18e:	90 93 71 00 	sts	0x0071, r25
 192:	a0 93 72 00 	sts	0x0072, r26
 196:	b0 93 73 00 	sts	0x0073, r27
 19a:	d4 cf       	rjmp	.-88     	; 0x144 <main+0x30>

0000019c <__vector_9>:
	   }	       
	   }	  
return 0;
}
ISR(TIMER0_OVF_vect){
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
	    
	    printnumber_lcd(k);
 1be:	80 91 70 00 	lds	r24, 0x0070
 1c2:	90 91 71 00 	lds	r25, 0x0071
 1c6:	a0 91 72 00 	lds	r26, 0x0072
 1ca:	b0 91 73 00 	lds	r27, 0x0073
 1ce:	0e 94 11 02 	call	0x422	; 0x422 <printnumber_lcd>
		TCNT0=0;
 1d2:	12 be       	out	0x32, r1	; 50
	    TCCR0=0;	
 1d4:	13 be       	out	0x33, r1	; 51
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	bf 91       	pop	r27
 1dc:	af 91       	pop	r26
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	7f 91       	pop	r23
 1e4:	6f 91       	pop	r22
 1e6:	5f 91       	pop	r21
 1e8:	4f 91       	pop	r20
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <KEY4x4_Ispush>:
return 0;
}
*/

unsigned char KEY4x4_Ispush(void){
if((bit_is_clear(control_pin,KEY4x4_COL1))|(bit_is_clear(control_pin,KEY4x4_COL2))|(bit_is_clear(control_pin,KEY4x4_COL3))|(bit_is_clear(control_pin,KEY4x4_COL4)))
 1f8:	60 b3       	in	r22, 0x10	; 16
 1fa:	50 b3       	in	r21, 0x10	; 16
 1fc:	30 b3       	in	r19, 0x10	; 16
 1fe:	20 b3       	in	r18, 0x10	; 16
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	36 ff       	sbrs	r19, 6
 206:	02 c0       	rjmp	.+4      	; 0x20c <KEY4x4_Ispush+0x14>
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	33 27       	eor	r19, r19
 20e:	27 fd       	sbrc	r18, 7
 210:	30 95       	com	r19
 212:	20 95       	com	r18
 214:	30 95       	com	r19
 216:	22 27       	eor	r18, r18
 218:	33 0f       	add	r19, r19
 21a:	22 1f       	adc	r18, r18
 21c:	33 27       	eor	r19, r19
 21e:	82 2b       	or	r24, r18
 220:	93 2b       	or	r25, r19
 222:	41 e0       	ldi	r20, 0x01	; 1
 224:	64 fd       	sbrc	r22, 4
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	55 fd       	sbrc	r21, 5
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	42 2b       	or	r20, r18
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	9c 01       	movw	r18, r24
 234:	24 2b       	or	r18, r20
 236:	35 2b       	or	r19, r21
return 1;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	21 15       	cp	r18, r1
 23c:	31 05       	cpc	r19, r1
 23e:	09 f4       	brne	.+2      	; 0x242 <KEY4x4_Ispush+0x4a>
 240:	80 e0       	ldi	r24, 0x00	; 0
else return 0;
}
 242:	08 95       	ret

00000244 <KEY4x4_checkROW>:
void KEY4x4_checkROW(unsigned char i){

setbit(control_port,KEY4x4_ROW1);
 244:	93 9a       	sbi	0x12, 3	; 18
setbit(control_port,KEY4x4_ROW2);
 246:	92 9a       	sbi	0x12, 2	; 18
setbit(control_port,KEY4x4_ROW3);
 248:	91 9a       	sbi	0x12, 1	; 18
setbit(control_port,KEY4x4_ROW4);
 24a:	90 9a       	sbi	0x12, 0	; 18
if(i==0){
 24c:	88 23       	and	r24, r24
 24e:	11 f4       	brne	.+4      	; 0x254 <KEY4x4_checkROW+0x10>
    clearbit(control_port,KEY4x4_ROW1);
 250:	93 98       	cbi	0x12, 3	; 18
 252:	08 c0       	rjmp	.+16     	; 0x264 <KEY4x4_checkROW+0x20>
}
if(i==1){
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	11 f4       	brne	.+4      	; 0x25c <KEY4x4_checkROW+0x18>
    clearbit(control_port,KEY4x4_ROW2);
 258:	92 98       	cbi	0x12, 2	; 18
 25a:	08 95       	ret
}
if(i==2){
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	11 f4       	brne	.+4      	; 0x264 <KEY4x4_checkROW+0x20>
    clearbit(control_port,KEY4x4_ROW3);
 260:	91 98       	cbi	0x12, 1	; 18
 262:	08 95       	ret
}
if(i==3){
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	09 f4       	brne	.+2      	; 0x26a <KEY4x4_checkROW+0x26>
    clearbit(control_port,KEY4x4_ROW4);
 268:	90 98       	cbi	0x12, 0	; 18
 26a:	08 95       	ret

0000026c <KEY4x4_Getkey>:
}   
}
unsigned char KEY4x4_Getkey(void){
 26c:	1f 93       	push	r17
unsigned char i,button;
clearbit(control_port,KEY4x4_ROW1);
 26e:	93 98       	cbi	0x12, 3	; 18
clearbit(control_port,KEY4x4_ROW2);
 270:	92 98       	cbi	0x12, 2	; 18
clearbit(control_port,KEY4x4_ROW3);
 272:	91 98       	cbi	0x12, 1	; 18
clearbit(control_port,KEY4x4_ROW4);
 274:	90 98       	cbi	0x12, 0	; 18

if(KEY4x4_Ispush()){
 276:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <KEY4x4_Ispush>
 27a:	88 23       	and	r24, r24
 27c:	09 f4       	brne	.+2      	; 0x280 <KEY4x4_Getkey+0x14>
 27e:	43 c0       	rjmp	.+134    	; 0x306 <KEY4x4_Getkey+0x9a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 280:	81 ee       	ldi	r24, 0xE1	; 225
 282:	94 e0       	ldi	r25, 0x04	; 4
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <KEY4x4_Getkey+0x18>
 288:	00 c0       	rjmp	.+0      	; 0x28a <KEY4x4_Getkey+0x1e>
 28a:	00 00       	nop
_delay_ms(5);
if(KEY4x4_Ispush()){
 28c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <KEY4x4_Ispush>
 290:	88 23       	and	r24, r24
 292:	d9 f1       	breq	.+118    	; 0x30a <KEY4x4_Getkey+0x9e>
 294:	10 e0       	ldi	r17, 0x00	; 0
for(i=0;i<4;i++){
KEY4x4_checkROW(i);
 296:	81 2f       	mov	r24, r17
 298:	0e 94 22 01 	call	0x244	; 0x244 <KEY4x4_checkROW>
if(bit_is_clear(control_pin,KEY4x4_COL1))  return KEY_4x4[i][0];
 29c:	84 99       	sbic	0x10, 4	; 16
 29e:	0a c0       	rjmp	.+20     	; 0x2b4 <KEY4x4_Getkey+0x48>
 2a0:	e1 2f       	mov	r30, r17
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	ee 0f       	add	r30, r30
 2a6:	ff 1f       	adc	r31, r31
 2a8:	ee 0f       	add	r30, r30
 2aa:	ff 1f       	adc	r31, r31
 2ac:	e0 5a       	subi	r30, 0xA0	; 160
 2ae:	ff 4f       	sbci	r31, 0xFF	; 255
 2b0:	80 81       	ld	r24, Z
 2b2:	2c c0       	rjmp	.+88     	; 0x30c <KEY4x4_Getkey+0xa0>
if(bit_is_clear(control_pin,KEY4x4_COL2))  return KEY_4x4[i][1];
 2b4:	85 99       	sbic	0x10, 5	; 16
 2b6:	0a c0       	rjmp	.+20     	; 0x2cc <KEY4x4_Getkey+0x60>
 2b8:	e1 2f       	mov	r30, r17
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	ee 0f       	add	r30, r30
 2be:	ff 1f       	adc	r31, r31
 2c0:	ee 0f       	add	r30, r30
 2c2:	ff 1f       	adc	r31, r31
 2c4:	e0 5a       	subi	r30, 0xA0	; 160
 2c6:	ff 4f       	sbci	r31, 0xFF	; 255
 2c8:	81 81       	ldd	r24, Z+1	; 0x01
 2ca:	20 c0       	rjmp	.+64     	; 0x30c <KEY4x4_Getkey+0xa0>
if(bit_is_clear(control_pin,KEY4x4_COL3))  return KEY_4x4[i][2];
 2cc:	86 99       	sbic	0x10, 6	; 16
 2ce:	0a c0       	rjmp	.+20     	; 0x2e4 <KEY4x4_Getkey+0x78>
 2d0:	e1 2f       	mov	r30, r17
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	ee 0f       	add	r30, r30
 2d6:	ff 1f       	adc	r31, r31
 2d8:	ee 0f       	add	r30, r30
 2da:	ff 1f       	adc	r31, r31
 2dc:	e0 5a       	subi	r30, 0xA0	; 160
 2de:	ff 4f       	sbci	r31, 0xFF	; 255
 2e0:	82 81       	ldd	r24, Z+2	; 0x02
 2e2:	14 c0       	rjmp	.+40     	; 0x30c <KEY4x4_Getkey+0xa0>
if(bit_is_clear(control_pin,KEY4x4_COL4))  return KEY_4x4[i][3];
 2e4:	87 99       	sbic	0x10, 7	; 16
 2e6:	0a c0       	rjmp	.+20     	; 0x2fc <KEY4x4_Getkey+0x90>
 2e8:	e1 2f       	mov	r30, r17
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	ee 0f       	add	r30, r30
 2ee:	ff 1f       	adc	r31, r31
 2f0:	ee 0f       	add	r30, r30
 2f2:	ff 1f       	adc	r31, r31
 2f4:	e0 5a       	subi	r30, 0xA0	; 160
 2f6:	ff 4f       	sbci	r31, 0xFF	; 255
 2f8:	83 81       	ldd	r24, Z+3	; 0x03
 2fa:	08 c0       	rjmp	.+16     	; 0x30c <KEY4x4_Getkey+0xa0>
clearbit(control_port,KEY4x4_ROW4);

if(KEY4x4_Ispush()){
_delay_ms(5);
if(KEY4x4_Ispush()){
for(i=0;i<4;i++){
 2fc:	1f 5f       	subi	r17, 0xFF	; 255
 2fe:	14 30       	cpi	r17, 0x04	; 4
 300:	51 f6       	brne	.-108    	; 0x296 <KEY4x4_Getkey+0x2a>
if(bit_is_clear(control_pin,KEY4x4_COL3))  return KEY_4x4[i][2];
if(bit_is_clear(control_pin,KEY4x4_COL4))  return KEY_4x4[i][3];
}
}
}
return 0;
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	03 c0       	rjmp	.+6      	; 0x30c <KEY4x4_Getkey+0xa0>
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	01 c0       	rjmp	.+2      	; 0x30c <KEY4x4_Getkey+0xa0>
 30a:	80 e0       	ldi	r24, 0x00	; 0
}
 30c:	1f 91       	pop	r17
 30e:	08 95       	ret

00000310 <read_2Nib>:


char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
 310:	da 9a       	sbi	0x1b, 2	; 27
	DDR_DATA=0x0F;
 312:	8f e0       	ldi	r24, 0x0F	; 15
 314:	8a bb       	out	0x1a, r24	; 26
	HNib=DATA_input&0xF0;
 316:	89 b3       	in	r24, 0x19	; 25
	clearbit(CTRL,EN);
 318:	da 98       	cbi	0x1b, 2	; 27
	
	setbit(CTRL,EN);
 31a:	da 9a       	sbi	0x1b, 2	; 27
	LNib=DATA_input&0xF0;
 31c:	99 b3       	in	r25, 0x19	; 25
	clearbit(CTRL,EN);
 31e:	da 98       	cbi	0x1b, 2	; 27
	LNib>>=4;
 320:	92 95       	swap	r25
 322:	9f 70       	andi	r25, 0x0F	; 15
char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
	DDR_DATA=0x0F;
	HNib=DATA_input&0xF0;
 324:	80 7f       	andi	r24, 0xF0	; 240
	LNib=DATA_input&0xF0;
	clearbit(CTRL,EN);
	LNib>>=4;
	
	return (HNib|LNib);
}
 326:	89 2b       	or	r24, r25
 328:	08 95       	ret

0000032a <write_2Nib>:
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
 32a:	9b b3       	in	r25, 0x1b	; 27
 32c:	9f 70       	andi	r25, 0x0F	; 15
	HNib=data&0xF0;
 32e:	28 2f       	mov	r18, r24
 330:	20 7f       	andi	r18, 0xF0	; 240
	LNib=(data<<4)&0xF0;
	
	DATA_output=HNib|temp;
 332:	29 2b       	or	r18, r25
 334:	2b bb       	out	0x1b, r18	; 27
	setbit(CTRL,EN);
 336:	da 9a       	sbi	0x1b, 2	; 27
	clearbit(CTRL,EN);
 338:	da 98       	cbi	0x1b, 2	; 27
}
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
	HNib=data&0xF0;
	LNib=(data<<4)&0xF0;
 33a:	82 95       	swap	r24
 33c:	80 7f       	andi	r24, 0xF0	; 240
	
	DATA_output=HNib|temp;
	setbit(CTRL,EN);
	clearbit(CTRL,EN);
	
	DATA_output=LNib|temp;
 33e:	98 2b       	or	r25, r24
 340:	9b bb       	out	0x1b, r25	; 27
	setbit(CTRL,EN);
 342:	da 9a       	sbi	0x1b, 2	; 27
	clearbit(CTRL,EN);
 344:	da 98       	cbi	0x1b, 2	; 27
	
}
 346:	08 95       	ret

00000348 <wait_lcd>:
void wait_lcd(void){
 348:	0f 93       	push	r16
 34a:	1f 93       	push	r17
 34c:	df 93       	push	r29
 34e:	cf 93       	push	r28
 350:	0f 92       	push	r0
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
	while(1){
     	clearbit(CTRL,RS);
		setbit(CTRL,RW);
		temp=read_2Nib();
		
		if(bit_is_clear(temp,7)) break;
 356:	8e 01       	movw	r16, r28
 358:	0f 5f       	subi	r16, 0xFF	; 255
 35a:	1f 4f       	sbci	r17, 0xFF	; 255
}
void wait_lcd(void){
	unsigned char temp;
	
	while(1){
     	clearbit(CTRL,RS);
 35c:	d8 98       	cbi	0x1b, 0	; 27
		setbit(CTRL,RW);
 35e:	d9 9a       	sbi	0x1b, 1	; 27
		temp=read_2Nib();
 360:	0e 94 88 01 	call	0x310	; 0x310 <read_2Nib>
 364:	89 83       	std	Y+1, r24	; 0x01
		
		if(bit_is_clear(temp,7)) break;
 366:	f8 01       	movw	r30, r16
 368:	80 81       	ld	r24, Z
 36a:	88 23       	and	r24, r24
 36c:	bc f3       	brlt	.-18     	; 0x35c <wait_lcd+0x14>
	}
	clearbit(CTRL,RW);
 36e:	d9 98       	cbi	0x1b, 1	; 27
	DDR_DATA=0xFF;
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	8a bb       	out	0x1a, r24	; 26
	
}
 374:	0f 90       	pop	r0
 376:	cf 91       	pop	r28
 378:	df 91       	pop	r29
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	08 95       	ret

00000380 <init_lcd>:

void init_lcd(){//uses mode 4 bit
	DDR_CTRL=0xFF;
 380:	8f ef       	ldi	r24, 0xFF	; 255
 382:	8a bb       	out	0x1a, r24	; 26
	DDR_DATA=0xFF;
 384:	8a bb       	out	0x1a, r24	; 26
	clearbit(CTRL,RS);
 386:	d8 98       	cbi	0x1b, 0	; 27
	clearbit(CTRL,RW);
 388:	d9 98       	cbi	0x1b, 1	; 27
	clearbit(CTRL,EN);
 38a:	da 98       	cbi	0x1b, 2	; 27
	
//function set	
	setbit(CTRL,EN);
 38c:	da 9a       	sbi	0x1b, 2	; 27
	setbit(DATA_output,5);
 38e:	dd 9a       	sbi	0x1b, 5	; 27
	clearbit(CTRL,EN);
 390:	da 98       	cbi	0x1b, 2	; 27
	wait_lcd();
 392:	0e 94 a4 01 	call	0x348	; 0x348 <wait_lcd>
	write_2Nib(0x28);
 396:	88 e2       	ldi	r24, 0x28	; 40
 398:	0e 94 95 01 	call	0x32a	; 0x32a <write_2Nib>
	wait_lcd();
 39c:	0e 94 a4 01 	call	0x348	; 0x348 <wait_lcd>
//display on/off control
    write_2Nib(0x0E);
 3a0:	8e e0       	ldi	r24, 0x0E	; 14
 3a2:	0e 94 95 01 	call	0x32a	; 0x32a <write_2Nib>
	wait_lcd();
 3a6:	0e 94 a4 01 	call	0x348	; 0x348 <wait_lcd>

//entry mode set 
    
    write_2Nib(0x06);
 3aa:	86 e0       	ldi	r24, 0x06	; 6
 3ac:	0e 94 95 01 	call	0x32a	; 0x32a <write_2Nib>
    wait_lcd();		
 3b0:	0e 94 a4 01 	call	0x348	; 0x348 <wait_lcd>
}
 3b4:	08 95       	ret

000003b6 <putchar_lcd>:
void putchar_lcd(unsigned char data){
	
	setbit(CTRL,RS);
 3b6:	d8 9a       	sbi	0x1b, 0	; 27
	write_2Nib(data);
 3b8:	0e 94 95 01 	call	0x32a	; 0x32a <write_2Nib>
	wait_lcd();
 3bc:	0e 94 a4 01 	call	0x348	; 0x348 <wait_lcd>
}
 3c0:	08 95       	ret

000003c2 <cursor_home>:
void cursor_home(){
	clearbit(CTRL,RS);
 3c2:	d8 98       	cbi	0x1b, 0	; 27
	write_2Nib(0x03);
 3c4:	83 e0       	ldi	r24, 0x03	; 3
 3c6:	0e 94 95 01 	call	0x32a	; 0x32a <write_2Nib>
	wait_lcd();
 3ca:	0e 94 a4 01 	call	0x348	; 0x348 <wait_lcd>
}
 3ce:	08 95       	ret

000003d0 <clear_lcd>:
void clear_lcd(){
	clearbit(CTRL,RS);
 3d0:	d8 98       	cbi	0x1b, 0	; 27
	write_2Nib(0x01);
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 95 01 	call	0x32a	; 0x32a <write_2Nib>
	wait_lcd();
 3d8:	0e 94 a4 01 	call	0x348	; 0x348 <wait_lcd>
}
 3dc:	08 95       	ret

000003de <movecursor>:
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
	clearbit(CTRL,RS);
 3de:	d8 98       	cbi	0x1b, 0	; 27
	write_2Nib(0x01);
	wait_lcd();
}
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
 3e0:	82 95       	swap	r24
 3e2:	88 0f       	add	r24, r24
 3e4:	88 0f       	add	r24, r24
 3e6:	80 7c       	andi	r24, 0xC0	; 192
 3e8:	86 0f       	add	r24, r22
	clearbit(CTRL,RS);
	write_2Nib(x);
 3ea:	81 5c       	subi	r24, 0xC1	; 193
 3ec:	0e 94 95 01 	call	0x32a	; 0x32a <write_2Nib>
	wait_lcd();
 3f0:	0e 94 a4 01 	call	0x348	; 0x348 <wait_lcd>
}
 3f4:	08 95       	ret

000003f6 <count_number>:
int count_number(unsigned int number){
 3f6:	bc 01       	movw	r22, r24
	int dem=0;
	if(number!=0) {
 3f8:	00 97       	sbiw	r24, 0x00	; 0
 3fa:	71 f0       	breq	.+28     	; 0x418 <count_number+0x22>
 3fc:	20 e0       	ldi	r18, 0x00	; 0
 3fe:	30 e0       	ldi	r19, 0x00	; 0
	   while(number){
		number=number/10;
 400:	ea e0       	ldi	r30, 0x0A	; 10
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	cb 01       	movw	r24, r22
 406:	bf 01       	movw	r22, r30
 408:	0e 94 d7 05 	call	0xbae	; 0xbae <__udivmodhi4>
		dem++;
 40c:	2f 5f       	subi	r18, 0xFF	; 255
 40e:	3f 4f       	sbci	r19, 0xFF	; 255
	wait_lcd();
}
int count_number(unsigned int number){
	int dem=0;
	if(number!=0) {
	   while(number){
 410:	61 15       	cp	r22, r1
 412:	71 05       	cpc	r23, r1
 414:	b9 f7       	brne	.-18     	; 0x404 <count_number+0xe>
 416:	02 c0       	rjmp	.+4      	; 0x41c <count_number+0x26>
		number=number/10;
		dem++;
	}	
    } 
	else dem=dem+1; 
 418:	21 e0       	ldi	r18, 0x01	; 1
 41a:	30 e0       	ldi	r19, 0x00	; 0
	return dem;

}
 41c:	82 2f       	mov	r24, r18
 41e:	93 2f       	mov	r25, r19
 420:	08 95       	ret

00000422 <printnumber_lcd>:
void printnumber_lcd(unsigned int number){
 422:	af 92       	push	r10
 424:	bf 92       	push	r11
 426:	cf 92       	push	r12
 428:	df 92       	push	r13
 42a:	ef 92       	push	r14
 42c:	ff 92       	push	r15
 42e:	0f 93       	push	r16
 430:	1f 93       	push	r17
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	e8 2e       	mov	r14, r24
 438:	f9 2e       	mov	r15, r25
	int a,n,i,temp;
	n= count_number(number);
 43a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <count_number>
 43e:	6c 01       	movw	r12, r24
	temp=pow(10,n-1);
 440:	bc 01       	movw	r22, r24
 442:	61 50       	subi	r22, 0x01	; 1
 444:	70 40       	sbci	r23, 0x00	; 0
 446:	88 27       	eor	r24, r24
 448:	77 fd       	sbrc	r23, 7
 44a:	80 95       	com	r24
 44c:	98 2f       	mov	r25, r24
 44e:	0e 94 b6 02 	call	0x56c	; 0x56c <__floatsisf>
 452:	9b 01       	movw	r18, r22
 454:	ac 01       	movw	r20, r24
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	80 e2       	ldi	r24, 0x20	; 32
 45c:	91 e4       	ldi	r25, 0x41	; 65
 45e:	0e 94 1a 03 	call	0x634	; 0x634 <pow>
	for(i=0;i<n;i++){
 462:	1c 14       	cp	r1, r12
 464:	1d 04       	cpc	r1, r13
 466:	04 f5       	brge	.+64     	; 0x4a8 <__stack+0x49>

}
void printnumber_lcd(unsigned int number){
	int a,n,i,temp;
	n= count_number(number);
	temp=pow(10,n-1);
 468:	0e 94 83 02 	call	0x506	; 0x506 <__fixsfsi>
 46c:	eb 01       	movw	r28, r22
	for(i=0;i<n;i++){
 46e:	00 e0       	ldi	r16, 0x00	; 0
 470:	10 e0       	ldi	r17, 0x00	; 0
		a=number/temp;
		number=number%temp;
		temp=temp/10;
 472:	0f 2e       	mov	r0, r31
 474:	fa e0       	ldi	r31, 0x0A	; 10
 476:	af 2e       	mov	r10, r31
 478:	bb 24       	eor	r11, r11
 47a:	f0 2d       	mov	r31, r0
void printnumber_lcd(unsigned int number){
	int a,n,i,temp;
	n= count_number(number);
	temp=pow(10,n-1);
	for(i=0;i<n;i++){
		a=number/temp;
 47c:	8e 2d       	mov	r24, r14
 47e:	9f 2d       	mov	r25, r15
 480:	be 01       	movw	r22, r28
 482:	0e 94 d7 05 	call	0xbae	; 0xbae <__udivmodhi4>
 486:	26 2f       	mov	r18, r22
		number=number%temp;
 488:	e8 2e       	mov	r14, r24
 48a:	f9 2e       	mov	r15, r25
		temp=temp/10;
 48c:	ce 01       	movw	r24, r28
 48e:	b5 01       	movw	r22, r10
 490:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__divmodhi4>
 494:	eb 01       	movw	r28, r22
		putchar_lcd(a+48);
 496:	82 2f       	mov	r24, r18
 498:	80 5d       	subi	r24, 0xD0	; 208
 49a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <putchar_lcd>
}
void printnumber_lcd(unsigned int number){
	int a,n,i,temp;
	n= count_number(number);
	temp=pow(10,n-1);
	for(i=0;i<n;i++){
 49e:	0f 5f       	subi	r16, 0xFF	; 255
 4a0:	1f 4f       	sbci	r17, 0xFF	; 255
 4a2:	0c 15       	cp	r16, r12
 4a4:	1d 05       	cpc	r17, r13
 4a6:	54 f3       	brlt	.-44     	; 0x47c <__stack+0x1d>
	putchar_lcd(a+48);
	b=number%10;
	putchar_lcd(b+48);
	*/
	
}
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	1f 91       	pop	r17
 4ae:	0f 91       	pop	r16
 4b0:	ff 90       	pop	r15
 4b2:	ef 90       	pop	r14
 4b4:	df 90       	pop	r13
 4b6:	cf 90       	pop	r12
 4b8:	bf 90       	pop	r11
 4ba:	af 90       	pop	r10
 4bc:	08 95       	ret

000004be <putstr_lcd>:
putstr_lcd(unsigned char *str, unsigned int lenght){
 4be:	ef 92       	push	r14
 4c0:	ff 92       	push	r15
 4c2:	0f 93       	push	r16
 4c4:	1f 93       	push	r17
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	7b 01       	movw	r14, r22
	unsigned int i;
	for(i=0;i<lenght;i++){
 4cc:	61 15       	cp	r22, r1
 4ce:	71 05       	cpc	r23, r1
 4d0:	99 f0       	breq	.+38     	; 0x4f8 <putstr_lcd+0x3a>
 4d2:	08 2f       	mov	r16, r24
 4d4:	19 2f       	mov	r17, r25
 4d6:	c0 e0       	ldi	r28, 0x00	; 0
 4d8:	d0 e0       	ldi	r29, 0x00	; 0
		if(*(str+i)>0){ 
 4da:	f8 01       	movw	r30, r16
 4dc:	81 91       	ld	r24, Z+
 4de:	8f 01       	movw	r16, r30
 4e0:	88 23       	and	r24, r24
 4e2:	19 f0       	breq	.+6      	; 0x4ea <putstr_lcd+0x2c>
			putchar_lcd(*(str+i));
 4e4:	0e 94 db 01 	call	0x3b6	; 0x3b6 <putchar_lcd>
 4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <putstr_lcd+0x32>
			}
		else putchar_lcd(0);	
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	0e 94 db 01 	call	0x3b6	; 0x3b6 <putchar_lcd>
	*/
	
}
putstr_lcd(unsigned char *str, unsigned int lenght){
	unsigned int i;
	for(i=0;i<lenght;i++){
 4f0:	21 96       	adiw	r28, 0x01	; 1
 4f2:	ce 15       	cp	r28, r14
 4f4:	df 05       	cpc	r29, r15
 4f6:	88 f3       	brcs	.-30     	; 0x4da <putstr_lcd+0x1c>
		if(*(str+i)>0){ 
			putchar_lcd(*(str+i));
			}
		else putchar_lcd(0);	
}
}
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	1f 91       	pop	r17
 4fe:	0f 91       	pop	r16
 500:	ff 90       	pop	r15
 502:	ef 90       	pop	r14
 504:	08 95       	ret

00000506 <__fixsfsi>:
 506:	04 d0       	rcall	.+8      	; 0x510 <__fixunssfsi>
 508:	68 94       	set
 50a:	b1 11       	cpse	r27, r1
 50c:	8d c0       	rjmp	.+282    	; 0x628 <__fp_szero>
 50e:	08 95       	ret

00000510 <__fixunssfsi>:
 510:	70 d0       	rcall	.+224    	; 0x5f2 <__fp_splitA>
 512:	88 f0       	brcs	.+34     	; 0x536 <__fixunssfsi+0x26>
 514:	9f 57       	subi	r25, 0x7F	; 127
 516:	90 f0       	brcs	.+36     	; 0x53c <__fixunssfsi+0x2c>
 518:	b9 2f       	mov	r27, r25
 51a:	99 27       	eor	r25, r25
 51c:	b7 51       	subi	r27, 0x17	; 23
 51e:	a0 f0       	brcs	.+40     	; 0x548 <__fixunssfsi+0x38>
 520:	d1 f0       	breq	.+52     	; 0x556 <__fixunssfsi+0x46>
 522:	66 0f       	add	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	88 1f       	adc	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	1a f0       	brmi	.+6      	; 0x532 <__fixunssfsi+0x22>
 52c:	ba 95       	dec	r27
 52e:	c9 f7       	brne	.-14     	; 0x522 <__fixunssfsi+0x12>
 530:	12 c0       	rjmp	.+36     	; 0x556 <__fixunssfsi+0x46>
 532:	b1 30       	cpi	r27, 0x01	; 1
 534:	81 f0       	breq	.+32     	; 0x556 <__fixunssfsi+0x46>
 536:	77 d0       	rcall	.+238    	; 0x626 <__fp_zero>
 538:	b1 e0       	ldi	r27, 0x01	; 1
 53a:	08 95       	ret
 53c:	74 c0       	rjmp	.+232    	; 0x626 <__fp_zero>
 53e:	67 2f       	mov	r22, r23
 540:	78 2f       	mov	r23, r24
 542:	88 27       	eor	r24, r24
 544:	b8 5f       	subi	r27, 0xF8	; 248
 546:	39 f0       	breq	.+14     	; 0x556 <__fixunssfsi+0x46>
 548:	b9 3f       	cpi	r27, 0xF9	; 249
 54a:	cc f3       	brlt	.-14     	; 0x53e <__fixunssfsi+0x2e>
 54c:	86 95       	lsr	r24
 54e:	77 95       	ror	r23
 550:	67 95       	ror	r22
 552:	b3 95       	inc	r27
 554:	d9 f7       	brne	.-10     	; 0x54c <__fixunssfsi+0x3c>
 556:	3e f4       	brtc	.+14     	; 0x566 <__fixunssfsi+0x56>
 558:	90 95       	com	r25
 55a:	80 95       	com	r24
 55c:	70 95       	com	r23
 55e:	61 95       	neg	r22
 560:	7f 4f       	sbci	r23, 0xFF	; 255
 562:	8f 4f       	sbci	r24, 0xFF	; 255
 564:	9f 4f       	sbci	r25, 0xFF	; 255
 566:	08 95       	ret

00000568 <__floatunsisf>:
 568:	e8 94       	clt
 56a:	09 c0       	rjmp	.+18     	; 0x57e <__floatsisf+0x12>

0000056c <__floatsisf>:
 56c:	97 fb       	bst	r25, 7
 56e:	3e f4       	brtc	.+14     	; 0x57e <__floatsisf+0x12>
 570:	90 95       	com	r25
 572:	80 95       	com	r24
 574:	70 95       	com	r23
 576:	61 95       	neg	r22
 578:	7f 4f       	sbci	r23, 0xFF	; 255
 57a:	8f 4f       	sbci	r24, 0xFF	; 255
 57c:	9f 4f       	sbci	r25, 0xFF	; 255
 57e:	99 23       	and	r25, r25
 580:	a9 f0       	breq	.+42     	; 0x5ac <__floatsisf+0x40>
 582:	f9 2f       	mov	r31, r25
 584:	96 e9       	ldi	r25, 0x96	; 150
 586:	bb 27       	eor	r27, r27
 588:	93 95       	inc	r25
 58a:	f6 95       	lsr	r31
 58c:	87 95       	ror	r24
 58e:	77 95       	ror	r23
 590:	67 95       	ror	r22
 592:	b7 95       	ror	r27
 594:	f1 11       	cpse	r31, r1
 596:	f8 cf       	rjmp	.-16     	; 0x588 <__floatsisf+0x1c>
 598:	fa f4       	brpl	.+62     	; 0x5d8 <__floatsisf+0x6c>
 59a:	bb 0f       	add	r27, r27
 59c:	11 f4       	brne	.+4      	; 0x5a2 <__floatsisf+0x36>
 59e:	60 ff       	sbrs	r22, 0
 5a0:	1b c0       	rjmp	.+54     	; 0x5d8 <__floatsisf+0x6c>
 5a2:	6f 5f       	subi	r22, 0xFF	; 255
 5a4:	7f 4f       	sbci	r23, 0xFF	; 255
 5a6:	8f 4f       	sbci	r24, 0xFF	; 255
 5a8:	9f 4f       	sbci	r25, 0xFF	; 255
 5aa:	16 c0       	rjmp	.+44     	; 0x5d8 <__floatsisf+0x6c>
 5ac:	88 23       	and	r24, r24
 5ae:	11 f0       	breq	.+4      	; 0x5b4 <__floatsisf+0x48>
 5b0:	96 e9       	ldi	r25, 0x96	; 150
 5b2:	11 c0       	rjmp	.+34     	; 0x5d6 <__floatsisf+0x6a>
 5b4:	77 23       	and	r23, r23
 5b6:	21 f0       	breq	.+8      	; 0x5c0 <__floatsisf+0x54>
 5b8:	9e e8       	ldi	r25, 0x8E	; 142
 5ba:	87 2f       	mov	r24, r23
 5bc:	76 2f       	mov	r23, r22
 5be:	05 c0       	rjmp	.+10     	; 0x5ca <__floatsisf+0x5e>
 5c0:	66 23       	and	r22, r22
 5c2:	71 f0       	breq	.+28     	; 0x5e0 <__floatsisf+0x74>
 5c4:	96 e8       	ldi	r25, 0x86	; 134
 5c6:	86 2f       	mov	r24, r22
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	60 e0       	ldi	r22, 0x00	; 0
 5cc:	2a f0       	brmi	.+10     	; 0x5d8 <__floatsisf+0x6c>
 5ce:	9a 95       	dec	r25
 5d0:	66 0f       	add	r22, r22
 5d2:	77 1f       	adc	r23, r23
 5d4:	88 1f       	adc	r24, r24
 5d6:	da f7       	brpl	.-10     	; 0x5ce <__floatsisf+0x62>
 5d8:	88 0f       	add	r24, r24
 5da:	96 95       	lsr	r25
 5dc:	87 95       	ror	r24
 5de:	97 f9       	bld	r25, 7
 5e0:	08 95       	ret

000005e2 <__fp_split3>:
 5e2:	57 fd       	sbrc	r21, 7
 5e4:	90 58       	subi	r25, 0x80	; 128
 5e6:	44 0f       	add	r20, r20
 5e8:	55 1f       	adc	r21, r21
 5ea:	59 f0       	breq	.+22     	; 0x602 <__fp_splitA+0x10>
 5ec:	5f 3f       	cpi	r21, 0xFF	; 255
 5ee:	71 f0       	breq	.+28     	; 0x60c <__fp_splitA+0x1a>
 5f0:	47 95       	ror	r20

000005f2 <__fp_splitA>:
 5f2:	88 0f       	add	r24, r24
 5f4:	97 fb       	bst	r25, 7
 5f6:	99 1f       	adc	r25, r25
 5f8:	61 f0       	breq	.+24     	; 0x612 <__fp_splitA+0x20>
 5fa:	9f 3f       	cpi	r25, 0xFF	; 255
 5fc:	79 f0       	breq	.+30     	; 0x61c <__fp_splitA+0x2a>
 5fe:	87 95       	ror	r24
 600:	08 95       	ret
 602:	12 16       	cp	r1, r18
 604:	13 06       	cpc	r1, r19
 606:	14 06       	cpc	r1, r20
 608:	55 1f       	adc	r21, r21
 60a:	f2 cf       	rjmp	.-28     	; 0x5f0 <__fp_split3+0xe>
 60c:	46 95       	lsr	r20
 60e:	f1 df       	rcall	.-30     	; 0x5f2 <__fp_splitA>
 610:	08 c0       	rjmp	.+16     	; 0x622 <__fp_splitA+0x30>
 612:	16 16       	cp	r1, r22
 614:	17 06       	cpc	r1, r23
 616:	18 06       	cpc	r1, r24
 618:	99 1f       	adc	r25, r25
 61a:	f1 cf       	rjmp	.-30     	; 0x5fe <__fp_splitA+0xc>
 61c:	86 95       	lsr	r24
 61e:	71 05       	cpc	r23, r1
 620:	61 05       	cpc	r22, r1
 622:	08 94       	sec
 624:	08 95       	ret

00000626 <__fp_zero>:
 626:	e8 94       	clt

00000628 <__fp_szero>:
 628:	bb 27       	eor	r27, r27
 62a:	66 27       	eor	r22, r22
 62c:	77 27       	eor	r23, r23
 62e:	cb 01       	movw	r24, r22
 630:	97 f9       	bld	r25, 7
 632:	08 95       	ret

00000634 <pow>:
 634:	fa 01       	movw	r30, r20
 636:	ee 0f       	add	r30, r30
 638:	ff 1f       	adc	r31, r31
 63a:	30 96       	adiw	r30, 0x00	; 0
 63c:	21 05       	cpc	r18, r1
 63e:	31 05       	cpc	r19, r1
 640:	99 f1       	breq	.+102    	; 0x6a8 <pow+0x74>
 642:	61 15       	cp	r22, r1
 644:	71 05       	cpc	r23, r1
 646:	61 f4       	brne	.+24     	; 0x660 <pow+0x2c>
 648:	80 38       	cpi	r24, 0x80	; 128
 64a:	bf e3       	ldi	r27, 0x3F	; 63
 64c:	9b 07       	cpc	r25, r27
 64e:	49 f1       	breq	.+82     	; 0x6a2 <pow+0x6e>
 650:	68 94       	set
 652:	90 38       	cpi	r25, 0x80	; 128
 654:	81 05       	cpc	r24, r1
 656:	61 f0       	breq	.+24     	; 0x670 <pow+0x3c>
 658:	80 38       	cpi	r24, 0x80	; 128
 65a:	bf ef       	ldi	r27, 0xFF	; 255
 65c:	9b 07       	cpc	r25, r27
 65e:	41 f0       	breq	.+16     	; 0x670 <pow+0x3c>
 660:	99 23       	and	r25, r25
 662:	42 f5       	brpl	.+80     	; 0x6b4 <pow+0x80>
 664:	ff 3f       	cpi	r31, 0xFF	; 255
 666:	e1 05       	cpc	r30, r1
 668:	31 05       	cpc	r19, r1
 66a:	21 05       	cpc	r18, r1
 66c:	11 f1       	breq	.+68     	; 0x6b2 <pow+0x7e>
 66e:	e8 94       	clt
 670:	08 94       	sec
 672:	e7 95       	ror	r30
 674:	d9 01       	movw	r26, r18
 676:	aa 23       	and	r26, r26
 678:	29 f4       	brne	.+10     	; 0x684 <pow+0x50>
 67a:	ab 2f       	mov	r26, r27
 67c:	be 2f       	mov	r27, r30
 67e:	f8 5f       	subi	r31, 0xF8	; 248
 680:	d0 f3       	brcs	.-12     	; 0x676 <pow+0x42>
 682:	10 c0       	rjmp	.+32     	; 0x6a4 <pow+0x70>
 684:	ff 5f       	subi	r31, 0xFF	; 255
 686:	70 f4       	brcc	.+28     	; 0x6a4 <pow+0x70>
 688:	a6 95       	lsr	r26
 68a:	e0 f7       	brcc	.-8      	; 0x684 <pow+0x50>
 68c:	f7 39       	cpi	r31, 0x97	; 151
 68e:	50 f0       	brcs	.+20     	; 0x6a4 <pow+0x70>
 690:	19 f0       	breq	.+6      	; 0x698 <pow+0x64>
 692:	ff 3a       	cpi	r31, 0xAF	; 175
 694:	38 f4       	brcc	.+14     	; 0x6a4 <pow+0x70>
 696:	9f 77       	andi	r25, 0x7F	; 127
 698:	9f 93       	push	r25
 69a:	0c d0       	rcall	.+24     	; 0x6b4 <pow+0x80>
 69c:	0f 90       	pop	r0
 69e:	07 fc       	sbrc	r0, 7
 6a0:	90 58       	subi	r25, 0x80	; 128
 6a2:	08 95       	ret
 6a4:	3e f0       	brts	.+14     	; 0x6b4 <pow+0x80>
 6a6:	49 c0       	rjmp	.+146    	; 0x73a <__fp_nan>
 6a8:	60 e0       	ldi	r22, 0x00	; 0
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	80 e8       	ldi	r24, 0x80	; 128
 6ae:	9f e3       	ldi	r25, 0x3F	; 63
 6b0:	08 95       	ret
 6b2:	4f e7       	ldi	r20, 0x7F	; 127
 6b4:	9f 77       	andi	r25, 0x7F	; 127
 6b6:	5f 93       	push	r21
 6b8:	4f 93       	push	r20
 6ba:	3f 93       	push	r19
 6bc:	2f 93       	push	r18
 6be:	a7 d0       	rcall	.+334    	; 0x80e <log>
 6c0:	2f 91       	pop	r18
 6c2:	3f 91       	pop	r19
 6c4:	4f 91       	pop	r20
 6c6:	5f 91       	pop	r21
 6c8:	15 d1       	rcall	.+554    	; 0x8f4 <__mulsf3>
 6ca:	05 c0       	rjmp	.+10     	; 0x6d6 <exp>
 6cc:	19 f4       	brne	.+6      	; 0x6d4 <pow+0xa0>
 6ce:	0e f0       	brts	.+2      	; 0x6d2 <pow+0x9e>
 6d0:	2e c0       	rjmp	.+92     	; 0x72e <__fp_inf>
 6d2:	a9 cf       	rjmp	.-174    	; 0x626 <__fp_zero>
 6d4:	32 c0       	rjmp	.+100    	; 0x73a <__fp_nan>

000006d6 <exp>:
 6d6:	8d df       	rcall	.-230    	; 0x5f2 <__fp_splitA>
 6d8:	c8 f3       	brcs	.-14     	; 0x6cc <pow+0x98>
 6da:	96 38       	cpi	r25, 0x86	; 134
 6dc:	c0 f7       	brcc	.-16     	; 0x6ce <pow+0x9a>
 6de:	07 f8       	bld	r0, 7
 6e0:	0f 92       	push	r0
 6e2:	e8 94       	clt
 6e4:	2b e3       	ldi	r18, 0x3B	; 59
 6e6:	3a ea       	ldi	r19, 0xAA	; 170
 6e8:	48 eb       	ldi	r20, 0xB8	; 184
 6ea:	5f e7       	ldi	r21, 0x7F	; 127
 6ec:	11 d1       	rcall	.+546    	; 0x910 <__mulsf3_pse>
 6ee:	0f 92       	push	r0
 6f0:	0f 92       	push	r0
 6f2:	0f 92       	push	r0
 6f4:	4d b7       	in	r20, 0x3d	; 61
 6f6:	5e b7       	in	r21, 0x3e	; 62
 6f8:	0f 92       	push	r0
 6fa:	c9 d0       	rcall	.+402    	; 0x88e <modf>
 6fc:	e4 e5       	ldi	r30, 0x54	; 84
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	1f d0       	rcall	.+62     	; 0x740 <__fp_powser>
 702:	4f 91       	pop	r20
 704:	5f 91       	pop	r21
 706:	ef 91       	pop	r30
 708:	ff 91       	pop	r31
 70a:	e5 95       	asr	r30
 70c:	ee 1f       	adc	r30, r30
 70e:	ff 1f       	adc	r31, r31
 710:	49 f0       	breq	.+18     	; 0x724 <exp+0x4e>
 712:	fe 57       	subi	r31, 0x7E	; 126
 714:	e0 68       	ori	r30, 0x80	; 128
 716:	44 27       	eor	r20, r20
 718:	ee 0f       	add	r30, r30
 71a:	44 1f       	adc	r20, r20
 71c:	fa 95       	dec	r31
 71e:	e1 f7       	brne	.-8      	; 0x718 <exp+0x42>
 720:	41 95       	neg	r20
 722:	55 0b       	sbc	r21, r21
 724:	3b d0       	rcall	.+118    	; 0x79c <ldexp>
 726:	0f 90       	pop	r0
 728:	07 fe       	sbrs	r0, 7
 72a:	2f c0       	rjmp	.+94     	; 0x78a <inverse>
 72c:	08 95       	ret

0000072e <__fp_inf>:
 72e:	97 f9       	bld	r25, 7
 730:	9f 67       	ori	r25, 0x7F	; 127
 732:	80 e8       	ldi	r24, 0x80	; 128
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	08 95       	ret

0000073a <__fp_nan>:
 73a:	9f ef       	ldi	r25, 0xFF	; 255
 73c:	80 ec       	ldi	r24, 0xC0	; 192
 73e:	08 95       	ret

00000740 <__fp_powser>:
 740:	df 93       	push	r29
 742:	cf 93       	push	r28
 744:	1f 93       	push	r17
 746:	0f 93       	push	r16
 748:	ff 92       	push	r15
 74a:	ef 92       	push	r14
 74c:	df 92       	push	r13
 74e:	7b 01       	movw	r14, r22
 750:	8c 01       	movw	r16, r24
 752:	68 94       	set
 754:	05 c0       	rjmp	.+10     	; 0x760 <__fp_powser+0x20>
 756:	da 2e       	mov	r13, r26
 758:	ef 01       	movw	r28, r30
 75a:	d8 d0       	rcall	.+432    	; 0x90c <__mulsf3x>
 75c:	fe 01       	movw	r30, r28
 75e:	e8 94       	clt
 760:	a5 91       	lpm	r26, Z+
 762:	25 91       	lpm	r18, Z+
 764:	35 91       	lpm	r19, Z+
 766:	45 91       	lpm	r20, Z+
 768:	55 91       	lpm	r21, Z+
 76a:	ae f3       	brts	.-22     	; 0x756 <__fp_powser+0x16>
 76c:	ef 01       	movw	r28, r30
 76e:	37 d1       	rcall	.+622    	; 0x9de <__addsf3x>
 770:	fe 01       	movw	r30, r28
 772:	97 01       	movw	r18, r14
 774:	a8 01       	movw	r20, r16
 776:	da 94       	dec	r13
 778:	79 f7       	brne	.-34     	; 0x758 <__fp_powser+0x18>
 77a:	df 90       	pop	r13
 77c:	ef 90       	pop	r14
 77e:	ff 90       	pop	r15
 780:	0f 91       	pop	r16
 782:	1f 91       	pop	r17
 784:	cf 91       	pop	r28
 786:	df 91       	pop	r29
 788:	08 95       	ret

0000078a <inverse>:
 78a:	9b 01       	movw	r18, r22
 78c:	ac 01       	movw	r20, r24
 78e:	60 e0       	ldi	r22, 0x00	; 0
 790:	70 e0       	ldi	r23, 0x00	; 0
 792:	80 e8       	ldi	r24, 0x80	; 128
 794:	9f e3       	ldi	r25, 0x3F	; 63
 796:	76 c1       	rjmp	.+748    	; 0xa84 <__divsf3>
 798:	ca cf       	rjmp	.-108    	; 0x72e <__fp_inf>
 79a:	dc c1       	rjmp	.+952    	; 0xb54 <__fp_mpack>

0000079c <ldexp>:
 79c:	2a df       	rcall	.-428    	; 0x5f2 <__fp_splitA>
 79e:	e8 f3       	brcs	.-6      	; 0x79a <inverse+0x10>
 7a0:	99 23       	and	r25, r25
 7a2:	d9 f3       	breq	.-10     	; 0x79a <inverse+0x10>
 7a4:	94 0f       	add	r25, r20
 7a6:	51 1d       	adc	r21, r1
 7a8:	bb f3       	brvs	.-18     	; 0x798 <inverse+0xe>
 7aa:	91 50       	subi	r25, 0x01	; 1
 7ac:	50 40       	sbci	r21, 0x00	; 0
 7ae:	94 f0       	brlt	.+36     	; 0x7d4 <ldexp+0x38>
 7b0:	59 f0       	breq	.+22     	; 0x7c8 <ldexp+0x2c>
 7b2:	88 23       	and	r24, r24
 7b4:	32 f0       	brmi	.+12     	; 0x7c2 <ldexp+0x26>
 7b6:	66 0f       	add	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	88 1f       	adc	r24, r24
 7bc:	91 50       	subi	r25, 0x01	; 1
 7be:	50 40       	sbci	r21, 0x00	; 0
 7c0:	c1 f7       	brne	.-16     	; 0x7b2 <ldexp+0x16>
 7c2:	9e 3f       	cpi	r25, 0xFE	; 254
 7c4:	51 05       	cpc	r21, r1
 7c6:	44 f7       	brge	.-48     	; 0x798 <inverse+0xe>
 7c8:	88 0f       	add	r24, r24
 7ca:	91 1d       	adc	r25, r1
 7cc:	96 95       	lsr	r25
 7ce:	87 95       	ror	r24
 7d0:	97 f9       	bld	r25, 7
 7d2:	08 95       	ret
 7d4:	5f 3f       	cpi	r21, 0xFF	; 255
 7d6:	ac f0       	brlt	.+42     	; 0x802 <ldexp+0x66>
 7d8:	98 3e       	cpi	r25, 0xE8	; 232
 7da:	9c f0       	brlt	.+38     	; 0x802 <ldexp+0x66>
 7dc:	bb 27       	eor	r27, r27
 7de:	86 95       	lsr	r24
 7e0:	77 95       	ror	r23
 7e2:	67 95       	ror	r22
 7e4:	b7 95       	ror	r27
 7e6:	08 f4       	brcc	.+2      	; 0x7ea <ldexp+0x4e>
 7e8:	b1 60       	ori	r27, 0x01	; 1
 7ea:	93 95       	inc	r25
 7ec:	c1 f7       	brne	.-16     	; 0x7de <ldexp+0x42>
 7ee:	bb 0f       	add	r27, r27
 7f0:	58 f7       	brcc	.-42     	; 0x7c8 <ldexp+0x2c>
 7f2:	11 f4       	brne	.+4      	; 0x7f8 <ldexp+0x5c>
 7f4:	60 ff       	sbrs	r22, 0
 7f6:	e8 cf       	rjmp	.-48     	; 0x7c8 <ldexp+0x2c>
 7f8:	6f 5f       	subi	r22, 0xFF	; 255
 7fa:	7f 4f       	sbci	r23, 0xFF	; 255
 7fc:	8f 4f       	sbci	r24, 0xFF	; 255
 7fe:	9f 4f       	sbci	r25, 0xFF	; 255
 800:	e3 cf       	rjmp	.-58     	; 0x7c8 <ldexp+0x2c>
 802:	12 cf       	rjmp	.-476    	; 0x628 <__fp_szero>
 804:	0e f0       	brts	.+2      	; 0x808 <ldexp+0x6c>
 806:	a6 c1       	rjmp	.+844    	; 0xb54 <__fp_mpack>
 808:	98 cf       	rjmp	.-208    	; 0x73a <__fp_nan>
 80a:	68 94       	set
 80c:	90 cf       	rjmp	.-224    	; 0x72e <__fp_inf>

0000080e <log>:
 80e:	f1 de       	rcall	.-542    	; 0x5f2 <__fp_splitA>
 810:	c8 f3       	brcs	.-14     	; 0x804 <ldexp+0x68>
 812:	99 23       	and	r25, r25
 814:	d1 f3       	breq	.-12     	; 0x80a <ldexp+0x6e>
 816:	c6 f3       	brts	.-16     	; 0x808 <ldexp+0x6c>
 818:	df 93       	push	r29
 81a:	cf 93       	push	r28
 81c:	1f 93       	push	r17
 81e:	0f 93       	push	r16
 820:	ff 92       	push	r15
 822:	c9 2f       	mov	r28, r25
 824:	dd 27       	eor	r29, r29
 826:	88 23       	and	r24, r24
 828:	2a f0       	brmi	.+10     	; 0x834 <log+0x26>
 82a:	21 97       	sbiw	r28, 0x01	; 1
 82c:	66 0f       	add	r22, r22
 82e:	77 1f       	adc	r23, r23
 830:	88 1f       	adc	r24, r24
 832:	da f7       	brpl	.-10     	; 0x82a <log+0x1c>
 834:	20 e0       	ldi	r18, 0x00	; 0
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	40 e8       	ldi	r20, 0x80	; 128
 83a:	5f eb       	ldi	r21, 0xBF	; 191
 83c:	9f e3       	ldi	r25, 0x3F	; 63
 83e:	88 39       	cpi	r24, 0x98	; 152
 840:	20 f0       	brcs	.+8      	; 0x84a <log+0x3c>
 842:	80 3e       	cpi	r24, 0xE0	; 224
 844:	30 f0       	brcs	.+12     	; 0x852 <log+0x44>
 846:	21 96       	adiw	r28, 0x01	; 1
 848:	8f 77       	andi	r24, 0x7F	; 127
 84a:	b8 d0       	rcall	.+368    	; 0x9bc <__addsf3>
 84c:	ec e7       	ldi	r30, 0x7C	; 124
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	03 c0       	rjmp	.+6      	; 0x858 <log+0x4a>
 852:	b4 d0       	rcall	.+360    	; 0x9bc <__addsf3>
 854:	e9 ea       	ldi	r30, 0xA9	; 169
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	73 df       	rcall	.-282    	; 0x740 <__fp_powser>
 85a:	8b 01       	movw	r16, r22
 85c:	be 01       	movw	r22, r28
 85e:	ec 01       	movw	r28, r24
 860:	fb 2e       	mov	r15, r27
 862:	6f 57       	subi	r22, 0x7F	; 127
 864:	71 09       	sbc	r23, r1
 866:	75 95       	asr	r23
 868:	77 1f       	adc	r23, r23
 86a:	88 0b       	sbc	r24, r24
 86c:	99 0b       	sbc	r25, r25
 86e:	7e de       	rcall	.-772    	; 0x56c <__floatsisf>
 870:	28 e1       	ldi	r18, 0x18	; 24
 872:	32 e7       	ldi	r19, 0x72	; 114
 874:	41 e3       	ldi	r20, 0x31	; 49
 876:	5f e3       	ldi	r21, 0x3F	; 63
 878:	49 d0       	rcall	.+146    	; 0x90c <__mulsf3x>
 87a:	af 2d       	mov	r26, r15
 87c:	98 01       	movw	r18, r16
 87e:	ae 01       	movw	r20, r28
 880:	ff 90       	pop	r15
 882:	0f 91       	pop	r16
 884:	1f 91       	pop	r17
 886:	cf 91       	pop	r28
 888:	df 91       	pop	r29
 88a:	a9 d0       	rcall	.+338    	; 0x9de <__addsf3x>
 88c:	7f c1       	rjmp	.+766    	; 0xb8c <__fp_round>

0000088e <modf>:
 88e:	fa 01       	movw	r30, r20
 890:	dc 01       	movw	r26, r24
 892:	aa 0f       	add	r26, r26
 894:	bb 1f       	adc	r27, r27
 896:	9b 01       	movw	r18, r22
 898:	ac 01       	movw	r20, r24
 89a:	bf 57       	subi	r27, 0x7F	; 127
 89c:	28 f4       	brcc	.+10     	; 0x8a8 <modf+0x1a>
 89e:	22 27       	eor	r18, r18
 8a0:	33 27       	eor	r19, r19
 8a2:	44 27       	eor	r20, r20
 8a4:	50 78       	andi	r21, 0x80	; 128
 8a6:	1f c0       	rjmp	.+62     	; 0x8e6 <modf+0x58>
 8a8:	b7 51       	subi	r27, 0x17	; 23
 8aa:	88 f4       	brcc	.+34     	; 0x8ce <modf+0x40>
 8ac:	ab 2f       	mov	r26, r27
 8ae:	00 24       	eor	r0, r0
 8b0:	46 95       	lsr	r20
 8b2:	37 95       	ror	r19
 8b4:	27 95       	ror	r18
 8b6:	01 1c       	adc	r0, r1
 8b8:	a3 95       	inc	r26
 8ba:	d2 f3       	brmi	.-12     	; 0x8b0 <modf+0x22>
 8bc:	00 20       	and	r0, r0
 8be:	69 f0       	breq	.+26     	; 0x8da <modf+0x4c>
 8c0:	22 0f       	add	r18, r18
 8c2:	33 1f       	adc	r19, r19
 8c4:	44 1f       	adc	r20, r20
 8c6:	b3 95       	inc	r27
 8c8:	da f3       	brmi	.-10     	; 0x8c0 <modf+0x32>
 8ca:	0d d0       	rcall	.+26     	; 0x8e6 <modf+0x58>
 8cc:	76 c0       	rjmp	.+236    	; 0x9ba <__subsf3>
 8ce:	61 30       	cpi	r22, 0x01	; 1
 8d0:	71 05       	cpc	r23, r1
 8d2:	a0 e8       	ldi	r26, 0x80	; 128
 8d4:	8a 07       	cpc	r24, r26
 8d6:	b9 46       	sbci	r27, 0x69	; 105
 8d8:	30 f4       	brcc	.+12     	; 0x8e6 <modf+0x58>
 8da:	9b 01       	movw	r18, r22
 8dc:	ac 01       	movw	r20, r24
 8de:	66 27       	eor	r22, r22
 8e0:	77 27       	eor	r23, r23
 8e2:	88 27       	eor	r24, r24
 8e4:	90 78       	andi	r25, 0x80	; 128
 8e6:	30 96       	adiw	r30, 0x00	; 0
 8e8:	21 f0       	breq	.+8      	; 0x8f2 <modf+0x64>
 8ea:	20 83       	st	Z, r18
 8ec:	31 83       	std	Z+1, r19	; 0x01
 8ee:	42 83       	std	Z+2, r20	; 0x02
 8f0:	53 83       	std	Z+3, r21	; 0x03
 8f2:	08 95       	ret

000008f4 <__mulsf3>:
 8f4:	0b d0       	rcall	.+22     	; 0x90c <__mulsf3x>
 8f6:	4a c1       	rjmp	.+660    	; 0xb8c <__fp_round>
 8f8:	3b d1       	rcall	.+630    	; 0xb70 <__fp_pscA>
 8fa:	28 f0       	brcs	.+10     	; 0x906 <__mulsf3+0x12>
 8fc:	40 d1       	rcall	.+640    	; 0xb7e <__fp_pscB>
 8fe:	18 f0       	brcs	.+6      	; 0x906 <__mulsf3+0x12>
 900:	95 23       	and	r25, r21
 902:	09 f0       	breq	.+2      	; 0x906 <__mulsf3+0x12>
 904:	14 cf       	rjmp	.-472    	; 0x72e <__fp_inf>
 906:	19 cf       	rjmp	.-462    	; 0x73a <__fp_nan>
 908:	11 24       	eor	r1, r1
 90a:	8e ce       	rjmp	.-740    	; 0x628 <__fp_szero>

0000090c <__mulsf3x>:
 90c:	6a de       	rcall	.-812    	; 0x5e2 <__fp_split3>
 90e:	a0 f3       	brcs	.-24     	; 0x8f8 <__mulsf3+0x4>

00000910 <__mulsf3_pse>:
 910:	95 9f       	mul	r25, r21
 912:	d1 f3       	breq	.-12     	; 0x908 <__mulsf3+0x14>
 914:	95 0f       	add	r25, r21
 916:	50 e0       	ldi	r21, 0x00	; 0
 918:	55 1f       	adc	r21, r21
 91a:	62 9f       	mul	r22, r18
 91c:	f0 01       	movw	r30, r0
 91e:	72 9f       	mul	r23, r18
 920:	bb 27       	eor	r27, r27
 922:	f0 0d       	add	r31, r0
 924:	b1 1d       	adc	r27, r1
 926:	63 9f       	mul	r22, r19
 928:	aa 27       	eor	r26, r26
 92a:	f0 0d       	add	r31, r0
 92c:	b1 1d       	adc	r27, r1
 92e:	aa 1f       	adc	r26, r26
 930:	64 9f       	mul	r22, r20
 932:	66 27       	eor	r22, r22
 934:	b0 0d       	add	r27, r0
 936:	a1 1d       	adc	r26, r1
 938:	66 1f       	adc	r22, r22
 93a:	82 9f       	mul	r24, r18
 93c:	22 27       	eor	r18, r18
 93e:	b0 0d       	add	r27, r0
 940:	a1 1d       	adc	r26, r1
 942:	62 1f       	adc	r22, r18
 944:	73 9f       	mul	r23, r19
 946:	b0 0d       	add	r27, r0
 948:	a1 1d       	adc	r26, r1
 94a:	62 1f       	adc	r22, r18
 94c:	83 9f       	mul	r24, r19
 94e:	a0 0d       	add	r26, r0
 950:	61 1d       	adc	r22, r1
 952:	22 1f       	adc	r18, r18
 954:	74 9f       	mul	r23, r20
 956:	33 27       	eor	r19, r19
 958:	a0 0d       	add	r26, r0
 95a:	61 1d       	adc	r22, r1
 95c:	23 1f       	adc	r18, r19
 95e:	84 9f       	mul	r24, r20
 960:	60 0d       	add	r22, r0
 962:	21 1d       	adc	r18, r1
 964:	82 2f       	mov	r24, r18
 966:	76 2f       	mov	r23, r22
 968:	6a 2f       	mov	r22, r26
 96a:	11 24       	eor	r1, r1
 96c:	9f 57       	subi	r25, 0x7F	; 127
 96e:	50 40       	sbci	r21, 0x00	; 0
 970:	8a f0       	brmi	.+34     	; 0x994 <__mulsf3_pse+0x84>
 972:	e1 f0       	breq	.+56     	; 0x9ac <__mulsf3_pse+0x9c>
 974:	88 23       	and	r24, r24
 976:	4a f0       	brmi	.+18     	; 0x98a <__mulsf3_pse+0x7a>
 978:	ee 0f       	add	r30, r30
 97a:	ff 1f       	adc	r31, r31
 97c:	bb 1f       	adc	r27, r27
 97e:	66 1f       	adc	r22, r22
 980:	77 1f       	adc	r23, r23
 982:	88 1f       	adc	r24, r24
 984:	91 50       	subi	r25, 0x01	; 1
 986:	50 40       	sbci	r21, 0x00	; 0
 988:	a9 f7       	brne	.-22     	; 0x974 <__mulsf3_pse+0x64>
 98a:	9e 3f       	cpi	r25, 0xFE	; 254
 98c:	51 05       	cpc	r21, r1
 98e:	70 f0       	brcs	.+28     	; 0x9ac <__mulsf3_pse+0x9c>
 990:	ce ce       	rjmp	.-612    	; 0x72e <__fp_inf>
 992:	4a ce       	rjmp	.-876    	; 0x628 <__fp_szero>
 994:	5f 3f       	cpi	r21, 0xFF	; 255
 996:	ec f3       	brlt	.-6      	; 0x992 <__mulsf3_pse+0x82>
 998:	98 3e       	cpi	r25, 0xE8	; 232
 99a:	dc f3       	brlt	.-10     	; 0x992 <__mulsf3_pse+0x82>
 99c:	86 95       	lsr	r24
 99e:	77 95       	ror	r23
 9a0:	67 95       	ror	r22
 9a2:	b7 95       	ror	r27
 9a4:	f7 95       	ror	r31
 9a6:	e7 95       	ror	r30
 9a8:	9f 5f       	subi	r25, 0xFF	; 255
 9aa:	c1 f7       	brne	.-16     	; 0x99c <__mulsf3_pse+0x8c>
 9ac:	fe 2b       	or	r31, r30
 9ae:	88 0f       	add	r24, r24
 9b0:	91 1d       	adc	r25, r1
 9b2:	96 95       	lsr	r25
 9b4:	87 95       	ror	r24
 9b6:	97 f9       	bld	r25, 7
 9b8:	08 95       	ret

000009ba <__subsf3>:
 9ba:	50 58       	subi	r21, 0x80	; 128

000009bc <__addsf3>:
 9bc:	bb 27       	eor	r27, r27
 9be:	aa 27       	eor	r26, r26
 9c0:	0e d0       	rcall	.+28     	; 0x9de <__addsf3x>
 9c2:	e4 c0       	rjmp	.+456    	; 0xb8c <__fp_round>
 9c4:	d5 d0       	rcall	.+426    	; 0xb70 <__fp_pscA>
 9c6:	30 f0       	brcs	.+12     	; 0x9d4 <__addsf3+0x18>
 9c8:	da d0       	rcall	.+436    	; 0xb7e <__fp_pscB>
 9ca:	20 f0       	brcs	.+8      	; 0x9d4 <__addsf3+0x18>
 9cc:	31 f4       	brne	.+12     	; 0x9da <__addsf3+0x1e>
 9ce:	9f 3f       	cpi	r25, 0xFF	; 255
 9d0:	11 f4       	brne	.+4      	; 0x9d6 <__addsf3+0x1a>
 9d2:	1e f4       	brtc	.+6      	; 0x9da <__addsf3+0x1e>
 9d4:	b2 ce       	rjmp	.-668    	; 0x73a <__fp_nan>
 9d6:	0e f4       	brtc	.+2      	; 0x9da <__addsf3+0x1e>
 9d8:	e0 95       	com	r30
 9da:	e7 fb       	bst	r30, 7
 9dc:	a8 ce       	rjmp	.-688    	; 0x72e <__fp_inf>

000009de <__addsf3x>:
 9de:	e9 2f       	mov	r30, r25
 9e0:	00 de       	rcall	.-1024   	; 0x5e2 <__fp_split3>
 9e2:	80 f3       	brcs	.-32     	; 0x9c4 <__addsf3+0x8>
 9e4:	ba 17       	cp	r27, r26
 9e6:	62 07       	cpc	r22, r18
 9e8:	73 07       	cpc	r23, r19
 9ea:	84 07       	cpc	r24, r20
 9ec:	95 07       	cpc	r25, r21
 9ee:	18 f0       	brcs	.+6      	; 0x9f6 <__addsf3x+0x18>
 9f0:	71 f4       	brne	.+28     	; 0xa0e <__addsf3x+0x30>
 9f2:	9e f5       	brtc	.+102    	; 0xa5a <__addsf3x+0x7c>
 9f4:	18 ce       	rjmp	.-976    	; 0x626 <__fp_zero>
 9f6:	0e f4       	brtc	.+2      	; 0x9fa <__addsf3x+0x1c>
 9f8:	e0 95       	com	r30
 9fa:	0b 2e       	mov	r0, r27
 9fc:	ba 2f       	mov	r27, r26
 9fe:	a0 2d       	mov	r26, r0
 a00:	0b 01       	movw	r0, r22
 a02:	b9 01       	movw	r22, r18
 a04:	90 01       	movw	r18, r0
 a06:	0c 01       	movw	r0, r24
 a08:	ca 01       	movw	r24, r20
 a0a:	a0 01       	movw	r20, r0
 a0c:	11 24       	eor	r1, r1
 a0e:	ff 27       	eor	r31, r31
 a10:	59 1b       	sub	r21, r25
 a12:	99 f0       	breq	.+38     	; 0xa3a <__addsf3x+0x5c>
 a14:	59 3f       	cpi	r21, 0xF9	; 249
 a16:	50 f4       	brcc	.+20     	; 0xa2c <__addsf3x+0x4e>
 a18:	50 3e       	cpi	r21, 0xE0	; 224
 a1a:	68 f1       	brcs	.+90     	; 0xa76 <__addsf3x+0x98>
 a1c:	1a 16       	cp	r1, r26
 a1e:	f0 40       	sbci	r31, 0x00	; 0
 a20:	a2 2f       	mov	r26, r18
 a22:	23 2f       	mov	r18, r19
 a24:	34 2f       	mov	r19, r20
 a26:	44 27       	eor	r20, r20
 a28:	58 5f       	subi	r21, 0xF8	; 248
 a2a:	f3 cf       	rjmp	.-26     	; 0xa12 <__addsf3x+0x34>
 a2c:	46 95       	lsr	r20
 a2e:	37 95       	ror	r19
 a30:	27 95       	ror	r18
 a32:	a7 95       	ror	r26
 a34:	f0 40       	sbci	r31, 0x00	; 0
 a36:	53 95       	inc	r21
 a38:	c9 f7       	brne	.-14     	; 0xa2c <__addsf3x+0x4e>
 a3a:	7e f4       	brtc	.+30     	; 0xa5a <__addsf3x+0x7c>
 a3c:	1f 16       	cp	r1, r31
 a3e:	ba 0b       	sbc	r27, r26
 a40:	62 0b       	sbc	r22, r18
 a42:	73 0b       	sbc	r23, r19
 a44:	84 0b       	sbc	r24, r20
 a46:	ba f0       	brmi	.+46     	; 0xa76 <__addsf3x+0x98>
 a48:	91 50       	subi	r25, 0x01	; 1
 a4a:	a1 f0       	breq	.+40     	; 0xa74 <__addsf3x+0x96>
 a4c:	ff 0f       	add	r31, r31
 a4e:	bb 1f       	adc	r27, r27
 a50:	66 1f       	adc	r22, r22
 a52:	77 1f       	adc	r23, r23
 a54:	88 1f       	adc	r24, r24
 a56:	c2 f7       	brpl	.-16     	; 0xa48 <__addsf3x+0x6a>
 a58:	0e c0       	rjmp	.+28     	; 0xa76 <__addsf3x+0x98>
 a5a:	ba 0f       	add	r27, r26
 a5c:	62 1f       	adc	r22, r18
 a5e:	73 1f       	adc	r23, r19
 a60:	84 1f       	adc	r24, r20
 a62:	48 f4       	brcc	.+18     	; 0xa76 <__addsf3x+0x98>
 a64:	87 95       	ror	r24
 a66:	77 95       	ror	r23
 a68:	67 95       	ror	r22
 a6a:	b7 95       	ror	r27
 a6c:	f7 95       	ror	r31
 a6e:	9e 3f       	cpi	r25, 0xFE	; 254
 a70:	08 f0       	brcs	.+2      	; 0xa74 <__addsf3x+0x96>
 a72:	b3 cf       	rjmp	.-154    	; 0x9da <__addsf3+0x1e>
 a74:	93 95       	inc	r25
 a76:	88 0f       	add	r24, r24
 a78:	08 f0       	brcs	.+2      	; 0xa7c <__addsf3x+0x9e>
 a7a:	99 27       	eor	r25, r25
 a7c:	ee 0f       	add	r30, r30
 a7e:	97 95       	ror	r25
 a80:	87 95       	ror	r24
 a82:	08 95       	ret

00000a84 <__divsf3>:
 a84:	0c d0       	rcall	.+24     	; 0xa9e <__divsf3x>
 a86:	82 c0       	rjmp	.+260    	; 0xb8c <__fp_round>
 a88:	7a d0       	rcall	.+244    	; 0xb7e <__fp_pscB>
 a8a:	40 f0       	brcs	.+16     	; 0xa9c <__divsf3+0x18>
 a8c:	71 d0       	rcall	.+226    	; 0xb70 <__fp_pscA>
 a8e:	30 f0       	brcs	.+12     	; 0xa9c <__divsf3+0x18>
 a90:	21 f4       	brne	.+8      	; 0xa9a <__divsf3+0x16>
 a92:	5f 3f       	cpi	r21, 0xFF	; 255
 a94:	19 f0       	breq	.+6      	; 0xa9c <__divsf3+0x18>
 a96:	4b ce       	rjmp	.-874    	; 0x72e <__fp_inf>
 a98:	51 11       	cpse	r21, r1
 a9a:	c6 cd       	rjmp	.-1140   	; 0x628 <__fp_szero>
 a9c:	4e ce       	rjmp	.-868    	; 0x73a <__fp_nan>

00000a9e <__divsf3x>:
 a9e:	a1 dd       	rcall	.-1214   	; 0x5e2 <__fp_split3>
 aa0:	98 f3       	brcs	.-26     	; 0xa88 <__divsf3+0x4>

00000aa2 <__divsf3_pse>:
 aa2:	99 23       	and	r25, r25
 aa4:	c9 f3       	breq	.-14     	; 0xa98 <__divsf3+0x14>
 aa6:	55 23       	and	r21, r21
 aa8:	b1 f3       	breq	.-20     	; 0xa96 <__divsf3+0x12>
 aaa:	95 1b       	sub	r25, r21
 aac:	55 0b       	sbc	r21, r21
 aae:	bb 27       	eor	r27, r27
 ab0:	aa 27       	eor	r26, r26
 ab2:	62 17       	cp	r22, r18
 ab4:	73 07       	cpc	r23, r19
 ab6:	84 07       	cpc	r24, r20
 ab8:	38 f0       	brcs	.+14     	; 0xac8 <__divsf3_pse+0x26>
 aba:	9f 5f       	subi	r25, 0xFF	; 255
 abc:	5f 4f       	sbci	r21, 0xFF	; 255
 abe:	22 0f       	add	r18, r18
 ac0:	33 1f       	adc	r19, r19
 ac2:	44 1f       	adc	r20, r20
 ac4:	aa 1f       	adc	r26, r26
 ac6:	a9 f3       	breq	.-22     	; 0xab2 <__divsf3_pse+0x10>
 ac8:	33 d0       	rcall	.+102    	; 0xb30 <__divsf3_pse+0x8e>
 aca:	0e 2e       	mov	r0, r30
 acc:	3a f0       	brmi	.+14     	; 0xadc <__divsf3_pse+0x3a>
 ace:	e0 e8       	ldi	r30, 0x80	; 128
 ad0:	30 d0       	rcall	.+96     	; 0xb32 <__divsf3_pse+0x90>
 ad2:	91 50       	subi	r25, 0x01	; 1
 ad4:	50 40       	sbci	r21, 0x00	; 0
 ad6:	e6 95       	lsr	r30
 ad8:	00 1c       	adc	r0, r0
 ada:	ca f7       	brpl	.-14     	; 0xace <__divsf3_pse+0x2c>
 adc:	29 d0       	rcall	.+82     	; 0xb30 <__divsf3_pse+0x8e>
 ade:	fe 2f       	mov	r31, r30
 ae0:	27 d0       	rcall	.+78     	; 0xb30 <__divsf3_pse+0x8e>
 ae2:	66 0f       	add	r22, r22
 ae4:	77 1f       	adc	r23, r23
 ae6:	88 1f       	adc	r24, r24
 ae8:	bb 1f       	adc	r27, r27
 aea:	26 17       	cp	r18, r22
 aec:	37 07       	cpc	r19, r23
 aee:	48 07       	cpc	r20, r24
 af0:	ab 07       	cpc	r26, r27
 af2:	b0 e8       	ldi	r27, 0x80	; 128
 af4:	09 f0       	breq	.+2      	; 0xaf8 <__divsf3_pse+0x56>
 af6:	bb 0b       	sbc	r27, r27
 af8:	80 2d       	mov	r24, r0
 afa:	bf 01       	movw	r22, r30
 afc:	ff 27       	eor	r31, r31
 afe:	93 58       	subi	r25, 0x83	; 131
 b00:	5f 4f       	sbci	r21, 0xFF	; 255
 b02:	2a f0       	brmi	.+10     	; 0xb0e <__divsf3_pse+0x6c>
 b04:	9e 3f       	cpi	r25, 0xFE	; 254
 b06:	51 05       	cpc	r21, r1
 b08:	68 f0       	brcs	.+26     	; 0xb24 <__divsf3_pse+0x82>
 b0a:	11 ce       	rjmp	.-990    	; 0x72e <__fp_inf>
 b0c:	8d cd       	rjmp	.-1254   	; 0x628 <__fp_szero>
 b0e:	5f 3f       	cpi	r21, 0xFF	; 255
 b10:	ec f3       	brlt	.-6      	; 0xb0c <__divsf3_pse+0x6a>
 b12:	98 3e       	cpi	r25, 0xE8	; 232
 b14:	dc f3       	brlt	.-10     	; 0xb0c <__divsf3_pse+0x6a>
 b16:	86 95       	lsr	r24
 b18:	77 95       	ror	r23
 b1a:	67 95       	ror	r22
 b1c:	b7 95       	ror	r27
 b1e:	f7 95       	ror	r31
 b20:	9f 5f       	subi	r25, 0xFF	; 255
 b22:	c9 f7       	brne	.-14     	; 0xb16 <__divsf3_pse+0x74>
 b24:	88 0f       	add	r24, r24
 b26:	91 1d       	adc	r25, r1
 b28:	96 95       	lsr	r25
 b2a:	87 95       	ror	r24
 b2c:	97 f9       	bld	r25, 7
 b2e:	08 95       	ret
 b30:	e1 e0       	ldi	r30, 0x01	; 1
 b32:	66 0f       	add	r22, r22
 b34:	77 1f       	adc	r23, r23
 b36:	88 1f       	adc	r24, r24
 b38:	bb 1f       	adc	r27, r27
 b3a:	62 17       	cp	r22, r18
 b3c:	73 07       	cpc	r23, r19
 b3e:	84 07       	cpc	r24, r20
 b40:	ba 07       	cpc	r27, r26
 b42:	20 f0       	brcs	.+8      	; 0xb4c <__divsf3_pse+0xaa>
 b44:	62 1b       	sub	r22, r18
 b46:	73 0b       	sbc	r23, r19
 b48:	84 0b       	sbc	r24, r20
 b4a:	ba 0b       	sbc	r27, r26
 b4c:	ee 1f       	adc	r30, r30
 b4e:	88 f7       	brcc	.-30     	; 0xb32 <__divsf3_pse+0x90>
 b50:	e0 95       	com	r30
 b52:	08 95       	ret

00000b54 <__fp_mpack>:
 b54:	9f 3f       	cpi	r25, 0xFF	; 255
 b56:	31 f0       	breq	.+12     	; 0xb64 <__fp_mpack_finite+0xc>

00000b58 <__fp_mpack_finite>:
 b58:	91 50       	subi	r25, 0x01	; 1
 b5a:	20 f4       	brcc	.+8      	; 0xb64 <__fp_mpack_finite+0xc>
 b5c:	87 95       	ror	r24
 b5e:	77 95       	ror	r23
 b60:	67 95       	ror	r22
 b62:	b7 95       	ror	r27
 b64:	88 0f       	add	r24, r24
 b66:	91 1d       	adc	r25, r1
 b68:	96 95       	lsr	r25
 b6a:	87 95       	ror	r24
 b6c:	97 f9       	bld	r25, 7
 b6e:	08 95       	ret

00000b70 <__fp_pscA>:
 b70:	00 24       	eor	r0, r0
 b72:	0a 94       	dec	r0
 b74:	16 16       	cp	r1, r22
 b76:	17 06       	cpc	r1, r23
 b78:	18 06       	cpc	r1, r24
 b7a:	09 06       	cpc	r0, r25
 b7c:	08 95       	ret

00000b7e <__fp_pscB>:
 b7e:	00 24       	eor	r0, r0
 b80:	0a 94       	dec	r0
 b82:	12 16       	cp	r1, r18
 b84:	13 06       	cpc	r1, r19
 b86:	14 06       	cpc	r1, r20
 b88:	05 06       	cpc	r0, r21
 b8a:	08 95       	ret

00000b8c <__fp_round>:
 b8c:	09 2e       	mov	r0, r25
 b8e:	03 94       	inc	r0
 b90:	00 0c       	add	r0, r0
 b92:	11 f4       	brne	.+4      	; 0xb98 <__fp_round+0xc>
 b94:	88 23       	and	r24, r24
 b96:	52 f0       	brmi	.+20     	; 0xbac <__fp_round+0x20>
 b98:	bb 0f       	add	r27, r27
 b9a:	40 f4       	brcc	.+16     	; 0xbac <__fp_round+0x20>
 b9c:	bf 2b       	or	r27, r31
 b9e:	11 f4       	brne	.+4      	; 0xba4 <__fp_round+0x18>
 ba0:	60 ff       	sbrs	r22, 0
 ba2:	04 c0       	rjmp	.+8      	; 0xbac <__fp_round+0x20>
 ba4:	6f 5f       	subi	r22, 0xFF	; 255
 ba6:	7f 4f       	sbci	r23, 0xFF	; 255
 ba8:	8f 4f       	sbci	r24, 0xFF	; 255
 baa:	9f 4f       	sbci	r25, 0xFF	; 255
 bac:	08 95       	ret

00000bae <__udivmodhi4>:
 bae:	aa 1b       	sub	r26, r26
 bb0:	bb 1b       	sub	r27, r27
 bb2:	51 e1       	ldi	r21, 0x11	; 17
 bb4:	07 c0       	rjmp	.+14     	; 0xbc4 <__udivmodhi4_ep>

00000bb6 <__udivmodhi4_loop>:
 bb6:	aa 1f       	adc	r26, r26
 bb8:	bb 1f       	adc	r27, r27
 bba:	a6 17       	cp	r26, r22
 bbc:	b7 07       	cpc	r27, r23
 bbe:	10 f0       	brcs	.+4      	; 0xbc4 <__udivmodhi4_ep>
 bc0:	a6 1b       	sub	r26, r22
 bc2:	b7 0b       	sbc	r27, r23

00000bc4 <__udivmodhi4_ep>:
 bc4:	88 1f       	adc	r24, r24
 bc6:	99 1f       	adc	r25, r25
 bc8:	5a 95       	dec	r21
 bca:	a9 f7       	brne	.-22     	; 0xbb6 <__udivmodhi4_loop>
 bcc:	80 95       	com	r24
 bce:	90 95       	com	r25
 bd0:	bc 01       	movw	r22, r24
 bd2:	cd 01       	movw	r24, r26
 bd4:	08 95       	ret

00000bd6 <__divmodhi4>:
 bd6:	97 fb       	bst	r25, 7
 bd8:	09 2e       	mov	r0, r25
 bda:	07 26       	eor	r0, r23
 bdc:	0a d0       	rcall	.+20     	; 0xbf2 <__divmodhi4_neg1>
 bde:	77 fd       	sbrc	r23, 7
 be0:	04 d0       	rcall	.+8      	; 0xbea <__divmodhi4_neg2>
 be2:	e5 df       	rcall	.-54     	; 0xbae <__udivmodhi4>
 be4:	06 d0       	rcall	.+12     	; 0xbf2 <__divmodhi4_neg1>
 be6:	00 20       	and	r0, r0
 be8:	1a f4       	brpl	.+6      	; 0xbf0 <__divmodhi4_exit>

00000bea <__divmodhi4_neg2>:
 bea:	70 95       	com	r23
 bec:	61 95       	neg	r22
 bee:	7f 4f       	sbci	r23, 0xFF	; 255

00000bf0 <__divmodhi4_exit>:
 bf0:	08 95       	ret

00000bf2 <__divmodhi4_neg1>:
 bf2:	f6 f7       	brtc	.-4      	; 0xbf0 <__divmodhi4_exit>
 bf4:	90 95       	com	r25
 bf6:	81 95       	neg	r24
 bf8:	9f 4f       	sbci	r25, 0xFF	; 255
 bfa:	08 95       	ret

00000bfc <_exit>:
 bfc:	f8 94       	cli

00000bfe <__stop_program>:
 bfe:	ff cf       	rjmp	.-2      	; 0xbfe <__stop_program>
