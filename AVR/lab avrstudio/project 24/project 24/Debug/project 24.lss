
project 24.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000003c0  00000454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800066  00800066  0000045a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000ce  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000749  00000000  00000000  00000ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001ae  00000000  00000000  000013ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000050e  00000000  00000000  0000159d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d0  00000000  00000000  00001aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000019f  00000000  00000000  00001b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002d2  00000000  00000000  00001d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  00001fed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  8a:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_cmd>:
	
	_delay_ms(1);
} 
void LCD_cmd(unsigned char cmd)
{
LCD_DATA=cmd;
  92:	8b bb       	out	0x1b, r24	; 27
ctrl =(0<<rs)|(0<<rw)|(1<<en); 
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	87 ee       	ldi	r24, 0xE7	; 231
  9a:	93 e0       	ldi	r25, 0x03	; 3
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_cmd+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_cmd+0x10>
  a2:	00 00       	nop
_delay_ms(1);
ctrl =(0<<rs)|(0<<rw)|(0<<en); 
  a4:	15 ba       	out	0x15, r1	; 21
  a6:	8f e4       	ldi	r24, 0x4F	; 79
  a8:	93 ec       	ldi	r25, 0xC3	; 195
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <LCD_cmd+0x18>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <LCD_cmd+0x1e>
  b0:	00 00       	nop
_delay_ms(50);
return;
}
  b2:	08 95       	ret

000000b4 <clear_lcd>:

return;
}
void clear_lcd(){
	
	LCD_cmd(0x01);
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
  ba:	87 ee       	ldi	r24, 0xE7	; 231
  bc:	93 e0       	ldi	r25, 0x03	; 3
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <clear_lcd+0xa>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <clear_lcd+0x10>
  c4:	00 00       	nop
	
	_delay_ms(1);
} 
  c6:	08 95       	ret

000000c8 <init_LCD>:
return 0;
}

void init_LCD(void)
{
LCD_cmd(0x38); // initialization of 16X2 LCD in 8bit mode
  c8:	88 e3       	ldi	r24, 0x38	; 56
  ca:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
  ce:	87 ee       	ldi	r24, 0xE7	; 231
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <init_LCD+0xa>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <init_LCD+0x10>
  d8:	00 00       	nop
_delay_ms(1);
 
LCD_cmd(0x01); // clear LCD
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
  e0:	87 ee       	ldi	r24, 0xE7	; 231
  e2:	93 e0       	ldi	r25, 0x03	; 3
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <init_LCD+0x1c>
  e8:	00 c0       	rjmp	.+0      	; 0xea <init_LCD+0x22>
  ea:	00 00       	nop
_delay_ms(1);
 
LCD_cmd(0x0C); // cursor ON
  ec:	8c e0       	ldi	r24, 0x0C	; 12
  ee:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
  f2:	87 ee       	ldi	r24, 0xE7	; 231
  f4:	93 e0       	ldi	r25, 0x03	; 3
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <init_LCD+0x2e>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <init_LCD+0x34>
  fc:	00 00       	nop
_delay_ms(1);

    LCD_cmd(0x06);
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
 104:	87 ee       	ldi	r24, 0xE7	; 231
 106:	93 e0       	ldi	r25, 0x03	; 3
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <init_LCD+0x40>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <init_LCD+0x46>
 10e:	00 00       	nop
   
	_delay_ms(1);	
 

return;
}
 110:	08 95       	ret

00000112 <LCD_write>:
return;
}
 
void LCD_write(unsigned char data)
{
LCD_DATA= data;
 112:	8b bb       	out	0x1b, r24	; 27
ctrl = (1<<rs)|(0<<rw)|(1<<en); 
 114:	85 e0       	ldi	r24, 0x05	; 5
 116:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	8a 95       	dec	r24
 11c:	f1 f7       	brne	.-4      	; 0x11a <LCD_write+0x8>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <LCD_write+0xe>
_delay_us(2);
ctrl = (1<<rs)|(0<<rw)|(0<<en); 
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	85 bb       	out	0x15, r24	; 21
 124:	85 e8       	ldi	r24, 0x85	; 133
 126:	8a 95       	dec	r24
 128:	f1 f7       	brne	.-4      	; 0x126 <LCD_write+0x14>
 12a:	00 00       	nop
_delay_us(100); 
return ;
}
 12c:	08 95       	ret

0000012e <LCD_print>:
void LCD_print(char *string)
{
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	ec 01       	movw	r28, r24
	unsigned char i;

	while(string[i]!=0)
 136:	10 e0       	ldi	r17, 0x00	; 0
 138:	88 81       	ld	r24, Y
 13a:	88 23       	and	r24, r24
 13c:	49 f0       	breq	.+18     	; 0x150 <LCD_print+0x22>
	{
		LCD_write(string[i]);
 13e:	0e 94 89 00 	call	0x112	; 0x112 <LCD_write>
		i++;
 142:	1f 5f       	subi	r17, 0xFF	; 255
}
void LCD_print(char *string)
{
	unsigned char i;

	while(string[i]!=0)
 144:	fe 01       	movw	r30, r28
 146:	e1 0f       	add	r30, r17
 148:	f1 1d       	adc	r31, r1
 14a:	80 81       	ld	r24, Z
 14c:	88 23       	and	r24, r24
 14e:	b9 f7       	brne	.-18     	; 0x13e <LCD_print+0x10>
	{
		LCD_write(string[i]);
		i++;
	}
	return;
} 
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	08 95       	ret

00000158 <LCD_write_string>:
void LCD_write_string(unsigned char *str) //store address value of the string in pointer *str
{
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	ec 01       	movw	r28, r24
int i=0;
while(str[i]!='\0') // loop will go on till the NULL character in the string 
 15e:	88 81       	ld	r24, Y
 160:	88 23       	and	r24, r24
 162:	31 f0       	breq	.+12     	; 0x170 <LCD_write_string+0x18>
		LCD_write(string[i]);
		i++;
	}
	return;
} 
void LCD_write_string(unsigned char *str) //store address value of the string in pointer *str
 164:	21 96       	adiw	r28, 0x01	; 1
{
int i=0;
while(str[i]!='\0') // loop will go on till the NULL character in the string 
{
LCD_write(str[i]); // sending data on LCD byte by byte
 166:	0e 94 89 00 	call	0x112	; 0x112 <LCD_write>
	return;
} 
void LCD_write_string(unsigned char *str) //store address value of the string in pointer *str
{
int i=0;
while(str[i]!='\0') // loop will go on till the NULL character in the string 
 16a:	89 91       	ld	r24, Y+
 16c:	88 23       	and	r24, r24
 16e:	d9 f7       	brne	.-10     	; 0x166 <LCD_write_string+0xe>
{
LCD_write(str[i]); // sending data on LCD byte by byte
i++;
  }
return;
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <LCD_goto>:
 
	//LCD_send_command(firstAddress[y-1] + x-1);
	//_delay_ms(10);	
	
	unsigned char x;
	x=64*(dong-1)+(cot-1)+0x80;
 176:	82 95       	swap	r24
 178:	88 0f       	add	r24, r24
 17a:	88 0f       	add	r24, r24
 17c:	80 7c       	andi	r24, 0xC0	; 192
 17e:	86 0f       	add	r24, r22
	//clearbit(CTRL,RS);
	LCD_cmd(x);
 180:	81 5c       	subi	r24, 0xC1	; 193
 182:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	87 ee       	ldi	r24, 0xE7	; 231
 188:	93 e0       	ldi	r25, 0x03	; 3
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_goto+0x14>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_goto+0x1a>
 190:	00 00       	nop
	
	_delay_ms(1);
	return;
}
 192:	08 95       	ret

00000194 <putstr_lcd>:
void putstr_lcd(unsigned char *str, unsigned int lenght){
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	7c 01       	movw	r14, r24
 1a0:	eb 01       	movw	r28, r22
	unsigned char i;
	for(i=0;i<lenght;i++){
 1a2:	20 97       	sbiw	r28, 0x00	; 0
 1a4:	a9 f0       	breq	.+42     	; 0x1d0 <putstr_lcd+0x3c>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	10 e0       	ldi	r17, 0x00	; 0
		if(*(str+i)>0){ 
 1ac:	8e 0d       	add	r24, r14
 1ae:	9f 1d       	adc	r25, r15
 1b0:	fc 01       	movw	r30, r24
 1b2:	80 81       	ld	r24, Z
 1b4:	88 23       	and	r24, r24
 1b6:	19 f0       	breq	.+6      	; 0x1be <putstr_lcd+0x2a>
			LCD_write(*(str+i));
 1b8:	0e 94 89 00 	call	0x112	; 0x112 <LCD_write>
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <putstr_lcd+0x30>
			}
		else LCD_write(0);	
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 89 00 	call	0x112	; 0x112 <LCD_write>
	_delay_ms(1);
	return;
}
void putstr_lcd(unsigned char *str, unsigned int lenght){
	unsigned char i;
	for(i=0;i<lenght;i++){
 1c4:	1f 5f       	subi	r17, 0xFF	; 255
 1c6:	81 2f       	mov	r24, r17
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	8c 17       	cp	r24, r28
 1cc:	9d 07       	cpc	r25, r29
 1ce:	70 f3       	brcs	.-36     	; 0x1ac <putstr_lcd+0x18>
		if(*(str+i)>0){ 
			LCD_write(*(str+i));
			}
		else LCD_write(0);	
}
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	08 95       	ret

000001dc <main>:
void init_LCD(void);
void LCD_write(unsigned char data);
 
int main()
{
	DDRD=0x00;
 1dc:	11 ba       	out	0x11, r1	; 17
	PORTD=0xFF;	
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	82 bb       	out	0x12, r24	; 18
	
DDRA=0xff; 
 1e2:	8a bb       	out	0x1a, r24	; 26
DDRC=0x07; 
 1e4:	87 e0       	ldi	r24, 0x07	; 7
 1e6:	84 bb       	out	0x14, r24	; 20

init_LCD(); // initialization of LCD
 1e8:	0e 94 64 00 	call	0xc8	; 0xc8 <init_LCD>
 1ec:	8f e4       	ldi	r24, 0x4F	; 79
 1ee:	93 ec       	ldi	r25, 0xC3	; 195
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <main+0x14>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x1a>
 1f6:	00 00       	nop
_delay_ms(50); // delay of 50 mili seconds
		 LCD_goto(2,7);
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	67 e0       	ldi	r22, 0x07	; 7
 1fc:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_goto>
		 putstr_lcd("khanh",5); 
 200:	80 e6       	ldi	r24, 0x60	; 96
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	65 e0       	ldi	r22, 0x05	; 5
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	0e 94 ca 00 	call	0x194	; 0x194 <putstr_lcd>
	 
	 
}
*/	 
return 0;
}
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	08 95       	ret

00000212 <LCD_scroll>:
		else LCD_write(0);	
}
}
void LCD_scroll(unsigned char direction)
{
	if(direction == 0)
 212:	88 23       	and	r24, r24
 214:	21 f4       	brne	.+8      	; 0x21e <LCD_scroll+0xc>
		LCD_cmd(0x18);
 216:	88 e1       	ldi	r24, 0x18	; 24
 218:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
 21c:	03 c0       	rjmp	.+6      	; 0x224 <LCD_scroll+0x12>
	else
		LCD_cmd(0x1C);
 21e:	8c e1       	ldi	r24, 0x1C	; 28
 220:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
 224:	8f e7       	ldi	r24, 0x7F	; 127
 226:	9a e1       	ldi	r25, 0x1A	; 26
 228:	a6 e0       	ldi	r26, 0x06	; 6
 22a:	81 50       	subi	r24, 0x01	; 1
 22c:	90 40       	sbci	r25, 0x00	; 0
 22e:	a0 40       	sbci	r26, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <LCD_scroll+0x18>
 232:	00 c0       	rjmp	.+0      	; 0x234 <LCD_scroll+0x22>
 234:	00 00       	nop
 
	_delay_ms(500);
}
 236:	08 95       	ret

00000238 <LCD_blink>:
void LCD_blink()
{
	LCD_cmd(0x08);
 238:	88 e0       	ldi	r24, 0x08	; 8
 23a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
 23e:	8f e3       	ldi	r24, 0x3F	; 63
 240:	9d e0       	ldi	r25, 0x0D	; 13
 242:	a3 e0       	ldi	r26, 0x03	; 3
 244:	81 50       	subi	r24, 0x01	; 1
 246:	90 40       	sbci	r25, 0x00	; 0
 248:	a0 40       	sbci	r26, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <LCD_blink+0xc>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <LCD_blink+0x16>
 24e:	00 00       	nop
	_delay_ms(250);
	LCD_cmd(0x0C);
 250:	8c e0       	ldi	r24, 0x0C	; 12
 252:	0e 94 49 00 	call	0x92	; 0x92 <LCD_cmd>
 256:	8f e3       	ldi	r24, 0x3F	; 63
 258:	9d e0       	ldi	r25, 0x0D	; 13
 25a:	a3 e0       	ldi	r26, 0x03	; 3
 25c:	81 50       	subi	r24, 0x01	; 1
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	a0 40       	sbci	r26, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <LCD_blink+0x24>
 264:	00 c0       	rjmp	.+0      	; 0x266 <LCD_blink+0x2e>
 266:	00 00       	nop
	_delay_ms(250);
}
 268:	08 95       	ret

0000026a <printnumber_lcd>:
void printnumber_lcd(uint8_t number){
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
		number=number%temp;
		temp=temp/10;
		putchar_lcd(a+48);
	}*/
			int a,b,c,d,e;
	    a=number/10000;
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	60 e1       	ldi	r22, 0x10	; 16
 276:	77 e2       	ldi	r23, 0x27	; 39
 278:	0e 94 b7 01 	call	0x36e	; 0x36e <__divmodhi4>
 27c:	9b 01       	movw	r18, r22
	    //putchar_lcd(a+48);
		number=number%10000;
	    b=number/1000;
 27e:	68 ee       	ldi	r22, 0xE8	; 232
 280:	73 e0       	ldi	r23, 0x03	; 3
 282:	0e 94 b7 01 	call	0x36e	; 0x36e <__divmodhi4>
 286:	f6 2e       	mov	r15, r22
 288:	46 2f       	mov	r20, r22
 28a:	57 2f       	mov	r21, r23
	    //putchar_lcd(b+48);
	    number=number%1000;
	    c=number/100;
 28c:	64 e6       	ldi	r22, 0x64	; 100
 28e:	0e 94 ab 01 	call	0x356	; 0x356 <__udivmodqi4>
 292:	08 2f       	mov	r16, r24
 294:	89 2f       	mov	r24, r25
 296:	e0 2f       	mov	r30, r16
 298:	f0 e0       	ldi	r31, 0x00	; 0
	    //putchar_lcd(c+48);	
	    number=number%100;
	    d=number/10;
 29a:	6a e0       	ldi	r22, 0x0A	; 10
 29c:	0e 94 ab 01 	call	0x356	; 0x356 <__udivmodqi4>
 2a0:	18 2f       	mov	r17, r24
 2a2:	e9 2e       	mov	r14, r25
 2a4:	90 e0       	ldi	r25, 0x00	; 0
	    //putchar_lcd(d+48);	
	    e=number%10;
	   // putchar_lcd(e+48);
    if(a==0 && b==0 && c==0 && d==0){
 2a6:	21 15       	cp	r18, r1
 2a8:	31 05       	cpc	r19, r1
 2aa:	a9 f5       	brne	.+106    	; 0x316 <printnumber_lcd+0xac>
 2ac:	41 15       	cp	r20, r1
 2ae:	51 05       	cpc	r21, r1
 2b0:	09 f5       	brne	.+66     	; 0x2f4 <printnumber_lcd+0x8a>
 2b2:	30 97       	sbiw	r30, 0x00	; 0
 2b4:	39 f4       	brne	.+14     	; 0x2c4 <printnumber_lcd+0x5a>
 2b6:	00 97       	sbiw	r24, 0x00	; 0
 2b8:	29 f4       	brne	.+10     	; 0x2c4 <printnumber_lcd+0x5a>
		LCD_write(e+48);
 2ba:	8e 2d       	mov	r24, r14
 2bc:	80 5d       	subi	r24, 0xD0	; 208
 2be:	0e 94 89 00 	call	0x112	; 0x112 <LCD_write>
 2c2:	44 c0       	rjmp	.+136    	; 0x34c <printnumber_lcd+0xe2>
	}
	else if(a==0 && b==0 && c==0){
 2c4:	30 97       	sbiw	r30, 0x00	; 0
 2c6:	49 f4       	brne	.+18     	; 0x2da <printnumber_lcd+0x70>
		LCD_write(d+48);
 2c8:	81 2f       	mov	r24, r17
 2ca:	80 5d       	subi	r24, 0xD0	; 208
 2cc:	0e 94 89 00 	call	0x112	; 0x112 <LCD_write>
		LCD_write(e+48);
 2d0:	8e 2d       	mov	r24, r14
 2d2:	80 5d       	subi	r24, 0xD0	; 208
 2d4:	0e 94 89 00 	call	0x112	; 0x112 <LCD_write>
 2d8:	39 c0       	rjmp	.+114    	; 0x34c <printnumber_lcd+0xe2>
	}
	else if(a==0 && b==0){
		LCD_write(c+48);
 2da:	80 2f       	mov	r24, r16
 2dc:	80 5d       	subi	r24, 0xD0	; 208
 2de:	0e 94 89 00 	call	0x112	; 0x112 <LCD_write>
		LCD_write(d+48);
 2e2:	81 2f       	mov	r24, r17
 2e4:	80 5d       	subi	r24, 0xD0	; 208
 2e6:	0e 94 89 00 	call	0x112	; 0x112 <LCD_write>
		LCD_write(e+48);
 2ea:	8e 2d       	mov	r24, r14
 2ec:	80 5d       	subi	r24, 0xD0	; 208
 2ee:	0e 94 89 00 	call	0x112	; 0x112 <LCD_write>
 2f2:	2c c0       	rjmp	.+88     	; 0x34c <printnumber_lcd+0xe2>
	}
	else if(a==0){
		LCD_write(b+48);
 2f4:	8f 2d       	mov	r24, r15
 2f6:	80 5d       	subi	r24, 0xD0	; 208
 2f8:	0e 94 89 00 	call	0x112	; 0x112 <LCD_write>
	    LCD_write(c+48);
 2fc:	80 2f       	mov	r24, r16
 2fe:	80 5d       	subi	r24, 0xD0	; 208
 300:	0e 94 89 00 	call	0x112	; 0x112 <LCD_write>
		LCD_write(d+48);
 304:	81 2f       	mov	r24, r17
 306:	80 5d       	subi	r24, 0xD0	; 208
 308:	0e 94 89 00 	call	0x112	; 0x112 <LCD_write>
		LCD_write(e+48);
 30c:	8e 2d       	mov	r24, r14
 30e:	80 5d       	subi	r24, 0xD0	; 208
 310:	0e 94 89 00 	call	0x112	; 0x112 <LCD_write>
 314:	1b c0       	rjmp	.+54     	; 0x34c <printnumber_lcd+0xe2>
	}
	else if(a!=0 && b!=0 && c!=0 && d!=0){
 316:	41 15       	cp	r20, r1
 318:	51 05       	cpc	r21, r1
 31a:	c1 f0       	breq	.+48     	; 0x34c <printnumber_lcd+0xe2>
 31c:	30 97       	sbiw	r30, 0x00	; 0
 31e:	b1 f0       	breq	.+44     	; 0x34c <printnumber_lcd+0xe2>
 320:	00 97       	sbiw	r24, 0x00	; 0
 322:	a1 f0       	breq	.+40     	; 0x34c <printnumber_lcd+0xe2>
		LCD_write(a+48);
 324:	82 2f       	mov	r24, r18
 326:	80 5d       	subi	r24, 0xD0	; 208
 328:	0e 94 89 00 	call	0x112	; 0x112 <LCD_write>
		LCD_write(b+48);
 32c:	8f 2d       	mov	r24, r15
 32e:	80 5d       	subi	r24, 0xD0	; 208
 330:	0e 94 89 00 	call	0x112	; 0x112 <LCD_write>
	    LCD_write(c+48);
 334:	80 2f       	mov	r24, r16
 336:	80 5d       	subi	r24, 0xD0	; 208
 338:	0e 94 89 00 	call	0x112	; 0x112 <LCD_write>
		LCD_write(d+48);
 33c:	81 2f       	mov	r24, r17
 33e:	80 5d       	subi	r24, 0xD0	; 208
 340:	0e 94 89 00 	call	0x112	; 0x112 <LCD_write>
		LCD_write(e+48);
 344:	8e 2d       	mov	r24, r14
 346:	80 5d       	subi	r24, 0xD0	; 208
 348:	0e 94 89 00 	call	0x112	; 0x112 <LCD_write>
	} 
 }
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	08 95       	ret

00000356 <__udivmodqi4>:
 356:	99 1b       	sub	r25, r25
 358:	79 e0       	ldi	r23, 0x09	; 9
 35a:	04 c0       	rjmp	.+8      	; 0x364 <__udivmodqi4_ep>

0000035c <__udivmodqi4_loop>:
 35c:	99 1f       	adc	r25, r25
 35e:	96 17       	cp	r25, r22
 360:	08 f0       	brcs	.+2      	; 0x364 <__udivmodqi4_ep>
 362:	96 1b       	sub	r25, r22

00000364 <__udivmodqi4_ep>:
 364:	88 1f       	adc	r24, r24
 366:	7a 95       	dec	r23
 368:	c9 f7       	brne	.-14     	; 0x35c <__udivmodqi4_loop>
 36a:	80 95       	com	r24
 36c:	08 95       	ret

0000036e <__divmodhi4>:
 36e:	97 fb       	bst	r25, 7
 370:	09 2e       	mov	r0, r25
 372:	07 26       	eor	r0, r23
 374:	0a d0       	rcall	.+20     	; 0x38a <__divmodhi4_neg1>
 376:	77 fd       	sbrc	r23, 7
 378:	04 d0       	rcall	.+8      	; 0x382 <__divmodhi4_neg2>
 37a:	0c d0       	rcall	.+24     	; 0x394 <__udivmodhi4>
 37c:	06 d0       	rcall	.+12     	; 0x38a <__divmodhi4_neg1>
 37e:	00 20       	and	r0, r0
 380:	1a f4       	brpl	.+6      	; 0x388 <__divmodhi4_exit>

00000382 <__divmodhi4_neg2>:
 382:	70 95       	com	r23
 384:	61 95       	neg	r22
 386:	7f 4f       	sbci	r23, 0xFF	; 255

00000388 <__divmodhi4_exit>:
 388:	08 95       	ret

0000038a <__divmodhi4_neg1>:
 38a:	f6 f7       	brtc	.-4      	; 0x388 <__divmodhi4_exit>
 38c:	90 95       	com	r25
 38e:	81 95       	neg	r24
 390:	9f 4f       	sbci	r25, 0xFF	; 255
 392:	08 95       	ret

00000394 <__udivmodhi4>:
 394:	aa 1b       	sub	r26, r26
 396:	bb 1b       	sub	r27, r27
 398:	51 e1       	ldi	r21, 0x11	; 17
 39a:	07 c0       	rjmp	.+14     	; 0x3aa <__udivmodhi4_ep>

0000039c <__udivmodhi4_loop>:
 39c:	aa 1f       	adc	r26, r26
 39e:	bb 1f       	adc	r27, r27
 3a0:	a6 17       	cp	r26, r22
 3a2:	b7 07       	cpc	r27, r23
 3a4:	10 f0       	brcs	.+4      	; 0x3aa <__udivmodhi4_ep>
 3a6:	a6 1b       	sub	r26, r22
 3a8:	b7 0b       	sbc	r27, r23

000003aa <__udivmodhi4_ep>:
 3aa:	88 1f       	adc	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	5a 95       	dec	r21
 3b0:	a9 f7       	brne	.-22     	; 0x39c <__udivmodhi4_loop>
 3b2:	80 95       	com	r24
 3b4:	90 95       	com	r25
 3b6:	bc 01       	movw	r22, r24
 3b8:	cd 01       	movw	r24, r26
 3ba:	08 95       	ret

000003bc <_exit>:
 3bc:	f8 94       	cli

000003be <__stop_program>:
 3be:	ff cf       	rjmp	.-2      	; 0x3be <__stop_program>
