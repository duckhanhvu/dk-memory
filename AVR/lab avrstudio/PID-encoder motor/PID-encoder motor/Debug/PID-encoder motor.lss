
PID-encoder motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000007ae  00000842  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  0080008e  0080008e  00000870  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ae  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000005e0  00000000  00000000  000011ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000244  00000000  00000000  0000179a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000070e  00000000  00000000  000019de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000110  00000000  00000000  000020ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000022a  00000000  00000000  000021fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001fb  00000000  00000000  00002426  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000063  00000000  00000000  00002621  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__vector_18>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e8       	ldi	r26, 0x8E	; 142
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3b       	cpi	r26, 0xBA	; 186
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a7 01 	call	0x34e	; 0x34e <main>
  8a:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <PID_control_speed>:
volatile long int Reality_speed;
volatile long int pulse, pre_pulse=0;
volatile long int error_PID, pre_error, P_PID, D_PID, I_PID=0, output_PID=0;
volatile long int kp=8, ki=1, kd=10;

void PID_control_speed(long int Titular_speed){
  92:	af 92       	push	r10
  94:	bf 92       	push	r11
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	9b 01       	movw	r18, r22
  a4:	ac 01       	movw	r20, r24
	Reality_speed = pulse - pre_pulse;
  a6:	e0 90 ae 00 	lds	r14, 0x00AE
  aa:	f0 90 af 00 	lds	r15, 0x00AF
  ae:	00 91 b0 00 	lds	r16, 0x00B0
  b2:	10 91 b1 00 	lds	r17, 0x00B1
  b6:	60 91 92 00 	lds	r22, 0x0092
  ba:	70 91 93 00 	lds	r23, 0x0093
  be:	80 91 94 00 	lds	r24, 0x0094
  c2:	90 91 95 00 	lds	r25, 0x0095
  c6:	57 01       	movw	r10, r14
  c8:	68 01       	movw	r12, r16
  ca:	a6 1a       	sub	r10, r22
  cc:	b7 0a       	sbc	r11, r23
  ce:	c8 0a       	sbc	r12, r24
  d0:	d9 0a       	sbc	r13, r25
  d2:	a0 92 9e 00 	sts	0x009E, r10
  d6:	b0 92 9f 00 	sts	0x009F, r11
  da:	c0 92 a0 00 	sts	0x00A0, r12
  de:	d0 92 a1 00 	sts	0x00A1, r13
	pre_pulse=pulse;
  e2:	80 91 ae 00 	lds	r24, 0x00AE
  e6:	90 91 af 00 	lds	r25, 0x00AF
  ea:	a0 91 b0 00 	lds	r26, 0x00B0
  ee:	b0 91 b1 00 	lds	r27, 0x00B1
  f2:	80 93 92 00 	sts	0x0092, r24
  f6:	90 93 93 00 	sts	0x0093, r25
  fa:	a0 93 94 00 	sts	0x0094, r26
  fe:	b0 93 95 00 	sts	0x0095, r27
	
	error_PID= Titular_speed- abs(Reality_speed);
 102:	80 91 9e 00 	lds	r24, 0x009E
 106:	90 91 9f 00 	lds	r25, 0x009F
 10a:	a0 91 a0 00 	lds	r26, 0x00A0
 10e:	b0 91 a1 00 	lds	r27, 0x00A1
 112:	99 23       	and	r25, r25
 114:	1c f4       	brge	.+6      	; 0x11c <PID_control_speed+0x8a>
 116:	90 95       	com	r25
 118:	81 95       	neg	r24
 11a:	9f 4f       	sbci	r25, 0xFF	; 255
 11c:	aa 27       	eor	r26, r26
 11e:	97 fd       	sbrc	r25, 7
 120:	a0 95       	com	r26
 122:	ba 2f       	mov	r27, r26
 124:	69 01       	movw	r12, r18
 126:	7a 01       	movw	r14, r20
 128:	c8 1a       	sub	r12, r24
 12a:	d9 0a       	sbc	r13, r25
 12c:	ea 0a       	sbc	r14, r26
 12e:	fb 0a       	sbc	r15, r27
 130:	c0 92 b6 00 	sts	0x00B6, r12
 134:	d0 92 b7 00 	sts	0x00B7, r13
 138:	e0 92 b8 00 	sts	0x00B8, r14
 13c:	f0 92 b9 00 	sts	0x00B9, r15
	
	//cac thanh phan PID
	P_PID=error_PID*kp;
 140:	20 91 b6 00 	lds	r18, 0x00B6
 144:	30 91 b7 00 	lds	r19, 0x00B7
 148:	40 91 b8 00 	lds	r20, 0x00B8
 14c:	50 91 b9 00 	lds	r21, 0x00B9
 150:	60 91 81 00 	lds	r22, 0x0081
 154:	70 91 82 00 	lds	r23, 0x0082
 158:	80 91 83 00 	lds	r24, 0x0083
 15c:	90 91 84 00 	lds	r25, 0x0084
 160:	0e 94 65 03 	call	0x6ca	; 0x6ca <__mulsi3>
 164:	60 93 b2 00 	sts	0x00B2, r22
 168:	70 93 b3 00 	sts	0x00B3, r23
 16c:	80 93 b4 00 	sts	0x00B4, r24
 170:	90 93 b5 00 	sts	0x00B5, r25
	D_PID=(error_PID-pre_error)*40*kd;  
 174:	e0 90 b6 00 	lds	r14, 0x00B6
 178:	f0 90 b7 00 	lds	r15, 0x00B7
 17c:	00 91 b8 00 	lds	r16, 0x00B8
 180:	10 91 b9 00 	lds	r17, 0x00B9
 184:	a0 90 aa 00 	lds	r10, 0x00AA
 188:	b0 90 ab 00 	lds	r11, 0x00AB
 18c:	c0 90 ac 00 	lds	r12, 0x00AC
 190:	d0 90 ad 00 	lds	r13, 0x00AD
 194:	60 91 89 00 	lds	r22, 0x0089
 198:	70 91 8a 00 	lds	r23, 0x008A
 19c:	80 91 8b 00 	lds	r24, 0x008B
 1a0:	90 91 8c 00 	lds	r25, 0x008C
 1a4:	28 e2       	ldi	r18, 0x28	; 40
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	0e 94 65 03 	call	0x6ca	; 0x6ca <__mulsi3>
 1b0:	a8 01       	movw	r20, r16
 1b2:	97 01       	movw	r18, r14
 1b4:	2a 19       	sub	r18, r10
 1b6:	3b 09       	sbc	r19, r11
 1b8:	4c 09       	sbc	r20, r12
 1ba:	5d 09       	sbc	r21, r13
 1bc:	0e 94 65 03 	call	0x6ca	; 0x6ca <__mulsi3>
 1c0:	60 93 a6 00 	sts	0x00A6, r22
 1c4:	70 93 a7 00 	sts	0x00A7, r23
 1c8:	80 93 a8 00 	sts	0x00A8, r24
 1cc:	90 93 a9 00 	sts	0x00A9, r25
	I_PID+= (ki*error_PID*25)/1000;
 1d0:	60 91 85 00 	lds	r22, 0x0085
 1d4:	70 91 86 00 	lds	r23, 0x0086
 1d8:	80 91 87 00 	lds	r24, 0x0087
 1dc:	90 91 88 00 	lds	r25, 0x0088
 1e0:	20 91 b6 00 	lds	r18, 0x00B6
 1e4:	30 91 b7 00 	lds	r19, 0x00B7
 1e8:	40 91 b8 00 	lds	r20, 0x00B8
 1ec:	50 91 b9 00 	lds	r21, 0x00B9
 1f0:	e0 90 96 00 	lds	r14, 0x0096
 1f4:	f0 90 97 00 	lds	r15, 0x0097
 1f8:	00 91 98 00 	lds	r16, 0x0098
 1fc:	10 91 99 00 	lds	r17, 0x0099
 200:	0e 94 65 03 	call	0x6ca	; 0x6ca <__mulsi3>
 204:	29 e1       	ldi	r18, 0x19	; 25
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	50 e0       	ldi	r21, 0x00	; 0
 20c:	0e 94 65 03 	call	0x6ca	; 0x6ca <__mulsi3>
 210:	28 ee       	ldi	r18, 0xE8	; 232
 212:	33 e0       	ldi	r19, 0x03	; 3
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	0e 94 98 03 	call	0x730	; 0x730 <__divmodsi4>
 21c:	2e 0d       	add	r18, r14
 21e:	3f 1d       	adc	r19, r15
 220:	40 1f       	adc	r20, r16
 222:	51 1f       	adc	r21, r17
 224:	20 93 96 00 	sts	0x0096, r18
 228:	30 93 97 00 	sts	0x0097, r19
 22c:	40 93 98 00 	sts	0x0098, r20
 230:	50 93 99 00 	sts	0x0099, r21
	
	output_PID+= P_PID + D_PID + I_PID;
 234:	20 91 b2 00 	lds	r18, 0x00B2
 238:	30 91 b3 00 	lds	r19, 0x00B3
 23c:	40 91 b4 00 	lds	r20, 0x00B4
 240:	50 91 b5 00 	lds	r21, 0x00B5
 244:	e0 90 a6 00 	lds	r14, 0x00A6
 248:	f0 90 a7 00 	lds	r15, 0x00A7
 24c:	00 91 a8 00 	lds	r16, 0x00A8
 250:	10 91 a9 00 	lds	r17, 0x00A9
 254:	80 91 96 00 	lds	r24, 0x0096
 258:	90 91 97 00 	lds	r25, 0x0097
 25c:	a0 91 98 00 	lds	r26, 0x0098
 260:	b0 91 99 00 	lds	r27, 0x0099
 264:	a0 90 9a 00 	lds	r10, 0x009A
 268:	b0 90 9b 00 	lds	r11, 0x009B
 26c:	c0 90 9c 00 	lds	r12, 0x009C
 270:	d0 90 9d 00 	lds	r13, 0x009D
 274:	2e 0d       	add	r18, r14
 276:	3f 1d       	adc	r19, r15
 278:	40 1f       	adc	r20, r16
 27a:	51 1f       	adc	r21, r17
 27c:	82 0f       	add	r24, r18
 27e:	93 1f       	adc	r25, r19
 280:	a4 1f       	adc	r26, r20
 282:	b5 1f       	adc	r27, r21
 284:	a8 0e       	add	r10, r24
 286:	b9 1e       	adc	r11, r25
 288:	ca 1e       	adc	r12, r26
 28a:	db 1e       	adc	r13, r27
 28c:	a0 92 9a 00 	sts	0x009A, r10
 290:	b0 92 9b 00 	sts	0x009B, r11
 294:	c0 92 9c 00 	sts	0x009C, r12
 298:	d0 92 9d 00 	sts	0x009D, r13
	
	//dieu chinh dau ra PID phu hop voi PWM
	
	if(output_PID>=Time_period_PWM){  output_PID= Time_period_PWM-1;}
 29c:	80 91 9a 00 	lds	r24, 0x009A
 2a0:	90 91 9b 00 	lds	r25, 0x009B
 2a4:	a0 91 9c 00 	lds	r26, 0x009C
 2a8:	b0 91 9d 00 	lds	r27, 0x009D
 2ac:	80 34       	cpi	r24, 0x40	; 64
 2ae:	0f e1       	ldi	r16, 0x1F	; 31
 2b0:	90 07       	cpc	r25, r16
 2b2:	00 e0       	ldi	r16, 0x00	; 0
 2b4:	a0 07       	cpc	r26, r16
 2b6:	00 e0       	ldi	r16, 0x00	; 0
 2b8:	b0 07       	cpc	r27, r16
 2ba:	6c f0       	brlt	.+26     	; 0x2d6 <PID_control_speed+0x244>
 2bc:	8f e3       	ldi	r24, 0x3F	; 63
 2be:	9f e1       	ldi	r25, 0x1F	; 31
 2c0:	a0 e0       	ldi	r26, 0x00	; 0
 2c2:	b0 e0       	ldi	r27, 0x00	; 0
 2c4:	80 93 9a 00 	sts	0x009A, r24
 2c8:	90 93 9b 00 	sts	0x009B, r25
 2cc:	a0 93 9c 00 	sts	0x009C, r26
 2d0:	b0 93 9d 00 	sts	0x009D, r27
 2d4:	19 c0       	rjmp	.+50     	; 0x308 <PID_control_speed+0x276>
	else	if(output_PID<=0){ output_PID=1;}
 2d6:	80 91 9a 00 	lds	r24, 0x009A
 2da:	90 91 9b 00 	lds	r25, 0x009B
 2de:	a0 91 9c 00 	lds	r26, 0x009C
 2e2:	b0 91 9d 00 	lds	r27, 0x009D
 2e6:	18 16       	cp	r1, r24
 2e8:	19 06       	cpc	r1, r25
 2ea:	1a 06       	cpc	r1, r26
 2ec:	1b 06       	cpc	r1, r27
 2ee:	64 f0       	brlt	.+24     	; 0x308 <PID_control_speed+0x276>
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	a0 e0       	ldi	r26, 0x00	; 0
 2f6:	b0 e0       	ldi	r27, 0x00	; 0
 2f8:	80 93 9a 00 	sts	0x009A, r24
 2fc:	90 93 9b 00 	sts	0x009B, r25
 300:	a0 93 9c 00 	sts	0x009C, r26
 304:	b0 93 9d 00 	sts	0x009D, r27
	
	// bam xung PWM cho output_PID
	
	OCR1A=output_PID;
 308:	80 91 9a 00 	lds	r24, 0x009A
 30c:	90 91 9b 00 	lds	r25, 0x009B
 310:	a0 91 9c 00 	lds	r26, 0x009C
 314:	b0 91 9d 00 	lds	r27, 0x009D
 318:	9b bd       	out	0x2b, r25	; 43
 31a:	8a bd       	out	0x2a, r24	; 42
	pre_error=error_PID;
 31c:	80 91 b6 00 	lds	r24, 0x00B6
 320:	90 91 b7 00 	lds	r25, 0x00B7
 324:	a0 91 b8 00 	lds	r26, 0x00B8
 328:	b0 91 b9 00 	lds	r27, 0x00B9
 32c:	80 93 aa 00 	sts	0x00AA, r24
 330:	90 93 ab 00 	sts	0x00AB, r25
 334:	a0 93 ac 00 	sts	0x00AC, r26
 338:	b0 93 ad 00 	sts	0x00AD, r27
}
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	ff 90       	pop	r15
 342:	ef 90       	pop	r14
 344:	df 90       	pop	r13
 346:	cf 90       	pop	r12
 348:	bf 90       	pop	r11
 34a:	af 90       	pop	r10
 34c:	08 95       	ret

0000034e <main>:
int main(){
	pulse=0;
 34e:	10 92 ae 00 	sts	0x00AE, r1
 352:	10 92 af 00 	sts	0x00AF, r1
 356:	10 92 b0 00 	sts	0x00B0, r1
 35a:	10 92 b1 00 	sts	0x00B1, r1
	
	DDRA=0xFF;
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	8a bb       	out	0x1a, r24	; 26
	PORTA=0xFF;
 362:	8b bb       	out	0x1b, r24	; 27
	DDRB=0x00;
 364:	17 ba       	out	0x17, r1	; 23
	PORTB=0xFF;
 366:	88 bb       	out	0x18, r24	; 24
	
	DDRD=0xF0;
 368:	80 ef       	ldi	r24, 0xF0	; 240
 36a:	81 bb       	out	0x11, r24	; 17
	//sbi(MOTOR_PORT,MOTOR_DIR);
	
	MCUCSR|=(0<<ISC2);
 36c:	84 b7       	in	r24, 0x34	; 52
 36e:	84 bf       	out	0x34, r24	; 52
	GICR|=(1<<INT2);
 370:	8b b7       	in	r24, 0x3b	; 59
 372:	80 62       	ori	r24, 0x20	; 32
 374:	8b bf       	out	0x3b, r24	; 59
	
	TCCR2=(1<<CS22)|(1<<CS21)|(1<<CS20);
 376:	87 e0       	ldi	r24, 0x07	; 7
 378:	85 bd       	out	0x25, r24	; 37
	TCNT2=60;
 37a:	8c e3       	ldi	r24, 0x3C	; 60
 37c:	84 bd       	out	0x24, r24	; 36
	TIMSK=(1<<TOIE2);
 37e:	80 e4       	ldi	r24, 0x40	; 64
 380:	89 bf       	out	0x39, r24	; 57
	
	TCCR1A=(1<<COM1A1)|(1<<WGM11);
 382:	82 e8       	ldi	r24, 0x82	; 130
 384:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(1<<WGM13)|(1<<WGM12)|(1<<CS10);
 386:	89 e1       	ldi	r24, 0x19	; 25
 388:	8e bd       	out	0x2e, r24	; 46
	
	init_lcd();
 38a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <init_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38e:	8f e3       	ldi	r24, 0x3F	; 63
 390:	9d e0       	ldi	r25, 0x0D	; 13
 392:	a3 e0       	ldi	r26, 0x03	; 3
 394:	81 50       	subi	r24, 0x01	; 1
 396:	90 40       	sbci	r25, 0x00	; 0
 398:	a0 40       	sbci	r26, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <main+0x46>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <main+0x50>
 39e:	00 00       	nop
	_delay_ms(1000);
	clear_lcd();
 3a0:	0e 94 08 03 	call	0x610	; 0x610 <clear_lcd>
	putstr_lcd("Actual:   /25ms",15);
 3a4:	80 e6       	ldi	r24, 0x60	; 96
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	6f e0       	ldi	r22, 0x0F	; 15
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	0e 94 41 03 	call	0x682	; 0x682 <putstr_lcd>
	movecursor(2,1);
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	0e 94 0f 03 	call	0x61e	; 0x61e <movecursor>
	putstr_lcd("Desired:   /25ms",16);
 3b8:	80 e7       	ldi	r24, 0x70	; 112
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	60 e1       	ldi	r22, 0x10	; 16
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	0e 94 41 03 	call	0x682	; 0x682 <putstr_lcd>
	
	OCR1A=1;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	9b bd       	out	0x2b, r25	; 43
 3ca:	8a bd       	out	0x2a, r24	; 42
	ICR1=Time_period_PWM;
 3cc:	80 e4       	ldi	r24, 0x40	; 64
 3ce:	9f e1       	ldi	r25, 0x1F	; 31
 3d0:	97 bd       	out	0x27, r25	; 39
 3d2:	86 bd       	out	0x26, r24	; 38
	setbit(MOTOR_PORT,MOTOR_EN);
 3d4:	97 9a       	sbi	0x12, 7	; 18
	


	sei();
 3d6:	78 94       	sei
    while(1)
    {
		if(count>=10){
 3d8:	80 91 8e 00 	lds	r24, 0x008E
 3dc:	90 91 8f 00 	lds	r25, 0x008F
 3e0:	a0 91 90 00 	lds	r26, 0x0090
 3e4:	b0 91 91 00 	lds	r27, 0x0091
 3e8:	8a 30       	cpi	r24, 0x0A	; 10
 3ea:	91 05       	cpc	r25, r1
 3ec:	a1 05       	cpc	r26, r1
 3ee:	b1 05       	cpc	r27, r1
 3f0:	9c f3       	brlt	.-26     	; 0x3d8 <main+0x8a>
			control_speed=(PINB>>4)&0x0F;
 3f2:	86 b3       	in	r24, 0x16	; 22
 3f4:	82 95       	swap	r24
 3f6:	8f 70       	andi	r24, 0x0F	; 15
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	a0 e0       	ldi	r26, 0x00	; 0
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
 3fe:	80 93 a2 00 	sts	0x00A2, r24
 402:	90 93 a3 00 	sts	0x00A3, r25
 406:	a0 93 a4 00 	sts	0x00A4, r26
 40a:	b0 93 a5 00 	sts	0x00A5, r27
			movecursor(1,8);
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	68 e0       	ldi	r22, 0x08	; 8
 412:	0e 94 0f 03 	call	0x61e	; 0x61e <movecursor>
			printnumber_lcd(Reality_speed);
 416:	80 91 9e 00 	lds	r24, 0x009E
 41a:	90 91 9f 00 	lds	r25, 0x009F
 41e:	a0 91 a0 00 	lds	r26, 0x00A0
 422:	b0 91 a1 00 	lds	r27, 0x00A1
 426:	0e 94 31 03 	call	0x662	; 0x662 <printnumber_lcd>
			movecursor(2,9);
 42a:	82 e0       	ldi	r24, 0x02	; 2
 42c:	69 e0       	ldi	r22, 0x09	; 9
 42e:	0e 94 0f 03 	call	0x61e	; 0x61e <movecursor>
			printnumber_lcd(control_speed);
 432:	80 91 a2 00 	lds	r24, 0x00A2
 436:	90 91 a3 00 	lds	r25, 0x00A3
 43a:	a0 91 a4 00 	lds	r26, 0x00A4
 43e:	b0 91 a5 00 	lds	r27, 0x00A5
 442:	0e 94 31 03 	call	0x662	; 0x662 <printnumber_lcd>
			count=0;
 446:	10 92 8e 00 	sts	0x008E, r1
 44a:	10 92 8f 00 	sts	0x008F, r1
 44e:	10 92 90 00 	sts	0x0090, r1
 452:	10 92 91 00 	sts	0x0091, r1
 456:	c0 cf       	rjmp	.-128    	; 0x3d8 <main+0x8a>

00000458 <__vector_4>:
		}
    }
}
ISR(TIMER2_OVF_vect){
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	0f 92       	push	r0
 460:	11 24       	eor	r1, r1
 462:	2f 93       	push	r18
 464:	3f 93       	push	r19
 466:	4f 93       	push	r20
 468:	5f 93       	push	r21
 46a:	6f 93       	push	r22
 46c:	7f 93       	push	r23
 46e:	8f 93       	push	r24
 470:	9f 93       	push	r25
 472:	af 93       	push	r26
 474:	bf 93       	push	r27
 476:	ef 93       	push	r30
 478:	ff 93       	push	r31
	TCNT2=60;
 47a:	8c e3       	ldi	r24, 0x3C	; 60
 47c:	84 bd       	out	0x24, r24	; 36
	PID_control_speed(control_speed);
 47e:	60 91 a2 00 	lds	r22, 0x00A2
 482:	70 91 a3 00 	lds	r23, 0x00A3
 486:	80 91 a4 00 	lds	r24, 0x00A4
 48a:	90 91 a5 00 	lds	r25, 0x00A5
 48e:	0e 94 49 00 	call	0x92	; 0x92 <PID_control_speed>
	count++;
 492:	80 91 8e 00 	lds	r24, 0x008E
 496:	90 91 8f 00 	lds	r25, 0x008F
 49a:	a0 91 90 00 	lds	r26, 0x0090
 49e:	b0 91 91 00 	lds	r27, 0x0091
 4a2:	01 96       	adiw	r24, 0x01	; 1
 4a4:	a1 1d       	adc	r26, r1
 4a6:	b1 1d       	adc	r27, r1
 4a8:	80 93 8e 00 	sts	0x008E, r24
 4ac:	90 93 8f 00 	sts	0x008F, r25
 4b0:	a0 93 90 00 	sts	0x0090, r26
 4b4:	b0 93 91 00 	sts	0x0091, r27
}
 4b8:	ff 91       	pop	r31
 4ba:	ef 91       	pop	r30
 4bc:	bf 91       	pop	r27
 4be:	af 91       	pop	r26
 4c0:	9f 91       	pop	r25
 4c2:	8f 91       	pop	r24
 4c4:	7f 91       	pop	r23
 4c6:	6f 91       	pop	r22
 4c8:	5f 91       	pop	r21
 4ca:	4f 91       	pop	r20
 4cc:	3f 91       	pop	r19
 4ce:	2f 91       	pop	r18
 4d0:	0f 90       	pop	r0
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	0f 90       	pop	r0
 4d6:	1f 90       	pop	r1
 4d8:	18 95       	reti

000004da <__vector_18>:
ISR(INT2_vect){
 4da:	1f 92       	push	r1
 4dc:	0f 92       	push	r0
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	0f 92       	push	r0
 4e2:	11 24       	eor	r1, r1
 4e4:	8f 93       	push	r24
 4e6:	9f 93       	push	r25
 4e8:	af 93       	push	r26
 4ea:	bf 93       	push	r27
	if(bit_is_set(PORTB,0)) pulse++;
 4ec:	c0 9b       	sbis	0x18, 0	; 24
 4ee:	14 c0       	rjmp	.+40     	; 0x518 <__vector_18+0x3e>
 4f0:	80 91 ae 00 	lds	r24, 0x00AE
 4f4:	90 91 af 00 	lds	r25, 0x00AF
 4f8:	a0 91 b0 00 	lds	r26, 0x00B0
 4fc:	b0 91 b1 00 	lds	r27, 0x00B1
 500:	01 96       	adiw	r24, 0x01	; 1
 502:	a1 1d       	adc	r26, r1
 504:	b1 1d       	adc	r27, r1
 506:	80 93 ae 00 	sts	0x00AE, r24
 50a:	90 93 af 00 	sts	0x00AF, r25
 50e:	a0 93 b0 00 	sts	0x00B0, r26
 512:	b0 93 b1 00 	sts	0x00B1, r27
 516:	13 c0       	rjmp	.+38     	; 0x53e <__vector_18+0x64>
	else pulse--;
 518:	80 91 ae 00 	lds	r24, 0x00AE
 51c:	90 91 af 00 	lds	r25, 0x00AF
 520:	a0 91 b0 00 	lds	r26, 0x00B0
 524:	b0 91 b1 00 	lds	r27, 0x00B1
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	a1 09       	sbc	r26, r1
 52c:	b1 09       	sbc	r27, r1
 52e:	80 93 ae 00 	sts	0x00AE, r24
 532:	90 93 af 00 	sts	0x00AF, r25
 536:	a0 93 b0 00 	sts	0x00B0, r26
 53a:	b0 93 b1 00 	sts	0x00B1, r27
 53e:	bf 91       	pop	r27
 540:	af 91       	pop	r26
 542:	9f 91       	pop	r25
 544:	8f 91       	pop	r24
 546:	0f 90       	pop	r0
 548:	0f be       	out	0x3f, r0	; 63
 54a:	0f 90       	pop	r0
 54c:	1f 90       	pop	r1
 54e:	18 95       	reti

00000550 <read_2Nib>:


char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
 550:	aa 9a       	sbi	0x15, 2	; 21
	DDR_DATA=0x0F;
 552:	8f e0       	ldi	r24, 0x0F	; 15
 554:	84 bb       	out	0x14, r24	; 20
	HNib=DATA_input&0xF0;
 556:	83 b3       	in	r24, 0x13	; 19
	clearbit(CTRL,EN);
 558:	aa 98       	cbi	0x15, 2	; 21
	
	setbit(CTRL,EN);
 55a:	aa 9a       	sbi	0x15, 2	; 21
	LNib=DATA_input&0xF0;
 55c:	93 b3       	in	r25, 0x13	; 19
	clearbit(CTRL,EN);
 55e:	aa 98       	cbi	0x15, 2	; 21
	LNib>>=4;
 560:	92 95       	swap	r25
 562:	9f 70       	andi	r25, 0x0F	; 15
char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
	DDR_DATA=0x0F;
	HNib=DATA_input&0xF0;
 564:	80 7f       	andi	r24, 0xF0	; 240
	LNib=DATA_input&0xF0;
	clearbit(CTRL,EN);
	LNib>>=4;
	
	return (HNib|LNib);
}
 566:	89 2b       	or	r24, r25
 568:	08 95       	ret

0000056a <write_2Nib>:
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
 56a:	95 b3       	in	r25, 0x15	; 21
 56c:	9f 70       	andi	r25, 0x0F	; 15
	HNib=data&0xF0;
 56e:	28 2f       	mov	r18, r24
 570:	20 7f       	andi	r18, 0xF0	; 240
	LNib=(data<<4)&0xF0;
	
	DATA_output=HNib|temp;
 572:	29 2b       	or	r18, r25
 574:	25 bb       	out	0x15, r18	; 21
	setbit(CTRL,EN);
 576:	aa 9a       	sbi	0x15, 2	; 21
	clearbit(CTRL,EN);
 578:	aa 98       	cbi	0x15, 2	; 21
}
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
	HNib=data&0xF0;
	LNib=(data<<4)&0xF0;
 57a:	82 95       	swap	r24
 57c:	80 7f       	andi	r24, 0xF0	; 240
	
	DATA_output=HNib|temp;
	setbit(CTRL,EN);
	clearbit(CTRL,EN);
	
	DATA_output=LNib|temp;
 57e:	98 2b       	or	r25, r24
 580:	95 bb       	out	0x15, r25	; 21
	setbit(CTRL,EN);
 582:	aa 9a       	sbi	0x15, 2	; 21
	clearbit(CTRL,EN);
 584:	aa 98       	cbi	0x15, 2	; 21
	
}
 586:	08 95       	ret

00000588 <wait_lcd>:
void wait_lcd(void){
 588:	0f 93       	push	r16
 58a:	1f 93       	push	r17
 58c:	df 93       	push	r29
 58e:	cf 93       	push	r28
 590:	0f 92       	push	r0
 592:	cd b7       	in	r28, 0x3d	; 61
 594:	de b7       	in	r29, 0x3e	; 62
	while(1){
     	clearbit(CTRL,RS);
		setbit(CTRL,RW);
		temp=read_2Nib();
		
		if(bit_is_clear(temp,7)) break;
 596:	8e 01       	movw	r16, r28
 598:	0f 5f       	subi	r16, 0xFF	; 255
 59a:	1f 4f       	sbci	r17, 0xFF	; 255
}
void wait_lcd(void){
	unsigned char temp;
	
	while(1){
     	clearbit(CTRL,RS);
 59c:	a8 98       	cbi	0x15, 0	; 21
		setbit(CTRL,RW);
 59e:	a9 9a       	sbi	0x15, 1	; 21
		temp=read_2Nib();
 5a0:	0e 94 a8 02 	call	0x550	; 0x550 <read_2Nib>
 5a4:	89 83       	std	Y+1, r24	; 0x01
		
		if(bit_is_clear(temp,7)) break;
 5a6:	f8 01       	movw	r30, r16
 5a8:	80 81       	ld	r24, Z
 5aa:	88 23       	and	r24, r24
 5ac:	bc f3       	brlt	.-18     	; 0x59c <wait_lcd+0x14>
	}
	clearbit(CTRL,RW);
 5ae:	a9 98       	cbi	0x15, 1	; 21
	DDR_DATA=0xFF;
 5b0:	8f ef       	ldi	r24, 0xFF	; 255
 5b2:	84 bb       	out	0x14, r24	; 20
	
}
 5b4:	0f 90       	pop	r0
 5b6:	cf 91       	pop	r28
 5b8:	df 91       	pop	r29
 5ba:	1f 91       	pop	r17
 5bc:	0f 91       	pop	r16
 5be:	08 95       	ret

000005c0 <init_lcd>:

void init_lcd(){//uses mode 4 bit
	DDR_CTRL=0xFF;
 5c0:	8f ef       	ldi	r24, 0xFF	; 255
 5c2:	84 bb       	out	0x14, r24	; 20
	DDR_DATA=0xFF;
 5c4:	84 bb       	out	0x14, r24	; 20
	clearbit(CTRL,RS);
 5c6:	a8 98       	cbi	0x15, 0	; 21
	clearbit(CTRL,RW);
 5c8:	a9 98       	cbi	0x15, 1	; 21
	clearbit(CTRL,EN);
 5ca:	aa 98       	cbi	0x15, 2	; 21
	
//function set	
	setbit(CTRL,EN);
 5cc:	aa 9a       	sbi	0x15, 2	; 21
	setbit(DATA_output,5);
 5ce:	ad 9a       	sbi	0x15, 5	; 21
	clearbit(CTRL,EN);
 5d0:	aa 98       	cbi	0x15, 2	; 21
	wait_lcd();
 5d2:	0e 94 c4 02 	call	0x588	; 0x588 <wait_lcd>
	write_2Nib(0x28);
 5d6:	88 e2       	ldi	r24, 0x28	; 40
 5d8:	0e 94 b5 02 	call	0x56a	; 0x56a <write_2Nib>
	wait_lcd();
 5dc:	0e 94 c4 02 	call	0x588	; 0x588 <wait_lcd>
//display on/off control
    write_2Nib(0x0E);
 5e0:	8e e0       	ldi	r24, 0x0E	; 14
 5e2:	0e 94 b5 02 	call	0x56a	; 0x56a <write_2Nib>
	wait_lcd();
 5e6:	0e 94 c4 02 	call	0x588	; 0x588 <wait_lcd>

//entry mode set 
    
    write_2Nib(0x06);
 5ea:	86 e0       	ldi	r24, 0x06	; 6
 5ec:	0e 94 b5 02 	call	0x56a	; 0x56a <write_2Nib>
    wait_lcd();		
 5f0:	0e 94 c4 02 	call	0x588	; 0x588 <wait_lcd>
}
 5f4:	08 95       	ret

000005f6 <putchar_lcd>:
void putchar_lcd(unsigned char data){
	
	setbit(CTRL,RS);
 5f6:	a8 9a       	sbi	0x15, 0	; 21
	write_2Nib(data);
 5f8:	0e 94 b5 02 	call	0x56a	; 0x56a <write_2Nib>
	wait_lcd();
 5fc:	0e 94 c4 02 	call	0x588	; 0x588 <wait_lcd>
}
 600:	08 95       	ret

00000602 <cursor_home>:
void cursor_home(){
	clearbit(CTRL,RS);
 602:	a8 98       	cbi	0x15, 0	; 21
	write_2Nib(0x03);
 604:	83 e0       	ldi	r24, 0x03	; 3
 606:	0e 94 b5 02 	call	0x56a	; 0x56a <write_2Nib>
	wait_lcd();
 60a:	0e 94 c4 02 	call	0x588	; 0x588 <wait_lcd>
}
 60e:	08 95       	ret

00000610 <clear_lcd>:
void clear_lcd(){
	clearbit(CTRL,RS);
 610:	a8 98       	cbi	0x15, 0	; 21
	write_2Nib(0x01);
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	0e 94 b5 02 	call	0x56a	; 0x56a <write_2Nib>
	wait_lcd();
 618:	0e 94 c4 02 	call	0x588	; 0x588 <wait_lcd>
}
 61c:	08 95       	ret

0000061e <movecursor>:
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
	clearbit(CTRL,RS);
 61e:	a8 98       	cbi	0x15, 0	; 21
	write_2Nib(0x01);
	wait_lcd();
}
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
 620:	82 95       	swap	r24
 622:	88 0f       	add	r24, r24
 624:	88 0f       	add	r24, r24
 626:	80 7c       	andi	r24, 0xC0	; 192
 628:	86 0f       	add	r24, r22
	clearbit(CTRL,RS);
	write_2Nib(x);
 62a:	81 5c       	subi	r24, 0xC1	; 193
 62c:	0e 94 b5 02 	call	0x56a	; 0x56a <write_2Nib>
	wait_lcd();
 630:	0e 94 c4 02 	call	0x588	; 0x588 <wait_lcd>
}
 634:	08 95       	ret

00000636 <count_number>:
int count_number(unsigned int number){
 636:	bc 01       	movw	r22, r24
	int dem=0;
	while(number){
 638:	00 97       	sbiw	r24, 0x00	; 0
 63a:	71 f0       	breq	.+28     	; 0x658 <count_number+0x22>
	clearbit(CTRL,RS);
	write_2Nib(x);
	wait_lcd();
}
int count_number(unsigned int number){
	int dem=0;
 63c:	20 e0       	ldi	r18, 0x00	; 0
 63e:	30 e0       	ldi	r19, 0x00	; 0
	while(number){
		number=number/10;
 640:	ea e0       	ldi	r30, 0x0A	; 10
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	cb 01       	movw	r24, r22
 646:	bf 01       	movw	r22, r30
 648:	0e 94 84 03 	call	0x708	; 0x708 <__udivmodhi4>
		dem++;
 64c:	2f 5f       	subi	r18, 0xFF	; 255
 64e:	3f 4f       	sbci	r19, 0xFF	; 255
	write_2Nib(x);
	wait_lcd();
}
int count_number(unsigned int number){
	int dem=0;
	while(number){
 650:	61 15       	cp	r22, r1
 652:	71 05       	cpc	r23, r1
 654:	b9 f7       	brne	.-18     	; 0x644 <count_number+0xe>
 656:	02 c0       	rjmp	.+4      	; 0x65c <count_number+0x26>
	clearbit(CTRL,RS);
	write_2Nib(x);
	wait_lcd();
}
int count_number(unsigned int number){
	int dem=0;
 658:	20 e0       	ldi	r18, 0x00	; 0
 65a:	30 e0       	ldi	r19, 0x00	; 0
	while(number){
		number=number/10;
		dem++;
	}
	return dem;
}
 65c:	82 2f       	mov	r24, r18
 65e:	93 2f       	mov	r25, r19
 660:	08 95       	ret

00000662 <printnumber_lcd>:
void printnumber_lcd(unsigned int number){
 662:	1f 93       	push	r17
		number=number%temp;
		temp=temp/10;
		putchar_lcd(a+48);*/
		
		int a,b;
	a=number/10;
 664:	6a e0       	ldi	r22, 0x0A	; 10
 666:	70 e0       	ldi	r23, 0x00	; 0
 668:	0e 94 84 03 	call	0x708	; 0x708 <__udivmodhi4>
 66c:	18 2f       	mov	r17, r24
	putchar_lcd(a+48);
 66e:	86 2f       	mov	r24, r22
 670:	80 5d       	subi	r24, 0xD0	; 208
 672:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <putchar_lcd>
	b=number%10;
	putchar_lcd(b+48);
 676:	81 2f       	mov	r24, r17
 678:	80 5d       	subi	r24, 0xD0	; 208
 67a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <putchar_lcd>
	
	
}
 67e:	1f 91       	pop	r17
 680:	08 95       	ret

00000682 <putstr_lcd>:
putstr_lcd(unsigned char *str, unsigned int lenght){
 682:	ef 92       	push	r14
 684:	ff 92       	push	r15
 686:	0f 93       	push	r16
 688:	1f 93       	push	r17
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
 68e:	7b 01       	movw	r14, r22
	unsigned int i;
	for(i=0;i<lenght;i++){
 690:	61 15       	cp	r22, r1
 692:	71 05       	cpc	r23, r1
 694:	99 f0       	breq	.+38     	; 0x6bc <putstr_lcd+0x3a>
 696:	08 2f       	mov	r16, r24
 698:	19 2f       	mov	r17, r25
 69a:	c0 e0       	ldi	r28, 0x00	; 0
 69c:	d0 e0       	ldi	r29, 0x00	; 0
		if(*(str+i)>0){ 
 69e:	f8 01       	movw	r30, r16
 6a0:	81 91       	ld	r24, Z+
 6a2:	8f 01       	movw	r16, r30
 6a4:	88 23       	and	r24, r24
 6a6:	19 f0       	breq	.+6      	; 0x6ae <putstr_lcd+0x2c>
			putchar_lcd(*(str+i));
 6a8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <putchar_lcd>
 6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <putstr_lcd+0x32>
			}
		else putchar_lcd(0);	
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <putchar_lcd>
	
	
}
putstr_lcd(unsigned char *str, unsigned int lenght){
	unsigned int i;
	for(i=0;i<lenght;i++){
 6b4:	21 96       	adiw	r28, 0x01	; 1
 6b6:	ce 15       	cp	r28, r14
 6b8:	df 05       	cpc	r29, r15
 6ba:	88 f3       	brcs	.-30     	; 0x69e <putstr_lcd+0x1c>
		if(*(str+i)>0){ 
			putchar_lcd(*(str+i));
			}
		else putchar_lcd(0);	
}
}
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	1f 91       	pop	r17
 6c2:	0f 91       	pop	r16
 6c4:	ff 90       	pop	r15
 6c6:	ef 90       	pop	r14
 6c8:	08 95       	ret

000006ca <__mulsi3>:
 6ca:	62 9f       	mul	r22, r18
 6cc:	d0 01       	movw	r26, r0
 6ce:	73 9f       	mul	r23, r19
 6d0:	f0 01       	movw	r30, r0
 6d2:	82 9f       	mul	r24, r18
 6d4:	e0 0d       	add	r30, r0
 6d6:	f1 1d       	adc	r31, r1
 6d8:	64 9f       	mul	r22, r20
 6da:	e0 0d       	add	r30, r0
 6dc:	f1 1d       	adc	r31, r1
 6de:	92 9f       	mul	r25, r18
 6e0:	f0 0d       	add	r31, r0
 6e2:	83 9f       	mul	r24, r19
 6e4:	f0 0d       	add	r31, r0
 6e6:	74 9f       	mul	r23, r20
 6e8:	f0 0d       	add	r31, r0
 6ea:	65 9f       	mul	r22, r21
 6ec:	f0 0d       	add	r31, r0
 6ee:	99 27       	eor	r25, r25
 6f0:	72 9f       	mul	r23, r18
 6f2:	b0 0d       	add	r27, r0
 6f4:	e1 1d       	adc	r30, r1
 6f6:	f9 1f       	adc	r31, r25
 6f8:	63 9f       	mul	r22, r19
 6fa:	b0 0d       	add	r27, r0
 6fc:	e1 1d       	adc	r30, r1
 6fe:	f9 1f       	adc	r31, r25
 700:	bd 01       	movw	r22, r26
 702:	cf 01       	movw	r24, r30
 704:	11 24       	eor	r1, r1
 706:	08 95       	ret

00000708 <__udivmodhi4>:
 708:	aa 1b       	sub	r26, r26
 70a:	bb 1b       	sub	r27, r27
 70c:	51 e1       	ldi	r21, 0x11	; 17
 70e:	07 c0       	rjmp	.+14     	; 0x71e <__udivmodhi4_ep>

00000710 <__udivmodhi4_loop>:
 710:	aa 1f       	adc	r26, r26
 712:	bb 1f       	adc	r27, r27
 714:	a6 17       	cp	r26, r22
 716:	b7 07       	cpc	r27, r23
 718:	10 f0       	brcs	.+4      	; 0x71e <__udivmodhi4_ep>
 71a:	a6 1b       	sub	r26, r22
 71c:	b7 0b       	sbc	r27, r23

0000071e <__udivmodhi4_ep>:
 71e:	88 1f       	adc	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	5a 95       	dec	r21
 724:	a9 f7       	brne	.-22     	; 0x710 <__udivmodhi4_loop>
 726:	80 95       	com	r24
 728:	90 95       	com	r25
 72a:	bc 01       	movw	r22, r24
 72c:	cd 01       	movw	r24, r26
 72e:	08 95       	ret

00000730 <__divmodsi4>:
 730:	97 fb       	bst	r25, 7
 732:	09 2e       	mov	r0, r25
 734:	05 26       	eor	r0, r21
 736:	0e d0       	rcall	.+28     	; 0x754 <__divmodsi4_neg1>
 738:	57 fd       	sbrc	r21, 7
 73a:	04 d0       	rcall	.+8      	; 0x744 <__divmodsi4_neg2>
 73c:	14 d0       	rcall	.+40     	; 0x766 <__udivmodsi4>
 73e:	0a d0       	rcall	.+20     	; 0x754 <__divmodsi4_neg1>
 740:	00 1c       	adc	r0, r0
 742:	38 f4       	brcc	.+14     	; 0x752 <__divmodsi4_exit>

00000744 <__divmodsi4_neg2>:
 744:	50 95       	com	r21
 746:	40 95       	com	r20
 748:	30 95       	com	r19
 74a:	21 95       	neg	r18
 74c:	3f 4f       	sbci	r19, 0xFF	; 255
 74e:	4f 4f       	sbci	r20, 0xFF	; 255
 750:	5f 4f       	sbci	r21, 0xFF	; 255

00000752 <__divmodsi4_exit>:
 752:	08 95       	ret

00000754 <__divmodsi4_neg1>:
 754:	f6 f7       	brtc	.-4      	; 0x752 <__divmodsi4_exit>
 756:	90 95       	com	r25
 758:	80 95       	com	r24
 75a:	70 95       	com	r23
 75c:	61 95       	neg	r22
 75e:	7f 4f       	sbci	r23, 0xFF	; 255
 760:	8f 4f       	sbci	r24, 0xFF	; 255
 762:	9f 4f       	sbci	r25, 0xFF	; 255
 764:	08 95       	ret

00000766 <__udivmodsi4>:
 766:	a1 e2       	ldi	r26, 0x21	; 33
 768:	1a 2e       	mov	r1, r26
 76a:	aa 1b       	sub	r26, r26
 76c:	bb 1b       	sub	r27, r27
 76e:	fd 01       	movw	r30, r26
 770:	0d c0       	rjmp	.+26     	; 0x78c <__udivmodsi4_ep>

00000772 <__udivmodsi4_loop>:
 772:	aa 1f       	adc	r26, r26
 774:	bb 1f       	adc	r27, r27
 776:	ee 1f       	adc	r30, r30
 778:	ff 1f       	adc	r31, r31
 77a:	a2 17       	cp	r26, r18
 77c:	b3 07       	cpc	r27, r19
 77e:	e4 07       	cpc	r30, r20
 780:	f5 07       	cpc	r31, r21
 782:	20 f0       	brcs	.+8      	; 0x78c <__udivmodsi4_ep>
 784:	a2 1b       	sub	r26, r18
 786:	b3 0b       	sbc	r27, r19
 788:	e4 0b       	sbc	r30, r20
 78a:	f5 0b       	sbc	r31, r21

0000078c <__udivmodsi4_ep>:
 78c:	66 1f       	adc	r22, r22
 78e:	77 1f       	adc	r23, r23
 790:	88 1f       	adc	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	1a 94       	dec	r1
 796:	69 f7       	brne	.-38     	; 0x772 <__udivmodsi4_loop>
 798:	60 95       	com	r22
 79a:	70 95       	com	r23
 79c:	80 95       	com	r24
 79e:	90 95       	com	r25
 7a0:	9b 01       	movw	r18, r22
 7a2:	ac 01       	movw	r20, r24
 7a4:	bd 01       	movw	r22, r26
 7a6:	cf 01       	movw	r24, r30
 7a8:	08 95       	ret

000007aa <_exit>:
 7aa:	f8 94       	cli

000007ac <__stop_program>:
 7ac:	ff cf       	rjmp	.-2      	; 0x7ac <__stop_program>
