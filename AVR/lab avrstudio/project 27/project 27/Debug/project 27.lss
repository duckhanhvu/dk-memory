
project 27.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000040c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000480  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000fb  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003a4  00000000  00000000  00000d17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000178  00000000  00000000  000010bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e2  00000000  00000000  00001233  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000015a  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000267  00000000  00000000  00001a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000049  00000000  00000000  00001cd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__vector_1>
   8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 04 02 	jmp	0x408	; 0x408 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
volatile unsigned int val=0;
int main(void)
{
	
	
	DDRD=0x00;
  7c:	11 ba       	out	0x11, r1	; 17
	PORTD=0xFF;
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	82 bb       	out	0x12, r24	; 18
	init_lcd();
  82:	0e 94 fe 00 	call	0x1fc	; 0x1fc <init_lcd>
	clear_lcd();
  86:	0e 94 26 01 	call	0x24c	; 0x24c <clear_lcd>
	
	MCUCR|=(1<<ISC11)|(1<<ISC01);
  8a:	85 b7       	in	r24, 0x35	; 53
  8c:	8a 60       	ori	r24, 0x0A	; 10
  8e:	85 bf       	out	0x35, r24	; 53
	GICR    |=(1<<INT1)|(1<<INT0);
  90:	8b b7       	in	r24, 0x3b	; 59
  92:	80 6c       	ori	r24, 0xC0	; 192
  94:	8b bf       	out	0x3b, r24	; 59
	sei(); 
  96:	78 94       	sei
  98:	ff cf       	rjmp	.-2      	; 0x98 <main+0x1c>

0000009a <__vector_1>:
    }
	return 0;
   
}

ISR(INT0_vect){
  9a:	1f 92       	push	r1
  9c:	0f 92       	push	r0
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	0f 92       	push	r0
  a2:	11 24       	eor	r1, r1
  a4:	2f 93       	push	r18
  a6:	3f 93       	push	r19
  a8:	4f 93       	push	r20
  aa:	5f 93       	push	r21
  ac:	6f 93       	push	r22
  ae:	7f 93       	push	r23
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	af 93       	push	r26
  b6:	bf 93       	push	r27
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31
    val++;                                       //n?u có ng?t INT0 x?y ra, t?ng val thêm 1
  bc:	80 91 60 00 	lds	r24, 0x0060
  c0:	90 91 61 00 	lds	r25, 0x0061
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	90 93 61 00 	sts	0x0061, r25
  ca:	80 93 60 00 	sts	0x0060, r24
    if (val>9) val=0;                        //gi?i h?n không v??t quá 9
  ce:	80 91 60 00 	lds	r24, 0x0060
  d2:	90 91 61 00 	lds	r25, 0x0061
  d6:	8a 30       	cpi	r24, 0x0A	; 10
  d8:	91 05       	cpc	r25, r1
  da:	20 f0       	brcs	.+8      	; 0xe4 <__vector_1+0x4a>
  dc:	10 92 61 00 	sts	0x0061, r1
  e0:	10 92 60 00 	sts	0x0060, r1
    		movecursor(1,1);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	0e 94 2d 01 	call	0x25a	; 0x25a <movecursor>
	    printnumber_lcd(val);
  ec:	80 91 60 00 	lds	r24, 0x0060
  f0:	90 91 61 00 	lds	r25, 0x0061
  f4:	0e 94 4f 01 	call	0x29e	; 0x29e <printnumber_lcd>
}
  f8:	ff 91       	pop	r31
  fa:	ef 91       	pop	r30
  fc:	bf 91       	pop	r27
  fe:	af 91       	pop	r26
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	7f 91       	pop	r23
 106:	6f 91       	pop	r22
 108:	5f 91       	pop	r21
 10a:	4f 91       	pop	r20
 10c:	3f 91       	pop	r19
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_2>:

//Trình ph?c v? ng?t c?a  INT1
ISR(INT1_vect){
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	4f 93       	push	r20
 12a:	5f 93       	push	r21
 12c:	6f 93       	push	r22
 12e:	7f 93       	push	r23
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	af 93       	push	r26
 136:	bf 93       	push	r27
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
    val--;                                        //n?u có ng?t INT1 x?y ra, gi?m val ?i 1
 13c:	80 91 60 00 	lds	r24, 0x0060
 140:	90 91 61 00 	lds	r25, 0x0061
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	90 93 61 00 	sts	0x0061, r25
 14a:	80 93 60 00 	sts	0x0060, r24
    if (val<0) val=9;                       //gi?i h?n không nh? h?n 0
 14e:	80 91 60 00 	lds	r24, 0x0060
 152:	90 91 61 00 	lds	r25, 0x0061
    		movecursor(1,1);
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	0e 94 2d 01 	call	0x25a	; 0x25a <movecursor>
	    printnumber_lcd(val);
 15e:	80 91 60 00 	lds	r24, 0x0060
 162:	90 91 61 00 	lds	r25, 0x0061
 166:	0e 94 4f 01 	call	0x29e	; 0x29e <printnumber_lcd>
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	7f 91       	pop	r23
 178:	6f 91       	pop	r22
 17a:	5f 91       	pop	r21
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <read_2Nib>:


char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
 18c:	da 9a       	sbi	0x1b, 2	; 27
	DDR_DATA=0x0F;
 18e:	8f e0       	ldi	r24, 0x0F	; 15
 190:	8a bb       	out	0x1a, r24	; 26
	HNib=DATA_input&0xF0;
 192:	89 b3       	in	r24, 0x19	; 25
	clearbit(CTRL,EN);
 194:	da 98       	cbi	0x1b, 2	; 27
	
	setbit(CTRL,EN);
 196:	da 9a       	sbi	0x1b, 2	; 27
	LNib=DATA_input&0xF0;
 198:	99 b3       	in	r25, 0x19	; 25
	clearbit(CTRL,EN);
 19a:	da 98       	cbi	0x1b, 2	; 27
	LNib>>=4;
 19c:	92 95       	swap	r25
 19e:	9f 70       	andi	r25, 0x0F	; 15
char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
	DDR_DATA=0x0F;
	HNib=DATA_input&0xF0;
 1a0:	80 7f       	andi	r24, 0xF0	; 240
	LNib=DATA_input&0xF0;
	clearbit(CTRL,EN);
	LNib>>=4;
	
	return (HNib|LNib);
}
 1a2:	89 2b       	or	r24, r25
 1a4:	08 95       	ret

000001a6 <write_2Nib>:
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
 1a6:	9b b3       	in	r25, 0x1b	; 27
 1a8:	9f 70       	andi	r25, 0x0F	; 15
	HNib=data&0xF0;
 1aa:	28 2f       	mov	r18, r24
 1ac:	20 7f       	andi	r18, 0xF0	; 240
	LNib=(data<<4)&0xF0;
	
	DATA_output=HNib|temp;
 1ae:	29 2b       	or	r18, r25
 1b0:	2b bb       	out	0x1b, r18	; 27
	setbit(CTRL,EN);
 1b2:	da 9a       	sbi	0x1b, 2	; 27
	clearbit(CTRL,EN);
 1b4:	da 98       	cbi	0x1b, 2	; 27
}
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
	HNib=data&0xF0;
	LNib=(data<<4)&0xF0;
 1b6:	82 95       	swap	r24
 1b8:	80 7f       	andi	r24, 0xF0	; 240
	
	DATA_output=HNib|temp;
	setbit(CTRL,EN);
	clearbit(CTRL,EN);
	
	DATA_output=LNib|temp;
 1ba:	98 2b       	or	r25, r24
 1bc:	9b bb       	out	0x1b, r25	; 27
	setbit(CTRL,EN);
 1be:	da 9a       	sbi	0x1b, 2	; 27
	clearbit(CTRL,EN);
 1c0:	da 98       	cbi	0x1b, 2	; 27
	
}
 1c2:	08 95       	ret

000001c4 <wait_lcd>:
void wait_lcd(void){
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	df 93       	push	r29
 1ca:	cf 93       	push	r28
 1cc:	0f 92       	push	r0
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
	while(1){
     	clearbit(CTRL,RS);
		setbit(CTRL,RW);
		temp=read_2Nib();
		
		if(bit_is_clear(temp,7)) break;
 1d2:	8e 01       	movw	r16, r28
 1d4:	0f 5f       	subi	r16, 0xFF	; 255
 1d6:	1f 4f       	sbci	r17, 0xFF	; 255
}
void wait_lcd(void){
	unsigned char temp;
	
	while(1){
     	clearbit(CTRL,RS);
 1d8:	d8 98       	cbi	0x1b, 0	; 27
		setbit(CTRL,RW);
 1da:	d9 9a       	sbi	0x1b, 1	; 27
		temp=read_2Nib();
 1dc:	0e 94 c6 00 	call	0x18c	; 0x18c <read_2Nib>
 1e0:	89 83       	std	Y+1, r24	; 0x01
		
		if(bit_is_clear(temp,7)) break;
 1e2:	f8 01       	movw	r30, r16
 1e4:	80 81       	ld	r24, Z
 1e6:	88 23       	and	r24, r24
 1e8:	bc f3       	brlt	.-18     	; 0x1d8 <wait_lcd+0x14>
	}
	clearbit(CTRL,RW);
 1ea:	d9 98       	cbi	0x1b, 1	; 27
	DDR_DATA=0xFF;
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	8a bb       	out	0x1a, r24	; 26
	
}
 1f0:	0f 90       	pop	r0
 1f2:	cf 91       	pop	r28
 1f4:	df 91       	pop	r29
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	08 95       	ret

000001fc <init_lcd>:

void init_lcd(){//uses mode 4 bit
	DDR_CTRL=0xFF;
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	8a bb       	out	0x1a, r24	; 26
	DDR_DATA=0xFF;
 200:	8a bb       	out	0x1a, r24	; 26
	clearbit(CTRL,RS);
 202:	d8 98       	cbi	0x1b, 0	; 27
	clearbit(CTRL,RW);
 204:	d9 98       	cbi	0x1b, 1	; 27
	clearbit(CTRL,EN);
 206:	da 98       	cbi	0x1b, 2	; 27
	
//function set	
	setbit(CTRL,EN);
 208:	da 9a       	sbi	0x1b, 2	; 27
	setbit(DATA_output,5);
 20a:	dd 9a       	sbi	0x1b, 5	; 27
	clearbit(CTRL,EN);
 20c:	da 98       	cbi	0x1b, 2	; 27
	wait_lcd();
 20e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <wait_lcd>
	write_2Nib(0x28);
 212:	88 e2       	ldi	r24, 0x28	; 40
 214:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <write_2Nib>
	wait_lcd();
 218:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <wait_lcd>
//display on/off control
    write_2Nib(0x0E);
 21c:	8e e0       	ldi	r24, 0x0E	; 14
 21e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <write_2Nib>
	wait_lcd();
 222:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <wait_lcd>

//entry mode set 
    
    write_2Nib(0x06);
 226:	86 e0       	ldi	r24, 0x06	; 6
 228:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <write_2Nib>
    wait_lcd();		
 22c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <wait_lcd>
}
 230:	08 95       	ret

00000232 <putchar_lcd>:
void putchar_lcd(unsigned char data){
	
	setbit(CTRL,RS);
 232:	d8 9a       	sbi	0x1b, 0	; 27
	write_2Nib(data);
 234:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <write_2Nib>
	wait_lcd();
 238:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <wait_lcd>
}
 23c:	08 95       	ret

0000023e <cursor_home>:
void cursor_home(){
	clearbit(CTRL,RS);
 23e:	d8 98       	cbi	0x1b, 0	; 27
	write_2Nib(0x03);
 240:	83 e0       	ldi	r24, 0x03	; 3
 242:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <write_2Nib>
	wait_lcd();
 246:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <wait_lcd>
}
 24a:	08 95       	ret

0000024c <clear_lcd>:
void clear_lcd(){
	clearbit(CTRL,RS);
 24c:	d8 98       	cbi	0x1b, 0	; 27
	write_2Nib(0x01);
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <write_2Nib>
	wait_lcd();
 254:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <wait_lcd>
}
 258:	08 95       	ret

0000025a <movecursor>:
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
	clearbit(CTRL,RS);
 25a:	d8 98       	cbi	0x1b, 0	; 27
	write_2Nib(0x01);
	wait_lcd();
}
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
 25c:	82 95       	swap	r24
 25e:	88 0f       	add	r24, r24
 260:	88 0f       	add	r24, r24
 262:	80 7c       	andi	r24, 0xC0	; 192
 264:	86 0f       	add	r24, r22
	clearbit(CTRL,RS);
	write_2Nib(x);
 266:	81 5c       	subi	r24, 0xC1	; 193
 268:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <write_2Nib>
	wait_lcd();
 26c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <wait_lcd>
}
 270:	08 95       	ret

00000272 <count_number>:
int count_number(unsigned int number){
 272:	bc 01       	movw	r22, r24
	int dem=0;
	if(number!=0) {
 274:	00 97       	sbiw	r24, 0x00	; 0
 276:	71 f0       	breq	.+28     	; 0x294 <count_number+0x22>
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	30 e0       	ldi	r19, 0x00	; 0
	   while(number){
		number=number/10;
 27c:	ea e0       	ldi	r30, 0x0A	; 10
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	cb 01       	movw	r24, r22
 282:	bf 01       	movw	r22, r30
 284:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__udivmodhi4>
		dem++;
 288:	2f 5f       	subi	r18, 0xFF	; 255
 28a:	3f 4f       	sbci	r19, 0xFF	; 255
	wait_lcd();
}
int count_number(unsigned int number){
	int dem=0;
	if(number!=0) {
	   while(number){
 28c:	61 15       	cp	r22, r1
 28e:	71 05       	cpc	r23, r1
 290:	b9 f7       	brne	.-18     	; 0x280 <count_number+0xe>
 292:	02 c0       	rjmp	.+4      	; 0x298 <count_number+0x26>
		number=number/10;
		dem++;
	}	
    } 
	else dem=dem+1; 
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	30 e0       	ldi	r19, 0x00	; 0
	return dem;
	}
 298:	82 2f       	mov	r24, r18
 29a:	93 2f       	mov	r25, r19
 29c:	08 95       	ret

0000029e <printnumber_lcd>:
void printnumber_lcd(unsigned int number){
 29e:	ef 92       	push	r14
 2a0:	ff 92       	push	r15
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
	putchar_lcd(a+48);
	b=number%10;
	putchar_lcd(b+48);
	*/
		int a,b,c,d,e;
	    a=number/10000;
 2aa:	60 e1       	ldi	r22, 0x10	; 16
 2ac:	77 e2       	ldi	r23, 0x27	; 39
 2ae:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__udivmodhi4>
 2b2:	9b 01       	movw	r18, r22
	    //putchar_lcd(a+48);
		number=number%10000;
	    b=number/1000;
 2b4:	68 ee       	ldi	r22, 0xE8	; 232
 2b6:	73 e0       	ldi	r23, 0x03	; 3
 2b8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__udivmodhi4>
 2bc:	06 2f       	mov	r16, r22
 2be:	e6 2f       	mov	r30, r22
 2c0:	f7 2f       	mov	r31, r23
	    //putchar_lcd(b+48);
	    number=number%1000;
	    c=number/100;
 2c2:	64 e6       	ldi	r22, 0x64	; 100
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__udivmodhi4>
 2ca:	16 2f       	mov	r17, r22
 2cc:	e6 2e       	mov	r14, r22
 2ce:	e7 01       	movw	r28, r14
 2d0:	7e 01       	movw	r14, r28
 2d2:	f7 2e       	mov	r15, r23
 2d4:	e7 01       	movw	r28, r14
	    //putchar_lcd(c+48);	
	    number=number%100;
	    d=number/10;
 2d6:	6a e0       	ldi	r22, 0x0A	; 10
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__udivmodhi4>
 2de:	e6 2e       	mov	r14, r22
 2e0:	46 2f       	mov	r20, r22
 2e2:	57 2f       	mov	r21, r23
	    //putchar_lcd(d+48);	
	    e=number%10;
 2e4:	f8 2e       	mov	r15, r24
	   // putchar_lcd(e+48);
    if(a==0 && b==0 && c==0 && d==0){
 2e6:	21 15       	cp	r18, r1
 2e8:	31 05       	cpc	r19, r1
 2ea:	a1 f5       	brne	.+104    	; 0x354 <printnumber_lcd+0xb6>
 2ec:	30 97       	sbiw	r30, 0x00	; 0
 2ee:	09 f5       	brne	.+66     	; 0x332 <printnumber_lcd+0x94>
 2f0:	20 97       	sbiw	r28, 0x00	; 0
 2f2:	39 f4       	brne	.+14     	; 0x302 <printnumber_lcd+0x64>
 2f4:	41 15       	cp	r20, r1
 2f6:	51 05       	cpc	r21, r1
 2f8:	21 f4       	brne	.+8      	; 0x302 <printnumber_lcd+0x64>
		putchar_lcd(e+48);
 2fa:	80 5d       	subi	r24, 0xD0	; 208
 2fc:	0e 94 19 01 	call	0x232	; 0x232 <putchar_lcd>
 300:	44 c0       	rjmp	.+136    	; 0x38a <printnumber_lcd+0xec>
	}
	else if(a==0 && b==0 && c==0){
 302:	20 97       	sbiw	r28, 0x00	; 0
 304:	49 f4       	brne	.+18     	; 0x318 <printnumber_lcd+0x7a>
		putchar_lcd(d+48);
 306:	8e 2d       	mov	r24, r14
 308:	80 5d       	subi	r24, 0xD0	; 208
 30a:	0e 94 19 01 	call	0x232	; 0x232 <putchar_lcd>
		putchar_lcd(e+48);
 30e:	8f 2d       	mov	r24, r15
 310:	80 5d       	subi	r24, 0xD0	; 208
 312:	0e 94 19 01 	call	0x232	; 0x232 <putchar_lcd>
 316:	39 c0       	rjmp	.+114    	; 0x38a <printnumber_lcd+0xec>
	}
	else if(a==0 && b==0){
		putchar_lcd(c+48);
 318:	81 2f       	mov	r24, r17
 31a:	80 5d       	subi	r24, 0xD0	; 208
 31c:	0e 94 19 01 	call	0x232	; 0x232 <putchar_lcd>
		putchar_lcd(d+48);
 320:	8e 2d       	mov	r24, r14
 322:	80 5d       	subi	r24, 0xD0	; 208
 324:	0e 94 19 01 	call	0x232	; 0x232 <putchar_lcd>
		putchar_lcd(e+48);
 328:	8f 2d       	mov	r24, r15
 32a:	80 5d       	subi	r24, 0xD0	; 208
 32c:	0e 94 19 01 	call	0x232	; 0x232 <putchar_lcd>
 330:	2c c0       	rjmp	.+88     	; 0x38a <printnumber_lcd+0xec>
	}
	else if(a==0){
		putchar_lcd(b+48);
 332:	80 2f       	mov	r24, r16
 334:	80 5d       	subi	r24, 0xD0	; 208
 336:	0e 94 19 01 	call	0x232	; 0x232 <putchar_lcd>
	    putchar_lcd(c+48);
 33a:	81 2f       	mov	r24, r17
 33c:	80 5d       	subi	r24, 0xD0	; 208
 33e:	0e 94 19 01 	call	0x232	; 0x232 <putchar_lcd>
		putchar_lcd(d+48);
 342:	8e 2d       	mov	r24, r14
 344:	80 5d       	subi	r24, 0xD0	; 208
 346:	0e 94 19 01 	call	0x232	; 0x232 <putchar_lcd>
		putchar_lcd(e+48);
 34a:	8f 2d       	mov	r24, r15
 34c:	80 5d       	subi	r24, 0xD0	; 208
 34e:	0e 94 19 01 	call	0x232	; 0x232 <putchar_lcd>
 352:	1b c0       	rjmp	.+54     	; 0x38a <printnumber_lcd+0xec>
	}
	else if(a!=0 && b!=0 && c!=0 && d!=0){
 354:	30 97       	sbiw	r30, 0x00	; 0
 356:	c9 f0       	breq	.+50     	; 0x38a <printnumber_lcd+0xec>
 358:	20 97       	sbiw	r28, 0x00	; 0
 35a:	b9 f0       	breq	.+46     	; 0x38a <printnumber_lcd+0xec>
 35c:	41 15       	cp	r20, r1
 35e:	51 05       	cpc	r21, r1
 360:	a1 f0       	breq	.+40     	; 0x38a <printnumber_lcd+0xec>
		putchar_lcd(a+48);
 362:	82 2f       	mov	r24, r18
 364:	80 5d       	subi	r24, 0xD0	; 208
 366:	0e 94 19 01 	call	0x232	; 0x232 <putchar_lcd>
		putchar_lcd(b+48);
 36a:	80 2f       	mov	r24, r16
 36c:	80 5d       	subi	r24, 0xD0	; 208
 36e:	0e 94 19 01 	call	0x232	; 0x232 <putchar_lcd>
	    putchar_lcd(c+48);
 372:	81 2f       	mov	r24, r17
 374:	80 5d       	subi	r24, 0xD0	; 208
 376:	0e 94 19 01 	call	0x232	; 0x232 <putchar_lcd>
		putchar_lcd(d+48);
 37a:	8e 2d       	mov	r24, r14
 37c:	80 5d       	subi	r24, 0xD0	; 208
 37e:	0e 94 19 01 	call	0x232	; 0x232 <putchar_lcd>
		putchar_lcd(e+48);
 382:	8f 2d       	mov	r24, r15
 384:	80 5d       	subi	r24, 0xD0	; 208
 386:	0e 94 19 01 	call	0x232	; 0x232 <putchar_lcd>
	}
}
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	1f 91       	pop	r17
 390:	0f 91       	pop	r16
 392:	ff 90       	pop	r15
 394:	ef 90       	pop	r14
 396:	08 95       	ret

00000398 <putstr_lcd>:
putstr_lcd(unsigned char *str, unsigned int lenght){
 398:	ef 92       	push	r14
 39a:	ff 92       	push	r15
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	7b 01       	movw	r14, r22
	unsigned int i;
	for(i=0;i<lenght;i++){
 3a6:	61 15       	cp	r22, r1
 3a8:	71 05       	cpc	r23, r1
 3aa:	99 f0       	breq	.+38     	; 0x3d2 <putstr_lcd+0x3a>
 3ac:	08 2f       	mov	r16, r24
 3ae:	19 2f       	mov	r17, r25
 3b0:	c0 e0       	ldi	r28, 0x00	; 0
 3b2:	d0 e0       	ldi	r29, 0x00	; 0
		if(*(str+i)>0){ 
 3b4:	f8 01       	movw	r30, r16
 3b6:	81 91       	ld	r24, Z+
 3b8:	8f 01       	movw	r16, r30
 3ba:	88 23       	and	r24, r24
 3bc:	19 f0       	breq	.+6      	; 0x3c4 <putstr_lcd+0x2c>
			putchar_lcd(*(str+i));
 3be:	0e 94 19 01 	call	0x232	; 0x232 <putchar_lcd>
 3c2:	03 c0       	rjmp	.+6      	; 0x3ca <putstr_lcd+0x32>
			}
		else putchar_lcd(0);	
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 19 01 	call	0x232	; 0x232 <putchar_lcd>
		putchar_lcd(e+48);
	}
}
putstr_lcd(unsigned char *str, unsigned int lenght){
	unsigned int i;
	for(i=0;i<lenght;i++){
 3ca:	21 96       	adiw	r28, 0x01	; 1
 3cc:	ce 15       	cp	r28, r14
 3ce:	df 05       	cpc	r29, r15
 3d0:	88 f3       	brcs	.-30     	; 0x3b4 <putstr_lcd+0x1c>
		if(*(str+i)>0){ 
			putchar_lcd(*(str+i));
			}
		else putchar_lcd(0);	
}
}
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	1f 91       	pop	r17
 3d8:	0f 91       	pop	r16
 3da:	ff 90       	pop	r15
 3dc:	ef 90       	pop	r14
 3de:	08 95       	ret

000003e0 <__udivmodhi4>:
 3e0:	aa 1b       	sub	r26, r26
 3e2:	bb 1b       	sub	r27, r27
 3e4:	51 e1       	ldi	r21, 0x11	; 17
 3e6:	07 c0       	rjmp	.+14     	; 0x3f6 <__udivmodhi4_ep>

000003e8 <__udivmodhi4_loop>:
 3e8:	aa 1f       	adc	r26, r26
 3ea:	bb 1f       	adc	r27, r27
 3ec:	a6 17       	cp	r26, r22
 3ee:	b7 07       	cpc	r27, r23
 3f0:	10 f0       	brcs	.+4      	; 0x3f6 <__udivmodhi4_ep>
 3f2:	a6 1b       	sub	r26, r22
 3f4:	b7 0b       	sbc	r27, r23

000003f6 <__udivmodhi4_ep>:
 3f6:	88 1f       	adc	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	5a 95       	dec	r21
 3fc:	a9 f7       	brne	.-22     	; 0x3e8 <__udivmodhi4_loop>
 3fe:	80 95       	com	r24
 400:	90 95       	com	r25
 402:	bc 01       	movw	r22, r24
 404:	cd 01       	movw	r24, r26
 406:	08 95       	ret

00000408 <_exit>:
 408:	f8 94       	cli

0000040a <__stop_program>:
 40a:	ff cf       	rjmp	.-2      	; 0x40a <__stop_program>
