
project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000408  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000408  0000047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000d5  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000079b  00000000  00000000  00000cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000263  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000748  00000000  00000000  000016f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ad  00000000  00000000  00001f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000289  00000000  00000000  000020c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000064  00000000  00000000  00002352  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a2 01 	call	0x344	; 0x344 <main>
  7a:	0c 94 02 02 	jmp	0x404	; 0x404 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <read_2Nib>:


char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
  82:	da 9a       	sbi	0x1b, 2	; 27
	DDR_DATA=0x0F;
  84:	8f e0       	ldi	r24, 0x0F	; 15
  86:	8a bb       	out	0x1a, r24	; 26
	HNib=DATA_input&0xF0;
  88:	89 b3       	in	r24, 0x19	; 25
	clearbit(CTRL,EN);
  8a:	da 98       	cbi	0x1b, 2	; 27
	
	setbit(CTRL,EN);
  8c:	da 9a       	sbi	0x1b, 2	; 27
	LNib=DATA_input&0xF0;
  8e:	99 b3       	in	r25, 0x19	; 25
	clearbit(CTRL,EN);
  90:	da 98       	cbi	0x1b, 2	; 27
	LNib>>=4;
  92:	92 95       	swap	r25
  94:	9f 70       	andi	r25, 0x0F	; 15
char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
	DDR_DATA=0x0F;
	HNib=DATA_input&0xF0;
  96:	80 7f       	andi	r24, 0xF0	; 240
	LNib=DATA_input&0xF0;
	clearbit(CTRL,EN);
	LNib>>=4;
	
	return (HNib|LNib);
}
  98:	89 2b       	or	r24, r25
  9a:	08 95       	ret

0000009c <write_2Nib>:
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
  9c:	9b b3       	in	r25, 0x1b	; 27
  9e:	9f 70       	andi	r25, 0x0F	; 15
	HNib=data&0xF0;
  a0:	28 2f       	mov	r18, r24
  a2:	20 7f       	andi	r18, 0xF0	; 240
	LNib=(data<<4)&0xF0;
	
	DATA_output=HNib|temp;
  a4:	29 2b       	or	r18, r25
  a6:	2b bb       	out	0x1b, r18	; 27
	setbit(CTRL,EN);
  a8:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	00 00       	nop
	_delay_us(1);
	clearbit(CTRL,EN);
  ac:	da 98       	cbi	0x1b, 2	; 27
  ae:	00 00       	nop
}
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
	HNib=data&0xF0;
	LNib=(data<<4)&0xF0;
  b0:	82 95       	swap	r24
  b2:	80 7f       	andi	r24, 0xF0	; 240
	setbit(CTRL,EN);
	_delay_us(1);
	clearbit(CTRL,EN);
	_delay_us(1);
	
	DATA_output=LNib|temp;
  b4:	98 2b       	or	r25, r24
  b6:	9b bb       	out	0x1b, r25	; 27
	setbit(CTRL,EN);
  b8:	da 9a       	sbi	0x1b, 2	; 27
  ba:	00 00       	nop
	_delay_us(1);
	//_delay_us(2);
	clearbit(CTRL,EN);
  bc:	da 98       	cbi	0x1b, 2	; 27
  be:	00 00       	nop
	//_delay_us(100);
	_delay_us(1);
}
  c0:	08 95       	ret

000000c2 <wait_lcd>:
void wait_lcd(void){
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	df 93       	push	r29
  c8:	cf 93       	push	r28
  ca:	0f 92       	push	r0
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	while(1){
     	clearbit(CTRL,RS);
		setbit(CTRL,RW);
		temp=read_2Nib();
		
		if(bit_is_clear(temp,7)) break;
  d0:	8e 01       	movw	r16, r28
  d2:	0f 5f       	subi	r16, 0xFF	; 255
  d4:	1f 4f       	sbci	r17, 0xFF	; 255
}
void wait_lcd(void){
	unsigned char temp;
	
	while(1){
     	clearbit(CTRL,RS);
  d6:	d8 98       	cbi	0x1b, 0	; 27
		setbit(CTRL,RW);
  d8:	d9 9a       	sbi	0x1b, 1	; 27
		temp=read_2Nib();
  da:	0e 94 41 00 	call	0x82	; 0x82 <read_2Nib>
  de:	89 83       	std	Y+1, r24	; 0x01
		
		if(bit_is_clear(temp,7)) break;
  e0:	f8 01       	movw	r30, r16
  e2:	80 81       	ld	r24, Z
  e4:	88 23       	and	r24, r24
  e6:	bc f3       	brlt	.-18     	; 0xd6 <wait_lcd+0x14>
	}
	clearbit(CTRL,RW);
  e8:	d9 98       	cbi	0x1b, 1	; 27
	DDR_DATA=0xFF;
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	8a bb       	out	0x1a, r24	; 26
	
}
  ee:	0f 90       	pop	r0
  f0:	cf 91       	pop	r28
  f2:	df 91       	pop	r29
  f4:	1f 91       	pop	r17
  f6:	0f 91       	pop	r16
  f8:	08 95       	ret

000000fa <init_lcd>:
   // wait_lcd();
	_delay_ms(10);	
	
*/

	DDR_CTRL=0xFF;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	8a bb       	out	0x1a, r24	; 26
	DDR_DATA=0xFF;
  fe:	8a bb       	out	0x1a, r24	; 26
	clearbit(CTRL,RS);
 100:	d8 98       	cbi	0x1b, 0	; 27
	clearbit(CTRL,RW);
 102:	d9 98       	cbi	0x1b, 1	; 27
	clearbit(CTRL,EN);
 104:	da 98       	cbi	0x1b, 2	; 27
	
	setbit(CTRL,EN);
 106:	da 9a       	sbi	0x1b, 2	; 27
	setbit(DATA_output,5);
 108:	dd 9a       	sbi	0x1b, 5	; 27
	clearbit(CTRL,EN);
 10a:	da 98       	cbi	0x1b, 2	; 27


		
write_2Nib(0x28); // initialization of 16X2 LCD in 8bit mode
 10c:	88 e2       	ldi	r24, 0x28	; 40
 10e:	0e 94 4e 00 	call	0x9c	; 0x9c <write_2Nib>
 112:	80 e5       	ldi	r24, 0x50	; 80
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <init_lcd+0x1a>
_delay_us(240);

write_2Nib(0x0C);
 118:	8c e0       	ldi	r24, 0x0C	; 12
 11a:	0e 94 4e 00 	call	0x9c	; 0x9c <write_2Nib>
 11e:	90 e5       	ldi	r25, 0x50	; 80
 120:	9a 95       	dec	r25
 122:	f1 f7       	brne	.-4      	; 0x120 <init_lcd+0x26>
_delay_us(240);	

write_2Nib(0x01); // clear LCD
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 4e 00 	call	0x9c	; 0x9c <write_2Nib>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	83 ec       	ldi	r24, 0xC3	; 195
 12c:	99 e0       	ldi	r25, 0x09	; 9
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <init_lcd+0x34>
 132:	00 c0       	rjmp	.+0      	; 0x134 <init_lcd+0x3a>
 134:	00 00       	nop
_delay_ms(10);
 
write_2Nib(0x06); // cursor ON
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	0e 94 4e 00 	call	0x9c	; 0x9c <write_2Nib>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	90 e5       	ldi	r25, 0x50	; 80
 13e:	9a 95       	dec	r25
 140:	f1 f7       	brne	.-4      	; 0x13e <init_lcd+0x44>
_delay_us(240);
 
	
}
 142:	08 95       	ret

00000144 <putchar_lcd>:
void putchar_lcd(unsigned char data){
	
	setbit(CTRL,RS);
 144:	d8 9a       	sbi	0x1b, 0	; 27
	clearbit(CTRL,RW);
 146:	d9 98       	cbi	0x1b, 1	; 27
	write_2Nib(data);
 148:	0e 94 4e 00 	call	0x9c	; 0x9c <write_2Nib>
 14c:	80 e5       	ldi	r24, 0x50	; 80
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <putchar_lcd+0xa>
	//wait_lcd();
	_delay_us(240);
}
 152:	08 95       	ret

00000154 <cursor_home>:
void cursor_home(){
	clearbit(CTRL,RS);
 154:	d8 98       	cbi	0x1b, 0	; 27
	clearbit(CTRL,RW);
 156:	d9 98       	cbi	0x1b, 1	; 27
	write_2Nib(0x03);
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	0e 94 4e 00 	call	0x9c	; 0x9c <write_2Nib>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	83 ec       	ldi	r24, 0xC3	; 195
 160:	99 e0       	ldi	r25, 0x09	; 9
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <cursor_home+0xe>
 166:	00 c0       	rjmp	.+0      	; 0x168 <cursor_home+0x14>
 168:	00 00       	nop
	//wait_lcd();
	_delay_ms(10);
}
 16a:	08 95       	ret

0000016c <clear_lcd>:
void clear_lcd(){
	clearbit(CTRL,RS);
 16c:	d8 98       	cbi	0x1b, 0	; 27
	clearbit(CTRL,RW);
 16e:	d9 98       	cbi	0x1b, 1	; 27
	write_2Nib(0x01);
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 4e 00 	call	0x9c	; 0x9c <write_2Nib>
 176:	83 ec       	ldi	r24, 0xC3	; 195
 178:	99 e0       	ldi	r25, 0x09	; 9
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <clear_lcd+0xe>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <clear_lcd+0x14>
 180:	00 00       	nop
	//wait_lcd();
	_delay_ms(10);
}
 182:	08 95       	ret

00000184 <movecursor>:
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
	clearbit(CTRL,RS);
 184:	d8 98       	cbi	0x1b, 0	; 27
	//wait_lcd();
	_delay_ms(10);
}
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
 186:	82 95       	swap	r24
 188:	88 0f       	add	r24, r24
 18a:	88 0f       	add	r24, r24
 18c:	80 7c       	andi	r24, 0xC0	; 192
 18e:	86 0f       	add	r24, r22
	clearbit(CTRL,RS);
	write_2Nib(x);
 190:	81 5c       	subi	r24, 0xC1	; 193
 192:	0e 94 4e 00 	call	0x9c	; 0x9c <write_2Nib>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	80 e5       	ldi	r24, 0x50	; 80
 198:	8a 95       	dec	r24
 19a:	f1 f7       	brne	.-4      	; 0x198 <movecursor+0x14>
	//wait_lcd();
	_delay_us(240);
}
 19c:	08 95       	ret

0000019e <count_number>:
int count_number(long int number){
 19e:	ef 92       	push	r14
 1a0:	ff 92       	push	r15
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	9b 01       	movw	r18, r22
 1ac:	ac 01       	movw	r20, r24
	int dem=0;
	if(number!=0) {
 1ae:	61 15       	cp	r22, r1
 1b0:	71 05       	cpc	r23, r1
 1b2:	81 05       	cpc	r24, r1
 1b4:	91 05       	cpc	r25, r1
 1b6:	c9 f0       	breq	.+50     	; 0x1ea <count_number+0x4c>
 1b8:	c0 e0       	ldi	r28, 0x00	; 0
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
	   while(number){
		number=number/10;
 1bc:	0f 2e       	mov	r0, r31
 1be:	fa e0       	ldi	r31, 0x0A	; 10
 1c0:	ef 2e       	mov	r14, r31
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	ff 2e       	mov	r15, r31
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	0f 2f       	mov	r16, r31
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	1f 2f       	mov	r17, r31
 1ce:	f0 2d       	mov	r31, r0
 1d0:	ca 01       	movw	r24, r20
 1d2:	b9 01       	movw	r22, r18
 1d4:	a8 01       	movw	r20, r16
 1d6:	97 01       	movw	r18, r14
 1d8:	0e 94 c5 01 	call	0x38a	; 0x38a <__divmodsi4>
		dem++;
 1dc:	21 96       	adiw	r28, 0x01	; 1
	_delay_us(240);
}
int count_number(long int number){
	int dem=0;
	if(number!=0) {
	   while(number){
 1de:	21 15       	cp	r18, r1
 1e0:	31 05       	cpc	r19, r1
 1e2:	41 05       	cpc	r20, r1
 1e4:	51 05       	cpc	r21, r1
 1e6:	a1 f7       	brne	.-24     	; 0x1d0 <count_number+0x32>
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <count_number+0x50>
		number=number/10;
		dem++;
	}	
    } 
	else dem=dem+1; 
 1ea:	c1 e0       	ldi	r28, 0x01	; 1
 1ec:	d0 e0       	ldi	r29, 0x00	; 0
	return dem;
}
 1ee:	7e 01       	movw	r14, r28
 1f0:	8c 2f       	mov	r24, r28
 1f2:	9f 2d       	mov	r25, r15
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	1f 91       	pop	r17
 1fa:	0f 91       	pop	r16
 1fc:	ff 90       	pop	r15
 1fe:	ef 90       	pop	r14
 200:	08 95       	ret

00000202 <printnumber_lcd>:
void printnumber_lcd(unsigned int number){
 202:	ef 92       	push	r14
 204:	ff 92       	push	r15
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
		number=number%temp;
		temp=temp/10;
		putchar_lcd(a+48);
	}*/
			int a,b,c,d,e;
	    a=number/10000;
 20e:	60 e1       	ldi	r22, 0x10	; 16
 210:	77 e2       	ldi	r23, 0x27	; 39
 212:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodhi4>
 216:	9b 01       	movw	r18, r22
	    //putchar_lcd(a+48);
		number=number%10000;
	    b=number/1000;
 218:	68 ee       	ldi	r22, 0xE8	; 232
 21a:	73 e0       	ldi	r23, 0x03	; 3
 21c:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodhi4>
 220:	06 2f       	mov	r16, r22
 222:	e6 2f       	mov	r30, r22
 224:	f7 2f       	mov	r31, r23
	    //putchar_lcd(b+48);
	    number=number%1000;
	    c=number/100;
 226:	64 e6       	ldi	r22, 0x64	; 100
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodhi4>
 22e:	16 2f       	mov	r17, r22
 230:	e6 2e       	mov	r14, r22
 232:	e7 01       	movw	r28, r14
 234:	7e 01       	movw	r14, r28
 236:	f7 2e       	mov	r15, r23
 238:	e7 01       	movw	r28, r14
	    //putchar_lcd(c+48);	
	    number=number%100;
	    d=number/10;
 23a:	6a e0       	ldi	r22, 0x0A	; 10
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodhi4>
 242:	e6 2e       	mov	r14, r22
 244:	46 2f       	mov	r20, r22
 246:	57 2f       	mov	r21, r23
	    //putchar_lcd(d+48);	
	    e=number%10;
 248:	f8 2e       	mov	r15, r24
	   // putchar_lcd(e+48);
    if(a==0 && b==0 && c==0 && d==0){
 24a:	21 15       	cp	r18, r1
 24c:	31 05       	cpc	r19, r1
 24e:	a1 f5       	brne	.+104    	; 0x2b8 <printnumber_lcd+0xb6>
 250:	30 97       	sbiw	r30, 0x00	; 0
 252:	09 f5       	brne	.+66     	; 0x296 <printnumber_lcd+0x94>
 254:	20 97       	sbiw	r28, 0x00	; 0
 256:	39 f4       	brne	.+14     	; 0x266 <printnumber_lcd+0x64>
 258:	41 15       	cp	r20, r1
 25a:	51 05       	cpc	r21, r1
 25c:	21 f4       	brne	.+8      	; 0x266 <printnumber_lcd+0x64>
		putchar_lcd(e+48);
 25e:	80 5d       	subi	r24, 0xD0	; 208
 260:	0e 94 a2 00 	call	0x144	; 0x144 <putchar_lcd>
 264:	44 c0       	rjmp	.+136    	; 0x2ee <printnumber_lcd+0xec>
	}
	else if(a==0 && b==0 && c==0){
 266:	20 97       	sbiw	r28, 0x00	; 0
 268:	49 f4       	brne	.+18     	; 0x27c <printnumber_lcd+0x7a>
		putchar_lcd(d+48);
 26a:	8e 2d       	mov	r24, r14
 26c:	80 5d       	subi	r24, 0xD0	; 208
 26e:	0e 94 a2 00 	call	0x144	; 0x144 <putchar_lcd>
		putchar_lcd(e+48);
 272:	8f 2d       	mov	r24, r15
 274:	80 5d       	subi	r24, 0xD0	; 208
 276:	0e 94 a2 00 	call	0x144	; 0x144 <putchar_lcd>
 27a:	39 c0       	rjmp	.+114    	; 0x2ee <printnumber_lcd+0xec>
	}
	else if(a==0 && b==0){
		putchar_lcd(c+48);
 27c:	81 2f       	mov	r24, r17
 27e:	80 5d       	subi	r24, 0xD0	; 208
 280:	0e 94 a2 00 	call	0x144	; 0x144 <putchar_lcd>
		putchar_lcd(d+48);
 284:	8e 2d       	mov	r24, r14
 286:	80 5d       	subi	r24, 0xD0	; 208
 288:	0e 94 a2 00 	call	0x144	; 0x144 <putchar_lcd>
		putchar_lcd(e+48);
 28c:	8f 2d       	mov	r24, r15
 28e:	80 5d       	subi	r24, 0xD0	; 208
 290:	0e 94 a2 00 	call	0x144	; 0x144 <putchar_lcd>
 294:	2c c0       	rjmp	.+88     	; 0x2ee <printnumber_lcd+0xec>
	}
	else if(a==0){
		putchar_lcd(b+48);
 296:	80 2f       	mov	r24, r16
 298:	80 5d       	subi	r24, 0xD0	; 208
 29a:	0e 94 a2 00 	call	0x144	; 0x144 <putchar_lcd>
	    putchar_lcd(c+48);
 29e:	81 2f       	mov	r24, r17
 2a0:	80 5d       	subi	r24, 0xD0	; 208
 2a2:	0e 94 a2 00 	call	0x144	; 0x144 <putchar_lcd>
		putchar_lcd(d+48);
 2a6:	8e 2d       	mov	r24, r14
 2a8:	80 5d       	subi	r24, 0xD0	; 208
 2aa:	0e 94 a2 00 	call	0x144	; 0x144 <putchar_lcd>
		putchar_lcd(e+48);
 2ae:	8f 2d       	mov	r24, r15
 2b0:	80 5d       	subi	r24, 0xD0	; 208
 2b2:	0e 94 a2 00 	call	0x144	; 0x144 <putchar_lcd>
 2b6:	1b c0       	rjmp	.+54     	; 0x2ee <printnumber_lcd+0xec>
	}
	else if(a!=0 && b!=0 && c!=0 && d!=0){
 2b8:	30 97       	sbiw	r30, 0x00	; 0
 2ba:	c9 f0       	breq	.+50     	; 0x2ee <printnumber_lcd+0xec>
 2bc:	20 97       	sbiw	r28, 0x00	; 0
 2be:	b9 f0       	breq	.+46     	; 0x2ee <printnumber_lcd+0xec>
 2c0:	41 15       	cp	r20, r1
 2c2:	51 05       	cpc	r21, r1
 2c4:	a1 f0       	breq	.+40     	; 0x2ee <printnumber_lcd+0xec>
		putchar_lcd(a+48);
 2c6:	82 2f       	mov	r24, r18
 2c8:	80 5d       	subi	r24, 0xD0	; 208
 2ca:	0e 94 a2 00 	call	0x144	; 0x144 <putchar_lcd>
		putchar_lcd(b+48);
 2ce:	80 2f       	mov	r24, r16
 2d0:	80 5d       	subi	r24, 0xD0	; 208
 2d2:	0e 94 a2 00 	call	0x144	; 0x144 <putchar_lcd>
	    putchar_lcd(c+48);
 2d6:	81 2f       	mov	r24, r17
 2d8:	80 5d       	subi	r24, 0xD0	; 208
 2da:	0e 94 a2 00 	call	0x144	; 0x144 <putchar_lcd>
		putchar_lcd(d+48);
 2de:	8e 2d       	mov	r24, r14
 2e0:	80 5d       	subi	r24, 0xD0	; 208
 2e2:	0e 94 a2 00 	call	0x144	; 0x144 <putchar_lcd>
		putchar_lcd(e+48);
 2e6:	8f 2d       	mov	r24, r15
 2e8:	80 5d       	subi	r24, 0xD0	; 208
 2ea:	0e 94 a2 00 	call	0x144	; 0x144 <putchar_lcd>
	}
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	ff 90       	pop	r15
 2f8:	ef 90       	pop	r14
 2fa:	08 95       	ret

000002fc <putstr_lcd>:
void putstr_lcd(unsigned char *str, unsigned int lenght){
 2fc:	ef 92       	push	r14
 2fe:	ff 92       	push	r15
 300:	0f 93       	push	r16
 302:	1f 93       	push	r17
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	7b 01       	movw	r14, r22
	unsigned int i;
	for(i=0;i<lenght;i++){
 30a:	61 15       	cp	r22, r1
 30c:	71 05       	cpc	r23, r1
 30e:	99 f0       	breq	.+38     	; 0x336 <putstr_lcd+0x3a>
 310:	08 2f       	mov	r16, r24
 312:	19 2f       	mov	r17, r25
 314:	c0 e0       	ldi	r28, 0x00	; 0
 316:	d0 e0       	ldi	r29, 0x00	; 0
		if(*(str+i)>0){ 
 318:	f8 01       	movw	r30, r16
 31a:	81 91       	ld	r24, Z+
 31c:	8f 01       	movw	r16, r30
 31e:	88 23       	and	r24, r24
 320:	19 f0       	breq	.+6      	; 0x328 <putstr_lcd+0x2c>
			putchar_lcd(*(str+i));
 322:	0e 94 a2 00 	call	0x144	; 0x144 <putchar_lcd>
 326:	03 c0       	rjmp	.+6      	; 0x32e <putstr_lcd+0x32>
			}
		else putchar_lcd(0);	
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 a2 00 	call	0x144	; 0x144 <putchar_lcd>
		putchar_lcd(e+48);
	}
}
void putstr_lcd(unsigned char *str, unsigned int lenght){
	unsigned int i;
	for(i=0;i<lenght;i++){
 32e:	21 96       	adiw	r28, 0x01	; 1
 330:	ce 15       	cp	r28, r14
 332:	df 05       	cpc	r29, r15
 334:	88 f3       	brcs	.-30     	; 0x318 <putstr_lcd+0x1c>
		if(*(str+i)>0){ 
			putchar_lcd(*(str+i));
			}
		else putchar_lcd(0);	
}
}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	08 95       	ret

00000344 <main>:
#include <util/delay.h>


int main(void)
{
	init_lcd();
 344:	0e 94 7d 00 	call	0xfa	; 0xfa <init_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 348:	8f e4       	ldi	r24, 0x4F	; 79
 34a:	93 ec       	ldi	r25, 0xC3	; 195
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <main+0x8>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0xe>
 352:	00 00       	nop
	
	_delay_ms(50);
	cursor_home();
 354:	0e 94 aa 00 	call	0x154	; 0x154 <cursor_home>
	
	putchar_lcd("khanh");
 358:	80 e6       	ldi	r24, 0x60	; 96
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 a2 00 	call	0x144	; 0x144 <putchar_lcd>
 360:	ff cf       	rjmp	.-2      	; 0x360 <main+0x1c>

00000362 <__udivmodhi4>:
 362:	aa 1b       	sub	r26, r26
 364:	bb 1b       	sub	r27, r27
 366:	51 e1       	ldi	r21, 0x11	; 17
 368:	07 c0       	rjmp	.+14     	; 0x378 <__udivmodhi4_ep>

0000036a <__udivmodhi4_loop>:
 36a:	aa 1f       	adc	r26, r26
 36c:	bb 1f       	adc	r27, r27
 36e:	a6 17       	cp	r26, r22
 370:	b7 07       	cpc	r27, r23
 372:	10 f0       	brcs	.+4      	; 0x378 <__udivmodhi4_ep>
 374:	a6 1b       	sub	r26, r22
 376:	b7 0b       	sbc	r27, r23

00000378 <__udivmodhi4_ep>:
 378:	88 1f       	adc	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	5a 95       	dec	r21
 37e:	a9 f7       	brne	.-22     	; 0x36a <__udivmodhi4_loop>
 380:	80 95       	com	r24
 382:	90 95       	com	r25
 384:	bc 01       	movw	r22, r24
 386:	cd 01       	movw	r24, r26
 388:	08 95       	ret

0000038a <__divmodsi4>:
 38a:	97 fb       	bst	r25, 7
 38c:	09 2e       	mov	r0, r25
 38e:	05 26       	eor	r0, r21
 390:	0e d0       	rcall	.+28     	; 0x3ae <__divmodsi4_neg1>
 392:	57 fd       	sbrc	r21, 7
 394:	04 d0       	rcall	.+8      	; 0x39e <__divmodsi4_neg2>
 396:	14 d0       	rcall	.+40     	; 0x3c0 <__udivmodsi4>
 398:	0a d0       	rcall	.+20     	; 0x3ae <__divmodsi4_neg1>
 39a:	00 1c       	adc	r0, r0
 39c:	38 f4       	brcc	.+14     	; 0x3ac <__divmodsi4_exit>

0000039e <__divmodsi4_neg2>:
 39e:	50 95       	com	r21
 3a0:	40 95       	com	r20
 3a2:	30 95       	com	r19
 3a4:	21 95       	neg	r18
 3a6:	3f 4f       	sbci	r19, 0xFF	; 255
 3a8:	4f 4f       	sbci	r20, 0xFF	; 255
 3aa:	5f 4f       	sbci	r21, 0xFF	; 255

000003ac <__divmodsi4_exit>:
 3ac:	08 95       	ret

000003ae <__divmodsi4_neg1>:
 3ae:	f6 f7       	brtc	.-4      	; 0x3ac <__divmodsi4_exit>
 3b0:	90 95       	com	r25
 3b2:	80 95       	com	r24
 3b4:	70 95       	com	r23
 3b6:	61 95       	neg	r22
 3b8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ba:	8f 4f       	sbci	r24, 0xFF	; 255
 3bc:	9f 4f       	sbci	r25, 0xFF	; 255
 3be:	08 95       	ret

000003c0 <__udivmodsi4>:
 3c0:	a1 e2       	ldi	r26, 0x21	; 33
 3c2:	1a 2e       	mov	r1, r26
 3c4:	aa 1b       	sub	r26, r26
 3c6:	bb 1b       	sub	r27, r27
 3c8:	fd 01       	movw	r30, r26
 3ca:	0d c0       	rjmp	.+26     	; 0x3e6 <__udivmodsi4_ep>

000003cc <__udivmodsi4_loop>:
 3cc:	aa 1f       	adc	r26, r26
 3ce:	bb 1f       	adc	r27, r27
 3d0:	ee 1f       	adc	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	a2 17       	cp	r26, r18
 3d6:	b3 07       	cpc	r27, r19
 3d8:	e4 07       	cpc	r30, r20
 3da:	f5 07       	cpc	r31, r21
 3dc:	20 f0       	brcs	.+8      	; 0x3e6 <__udivmodsi4_ep>
 3de:	a2 1b       	sub	r26, r18
 3e0:	b3 0b       	sbc	r27, r19
 3e2:	e4 0b       	sbc	r30, r20
 3e4:	f5 0b       	sbc	r31, r21

000003e6 <__udivmodsi4_ep>:
 3e6:	66 1f       	adc	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	88 1f       	adc	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	1a 94       	dec	r1
 3f0:	69 f7       	brne	.-38     	; 0x3cc <__udivmodsi4_loop>
 3f2:	60 95       	com	r22
 3f4:	70 95       	com	r23
 3f6:	80 95       	com	r24
 3f8:	90 95       	com	r25
 3fa:	9b 01       	movw	r18, r22
 3fc:	ac 01       	movw	r20, r24
 3fe:	bd 01       	movw	r22, r26
 400:	cf 01       	movw	r24, r30
 402:	08 95       	ret

00000404 <_exit>:
 404:	f8 94       	cli

00000406 <__stop_program>:
 406:	ff cf       	rjmp	.-2      	; 0x406 <__stop_program>
