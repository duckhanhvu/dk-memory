
project 9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  00000aae  00000b42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  008000de  008000de  00000bc0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000227  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000008ad  00000000  00000000  000015a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003db  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b5e  00000000  00000000  0000222b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00002d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000289  00000000  00000000  00002eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000322  00000000  00000000  00003175  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000009b  00000000  00000000  00003497  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 86 03 	jmp	0x70c	; 0x70c <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 0a 03 	jmp	0x614	; 0x614 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 4b 03 	jmp	0x696	; 0x696 <__vector_18>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3d       	cpi	r26, 0xDE	; 222
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	ae ed       	ldi	r26, 0xDE	; 222
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 30       	cpi	r26, 0x09	; 9
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 32 02 	call	0x464	; 0x464 <main>
  8a:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KEY4x4_Ispush>:
return 0;
}
*/

unsigned char KEY4x4_Ispush(void){
if((bit_is_clear(control_pin,KEY4x4_COL1))|(bit_is_clear(control_pin,KEY4x4_COL2))|(bit_is_clear(control_pin,KEY4x4_COL3))|(bit_is_clear(control_pin,KEY4x4_COL4)))
  92:	69 b3       	in	r22, 0x19	; 25
  94:	59 b3       	in	r21, 0x19	; 25
  96:	39 b3       	in	r19, 0x19	; 25
  98:	29 b3       	in	r18, 0x19	; 25
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	36 ff       	sbrs	r19, 6
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <KEY4x4_Ispush+0x14>
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	33 27       	eor	r19, r19
  a8:	27 fd       	sbrc	r18, 7
  aa:	30 95       	com	r19
  ac:	20 95       	com	r18
  ae:	30 95       	com	r19
  b0:	22 27       	eor	r18, r18
  b2:	33 0f       	add	r19, r19
  b4:	22 1f       	adc	r18, r18
  b6:	33 27       	eor	r19, r19
  b8:	82 2b       	or	r24, r18
  ba:	93 2b       	or	r25, r19
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	64 fd       	sbrc	r22, 4
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	55 fd       	sbrc	r21, 5
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	42 2b       	or	r20, r18
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	9c 01       	movw	r18, r24
  ce:	24 2b       	or	r18, r20
  d0:	35 2b       	or	r19, r21
return 1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	21 15       	cp	r18, r1
  d6:	31 05       	cpc	r19, r1
  d8:	09 f4       	brne	.+2      	; 0xdc <KEY4x4_Ispush+0x4a>
  da:	80 e0       	ldi	r24, 0x00	; 0
else return 0;
}
  dc:	08 95       	ret

000000de <KEY4x4_checkROW>:
void KEY4x4_checkROW(unsigned char i){

setbit(control_port,KEY4x4_ROW1);
  de:	db 9a       	sbi	0x1b, 3	; 27
setbit(control_port,KEY4x4_ROW2);
  e0:	da 9a       	sbi	0x1b, 2	; 27
setbit(control_port,KEY4x4_ROW3);
  e2:	d9 9a       	sbi	0x1b, 1	; 27
setbit(control_port,KEY4x4_ROW4);
  e4:	d8 9a       	sbi	0x1b, 0	; 27
if(i==0){
  e6:	88 23       	and	r24, r24
  e8:	11 f4       	brne	.+4      	; 0xee <KEY4x4_checkROW+0x10>
    clearbit(control_port,KEY4x4_ROW1);
  ea:	db 98       	cbi	0x1b, 3	; 27
  ec:	08 c0       	rjmp	.+16     	; 0xfe <KEY4x4_checkROW+0x20>
}
if(i==1){
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	11 f4       	brne	.+4      	; 0xf6 <KEY4x4_checkROW+0x18>
    clearbit(control_port,KEY4x4_ROW2);
  f2:	da 98       	cbi	0x1b, 2	; 27
  f4:	08 95       	ret
}
if(i==2){
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	11 f4       	brne	.+4      	; 0xfe <KEY4x4_checkROW+0x20>
    clearbit(control_port,KEY4x4_ROW3);
  fa:	d9 98       	cbi	0x1b, 1	; 27
  fc:	08 95       	ret
}
if(i==3){
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	09 f4       	brne	.+2      	; 0x104 <KEY4x4_checkROW+0x26>
    clearbit(control_port,KEY4x4_ROW4);
 102:	d8 98       	cbi	0x1b, 0	; 27
 104:	08 95       	ret

00000106 <KEY4x4_Getkey>:
}   
}
unsigned char KEY4x4_Getkey(void){
 106:	1f 93       	push	r17
unsigned char i,button;
clearbit(control_port,KEY4x4_ROW1);
 108:	db 98       	cbi	0x1b, 3	; 27
clearbit(control_port,KEY4x4_ROW2);
 10a:	da 98       	cbi	0x1b, 2	; 27
clearbit(control_port,KEY4x4_ROW3);
 10c:	d9 98       	cbi	0x1b, 1	; 27
clearbit(control_port,KEY4x4_ROW4);
 10e:	d8 98       	cbi	0x1b, 0	; 27

if(KEY4x4_Ispush()){
 110:	0e 94 49 00 	call	0x92	; 0x92 <KEY4x4_Ispush>
 114:	88 23       	and	r24, r24
 116:	09 f4       	brne	.+2      	; 0x11a <KEY4x4_Getkey+0x14>
 118:	43 c0       	rjmp	.+134    	; 0x1a0 <KEY4x4_Getkey+0x9a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	81 ee       	ldi	r24, 0xE1	; 225
 11c:	94 e0       	ldi	r25, 0x04	; 4
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <KEY4x4_Getkey+0x18>
 122:	00 c0       	rjmp	.+0      	; 0x124 <KEY4x4_Getkey+0x1e>
 124:	00 00       	nop
_delay_ms(5);
if(KEY4x4_Ispush()){
 126:	0e 94 49 00 	call	0x92	; 0x92 <KEY4x4_Ispush>
 12a:	88 23       	and	r24, r24
 12c:	d9 f1       	breq	.+118    	; 0x1a4 <KEY4x4_Getkey+0x9e>
 12e:	10 e0       	ldi	r17, 0x00	; 0
for(i=0;i<4;i++){
KEY4x4_checkROW(i);
 130:	81 2f       	mov	r24, r17
 132:	0e 94 6f 00 	call	0xde	; 0xde <KEY4x4_checkROW>
if(bit_is_clear(control_pin,KEY4x4_COL1))  return KEY_4x4[i][0];
 136:	cc 99       	sbic	0x19, 4	; 25
 138:	0a c0       	rjmp	.+20     	; 0x14e <KEY4x4_Getkey+0x48>
 13a:	e1 2f       	mov	r30, r17
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	ee 0f       	add	r30, r30
 144:	ff 1f       	adc	r31, r31
 146:	e0 5a       	subi	r30, 0xA0	; 160
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	80 81       	ld	r24, Z
 14c:	2c c0       	rjmp	.+88     	; 0x1a6 <KEY4x4_Getkey+0xa0>
if(bit_is_clear(control_pin,KEY4x4_COL2))  return KEY_4x4[i][1];
 14e:	cd 99       	sbic	0x19, 5	; 25
 150:	0a c0       	rjmp	.+20     	; 0x166 <KEY4x4_Getkey+0x60>
 152:	e1 2f       	mov	r30, r17
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	ee 0f       	add	r30, r30
 15c:	ff 1f       	adc	r31, r31
 15e:	e0 5a       	subi	r30, 0xA0	; 160
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	81 81       	ldd	r24, Z+1	; 0x01
 164:	20 c0       	rjmp	.+64     	; 0x1a6 <KEY4x4_Getkey+0xa0>
if(bit_is_clear(control_pin,KEY4x4_COL3))  return KEY_4x4[i][2];
 166:	ce 99       	sbic	0x19, 6	; 25
 168:	0a c0       	rjmp	.+20     	; 0x17e <KEY4x4_Getkey+0x78>
 16a:	e1 2f       	mov	r30, r17
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	e0 5a       	subi	r30, 0xA0	; 160
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	82 81       	ldd	r24, Z+2	; 0x02
 17c:	14 c0       	rjmp	.+40     	; 0x1a6 <KEY4x4_Getkey+0xa0>
if(bit_is_clear(control_pin,KEY4x4_COL4))  return KEY_4x4[i][3];
 17e:	cf 99       	sbic	0x19, 7	; 25
 180:	0a c0       	rjmp	.+20     	; 0x196 <KEY4x4_Getkey+0x90>
 182:	e1 2f       	mov	r30, r17
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	ee 0f       	add	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	e0 5a       	subi	r30, 0xA0	; 160
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	83 81       	ldd	r24, Z+3	; 0x03
 194:	08 c0       	rjmp	.+16     	; 0x1a6 <KEY4x4_Getkey+0xa0>
clearbit(control_port,KEY4x4_ROW4);

if(KEY4x4_Ispush()){
_delay_ms(5);
if(KEY4x4_Ispush()){
for(i=0;i<4;i++){
 196:	1f 5f       	subi	r17, 0xFF	; 255
 198:	14 30       	cpi	r17, 0x04	; 4
 19a:	51 f6       	brne	.-108    	; 0x130 <KEY4x4_Getkey+0x2a>
if(bit_is_clear(control_pin,KEY4x4_COL3))  return KEY_4x4[i][2];
if(bit_is_clear(control_pin,KEY4x4_COL4))  return KEY_4x4[i][3];
}
}
}
return 0;
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <KEY4x4_Getkey+0xa0>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <KEY4x4_Getkey+0xa0>
 1a4:	80 e0       	ldi	r24, 0x00	; 0
}
 1a6:	1f 91       	pop	r17
 1a8:	08 95       	ret

000001aa <PID_control_speed>:
volatile long int Reality_speed;
volatile long int pulse, pre_pulse=0;
volatile long int error_PID, pre_error, P_PID, D_PID, I_PID=0, output_PID=0;
volatile long int kp=8, ki=1, kd=10;

void PID_control_speed(long int Titular_speed){
 1aa:	af 92       	push	r10
 1ac:	bf 92       	push	r11
 1ae:	cf 92       	push	r12
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	9b 01       	movw	r18, r22
 1bc:	ac 01       	movw	r20, r24
	Reality_speed = pulse - pre_pulse;
 1be:	e0 90 fc 00 	lds	r14, 0x00FC
 1c2:	f0 90 fd 00 	lds	r15, 0x00FD
 1c6:	00 91 fe 00 	lds	r16, 0x00FE
 1ca:	10 91 ff 00 	lds	r17, 0x00FF
 1ce:	60 91 e3 00 	lds	r22, 0x00E3
 1d2:	70 91 e4 00 	lds	r23, 0x00E4
 1d6:	80 91 e5 00 	lds	r24, 0x00E5
 1da:	90 91 e6 00 	lds	r25, 0x00E6
 1de:	57 01       	movw	r10, r14
 1e0:	68 01       	movw	r12, r16
 1e2:	a6 1a       	sub	r10, r22
 1e4:	b7 0a       	sbc	r11, r23
 1e6:	c8 0a       	sbc	r12, r24
 1e8:	d9 0a       	sbc	r13, r25
 1ea:	a0 92 ef 00 	sts	0x00EF, r10
 1ee:	b0 92 f0 00 	sts	0x00F0, r11
 1f2:	c0 92 f1 00 	sts	0x00F1, r12
 1f6:	d0 92 f2 00 	sts	0x00F2, r13
	pre_pulse=pulse;
 1fa:	80 91 fc 00 	lds	r24, 0x00FC
 1fe:	90 91 fd 00 	lds	r25, 0x00FD
 202:	a0 91 fe 00 	lds	r26, 0x00FE
 206:	b0 91 ff 00 	lds	r27, 0x00FF
 20a:	80 93 e3 00 	sts	0x00E3, r24
 20e:	90 93 e4 00 	sts	0x00E4, r25
 212:	a0 93 e5 00 	sts	0x00E5, r26
 216:	b0 93 e6 00 	sts	0x00E6, r27
	
	error_PID= Titular_speed- abs(Reality_speed);
 21a:	80 91 ef 00 	lds	r24, 0x00EF
 21e:	90 91 f0 00 	lds	r25, 0x00F0
 222:	a0 91 f1 00 	lds	r26, 0x00F1
 226:	b0 91 f2 00 	lds	r27, 0x00F2
 22a:	99 23       	and	r25, r25
 22c:	1c f4       	brge	.+6      	; 0x234 <PID_control_speed+0x8a>
 22e:	90 95       	com	r25
 230:	81 95       	neg	r24
 232:	9f 4f       	sbci	r25, 0xFF	; 255
 234:	aa 27       	eor	r26, r26
 236:	97 fd       	sbrc	r25, 7
 238:	a0 95       	com	r26
 23a:	ba 2f       	mov	r27, r26
 23c:	69 01       	movw	r12, r18
 23e:	7a 01       	movw	r14, r20
 240:	c8 1a       	sub	r12, r24
 242:	d9 0a       	sbc	r13, r25
 244:	ea 0a       	sbc	r14, r26
 246:	fb 0a       	sbc	r15, r27
 248:	c0 92 05 01 	sts	0x0105, r12
 24c:	d0 92 06 01 	sts	0x0106, r13
 250:	e0 92 07 01 	sts	0x0107, r14
 254:	f0 92 08 01 	sts	0x0108, r15
	
	//cac thanh phan PID
	P_PID=error_PID*kp;
 258:	20 91 05 01 	lds	r18, 0x0105
 25c:	30 91 06 01 	lds	r19, 0x0106
 260:	40 91 07 01 	lds	r20, 0x0107
 264:	50 91 08 01 	lds	r21, 0x0108
 268:	60 91 d2 00 	lds	r22, 0x00D2
 26c:	70 91 d3 00 	lds	r23, 0x00D3
 270:	80 91 d4 00 	lds	r24, 0x00D4
 274:	90 91 d5 00 	lds	r25, 0x00D5
 278:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsi3>
 27c:	60 93 01 01 	sts	0x0101, r22
 280:	70 93 02 01 	sts	0x0102, r23
 284:	80 93 03 01 	sts	0x0103, r24
 288:	90 93 04 01 	sts	0x0104, r25
	D_PID=(error_PID-pre_error)*40*kd;  
 28c:	e0 90 05 01 	lds	r14, 0x0105
 290:	f0 90 06 01 	lds	r15, 0x0106
 294:	00 91 07 01 	lds	r16, 0x0107
 298:	10 91 08 01 	lds	r17, 0x0108
 29c:	a0 90 f8 00 	lds	r10, 0x00F8
 2a0:	b0 90 f9 00 	lds	r11, 0x00F9
 2a4:	c0 90 fa 00 	lds	r12, 0x00FA
 2a8:	d0 90 fb 00 	lds	r13, 0x00FB
 2ac:	60 91 da 00 	lds	r22, 0x00DA
 2b0:	70 91 db 00 	lds	r23, 0x00DB
 2b4:	80 91 dc 00 	lds	r24, 0x00DC
 2b8:	90 91 dd 00 	lds	r25, 0x00DD
 2bc:	28 e2       	ldi	r18, 0x28	; 40
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	40 e0       	ldi	r20, 0x00	; 0
 2c2:	50 e0       	ldi	r21, 0x00	; 0
 2c4:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsi3>
 2c8:	a8 01       	movw	r20, r16
 2ca:	97 01       	movw	r18, r14
 2cc:	2a 19       	sub	r18, r10
 2ce:	3b 09       	sbc	r19, r11
 2d0:	4c 09       	sbc	r20, r12
 2d2:	5d 09       	sbc	r21, r13
 2d4:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsi3>
 2d8:	60 93 f3 00 	sts	0x00F3, r22
 2dc:	70 93 f4 00 	sts	0x00F4, r23
 2e0:	80 93 f5 00 	sts	0x00F5, r24
 2e4:	90 93 f6 00 	sts	0x00F6, r25
	I_PID+= (ki*error_PID*25)/1000;
 2e8:	60 91 d6 00 	lds	r22, 0x00D6
 2ec:	70 91 d7 00 	lds	r23, 0x00D7
 2f0:	80 91 d8 00 	lds	r24, 0x00D8
 2f4:	90 91 d9 00 	lds	r25, 0x00D9
 2f8:	20 91 05 01 	lds	r18, 0x0105
 2fc:	30 91 06 01 	lds	r19, 0x0106
 300:	40 91 07 01 	lds	r20, 0x0107
 304:	50 91 08 01 	lds	r21, 0x0108
 308:	e0 90 e7 00 	lds	r14, 0x00E7
 30c:	f0 90 e8 00 	lds	r15, 0x00E8
 310:	00 91 e9 00 	lds	r16, 0x00E9
 314:	10 91 ea 00 	lds	r17, 0x00EA
 318:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsi3>
 31c:	29 e1       	ldi	r18, 0x19	; 25
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	50 e0       	ldi	r21, 0x00	; 0
 324:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__mulsi3>
 328:	28 ee       	ldi	r18, 0xE8	; 232
 32a:	33 e0       	ldi	r19, 0x03	; 3
 32c:	40 e0       	ldi	r20, 0x00	; 0
 32e:	50 e0       	ldi	r21, 0x00	; 0
 330:	0e 94 18 05 	call	0xa30	; 0xa30 <__divmodsi4>
 334:	2e 0d       	add	r18, r14
 336:	3f 1d       	adc	r19, r15
 338:	40 1f       	adc	r20, r16
 33a:	51 1f       	adc	r21, r17
 33c:	20 93 e7 00 	sts	0x00E7, r18
 340:	30 93 e8 00 	sts	0x00E8, r19
 344:	40 93 e9 00 	sts	0x00E9, r20
 348:	50 93 ea 00 	sts	0x00EA, r21
	
	output_PID+= P_PID + D_PID + I_PID;
 34c:	20 91 01 01 	lds	r18, 0x0101
 350:	30 91 02 01 	lds	r19, 0x0102
 354:	40 91 03 01 	lds	r20, 0x0103
 358:	50 91 04 01 	lds	r21, 0x0104
 35c:	e0 90 f3 00 	lds	r14, 0x00F3
 360:	f0 90 f4 00 	lds	r15, 0x00F4
 364:	00 91 f5 00 	lds	r16, 0x00F5
 368:	10 91 f6 00 	lds	r17, 0x00F6
 36c:	80 91 e7 00 	lds	r24, 0x00E7
 370:	90 91 e8 00 	lds	r25, 0x00E8
 374:	a0 91 e9 00 	lds	r26, 0x00E9
 378:	b0 91 ea 00 	lds	r27, 0x00EA
 37c:	a0 90 eb 00 	lds	r10, 0x00EB
 380:	b0 90 ec 00 	lds	r11, 0x00EC
 384:	c0 90 ed 00 	lds	r12, 0x00ED
 388:	d0 90 ee 00 	lds	r13, 0x00EE
 38c:	2e 0d       	add	r18, r14
 38e:	3f 1d       	adc	r19, r15
 390:	40 1f       	adc	r20, r16
 392:	51 1f       	adc	r21, r17
 394:	82 0f       	add	r24, r18
 396:	93 1f       	adc	r25, r19
 398:	a4 1f       	adc	r26, r20
 39a:	b5 1f       	adc	r27, r21
 39c:	a8 0e       	add	r10, r24
 39e:	b9 1e       	adc	r11, r25
 3a0:	ca 1e       	adc	r12, r26
 3a2:	db 1e       	adc	r13, r27
 3a4:	a0 92 eb 00 	sts	0x00EB, r10
 3a8:	b0 92 ec 00 	sts	0x00EC, r11
 3ac:	c0 92 ed 00 	sts	0x00ED, r12
 3b0:	d0 92 ee 00 	sts	0x00EE, r13
	
	//dieu chinh dau ra PID phu hop voi PWM
	
	if(output_PID>=Time_period_PWM){
 3b4:	80 91 eb 00 	lds	r24, 0x00EB
 3b8:	90 91 ec 00 	lds	r25, 0x00EC
 3bc:	a0 91 ed 00 	lds	r26, 0x00ED
 3c0:	b0 91 ee 00 	lds	r27, 0x00EE
 3c4:	80 34       	cpi	r24, 0x40	; 64
 3c6:	0f e1       	ldi	r16, 0x1F	; 31
 3c8:	90 07       	cpc	r25, r16
 3ca:	00 e0       	ldi	r16, 0x00	; 0
 3cc:	a0 07       	cpc	r26, r16
 3ce:	00 e0       	ldi	r16, 0x00	; 0
 3d0:	b0 07       	cpc	r27, r16
 3d2:	64 f0       	brlt	.+24     	; 0x3ec <PID_control_speed+0x242>
	  output_PID= Time_period_PWM-1;
 3d4:	8f e3       	ldi	r24, 0x3F	; 63
 3d6:	9f e1       	ldi	r25, 0x1F	; 31
 3d8:	a0 e0       	ldi	r26, 0x00	; 0
 3da:	b0 e0       	ldi	r27, 0x00	; 0
 3dc:	80 93 eb 00 	sts	0x00EB, r24
 3e0:	90 93 ec 00 	sts	0x00EC, r25
 3e4:	a0 93 ed 00 	sts	0x00ED, r26
 3e8:	b0 93 ee 00 	sts	0x00EE, r27
	  }
	if(output_PID<=0){
 3ec:	80 91 eb 00 	lds	r24, 0x00EB
 3f0:	90 91 ec 00 	lds	r25, 0x00EC
 3f4:	a0 91 ed 00 	lds	r26, 0x00ED
 3f8:	b0 91 ee 00 	lds	r27, 0x00EE
 3fc:	18 16       	cp	r1, r24
 3fe:	19 06       	cpc	r1, r25
 400:	1a 06       	cpc	r1, r26
 402:	1b 06       	cpc	r1, r27
 404:	64 f0       	brlt	.+24     	; 0x41e <PID_control_speed+0x274>
	  output_PID=1;
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	a0 e0       	ldi	r26, 0x00	; 0
 40c:	b0 e0       	ldi	r27, 0x00	; 0
 40e:	80 93 eb 00 	sts	0x00EB, r24
 412:	90 93 ec 00 	sts	0x00EC, r25
 416:	a0 93 ed 00 	sts	0x00ED, r26
 41a:	b0 93 ee 00 	sts	0x00EE, r27
	  }
	
	// bam xung PWM cho output_PID
	
	OCR1A=output_PID;
 41e:	80 91 eb 00 	lds	r24, 0x00EB
 422:	90 91 ec 00 	lds	r25, 0x00EC
 426:	a0 91 ed 00 	lds	r26, 0x00ED
 42a:	b0 91 ee 00 	lds	r27, 0x00EE
 42e:	9b bd       	out	0x2b, r25	; 43
 430:	8a bd       	out	0x2a, r24	; 42
	pre_error=error_PID;
 432:	80 91 05 01 	lds	r24, 0x0105
 436:	90 91 06 01 	lds	r25, 0x0106
 43a:	a0 91 07 01 	lds	r26, 0x0107
 43e:	b0 91 08 01 	lds	r27, 0x0108
 442:	80 93 f8 00 	sts	0x00F8, r24
 446:	90 93 f9 00 	sts	0x00F9, r25
 44a:	a0 93 fa 00 	sts	0x00FA, r26
 44e:	b0 93 fb 00 	sts	0x00FB, r27
}
 452:	1f 91       	pop	r17
 454:	0f 91       	pop	r16
 456:	ff 90       	pop	r15
 458:	ef 90       	pop	r14
 45a:	df 90       	pop	r13
 45c:	cf 90       	pop	r12
 45e:	bf 90       	pop	r11
 460:	af 90       	pop	r10
 462:	08 95       	ret

00000464 <main>:

int main(void)
{
 464:	1f 93       	push	r17
	PORTB=0xFF;
 466:	8f ef       	ldi	r24, 0xFF	; 255
 468:	88 bb       	out	0x18, r24	; 24
	
	PORTA=0xFF;
 46a:	8b bb       	out	0x1b, r24	; 27
    DDRA=0x0F; 
 46c:	8f e0       	ldi	r24, 0x0F	; 15
 46e:	8a bb       	out	0x1a, r24	; 26
	
	MOTOR_DDR=0xF0;
 470:	80 ef       	ldi	r24, 0xF0	; 240
 472:	81 bb       	out	0x11, r24	; 17
	setbit(MOTOR_PORT,MOTOR_DIR);
 474:	96 9a       	sbi	0x12, 6	; 18
	
	//khoi tao ngat ngoai tren chan INT2
	MCUCSR=(0<<ISC2);
 476:	14 be       	out	0x34, r1	; 52
	GICR=(1<<INT2);
 478:	80 e2       	ldi	r24, 0x20	; 32
 47a:	8b bf       	out	0x3b, r24	; 59
	
	//tao bo dinh thoi gian 25ms bang timer 0
	TCCR0=(1<<CS02)|(1<<CS00);//|(1<<CS20);
 47c:	85 e0       	ldi	r24, 0x05	; 5
 47e:	83 bf       	out	0x33, r24	; 51
	TCNT0=60;
 480:	8c e3       	ldi	r24, 0x3C	; 60
 482:	82 bf       	out	0x32, r24	; 50
	TIMSK=(1<<TOIE0);
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	89 bf       	out	0x39, r24	; 57
	
	//tao bo PWM tren timer 1, mode 14, fast PwM 
	TCCR1A=(1<<COM1A1)|(1<<WGM11);
 488:	82 e8       	ldi	r24, 0x82	; 130
 48a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(1<<WGM13)|(1<<WGM12)|(1<<CS10);
 48c:	89 e1       	ldi	r24, 0x19	; 25
 48e:	8e bd       	out	0x2e, r24	; 46
	
	
	TCCR2=0;
 490:	15 bc       	out	0x25, r1	; 37
	TIMSK|=(1<<TOIE2);
 492:	89 b7       	in	r24, 0x39	; 57
 494:	80 64       	ori	r24, 0x40	; 64
 496:	89 bf       	out	0x39, r24	; 57

	
	
	init_lcd();
 498:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <init_lcd>
	movecursor(1,1);
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	61 e0       	ldi	r22, 0x01	; 1
 4a0:	0e 94 22 04 	call	0x844	; 0x844 <movecursor>
	putstr_lcd("DUC KHANH",9);
 4a4:	80 e7       	ldi	r24, 0x70	; 112
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	69 e0       	ldi	r22, 0x09	; 9
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	0e 94 c1 04 	call	0x982	; 0x982 <putstr_lcd>
	movecursor(2,1);
 4b0:	82 e0       	ldi	r24, 0x02	; 2
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	0e 94 22 04 	call	0x844	; 0x844 <movecursor>
	putstr_lcd("28-4-2016",9);
 4b8:	8a e7       	ldi	r24, 0x7A	; 122
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	69 e0       	ldi	r22, 0x09	; 9
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	0e 94 c1 04 	call	0x982	; 0x982 <putstr_lcd>
 4c4:	8f e7       	ldi	r24, 0x7F	; 127
 4c6:	94 e8       	ldi	r25, 0x84	; 132
 4c8:	ae e1       	ldi	r26, 0x1E	; 30
 4ca:	81 50       	subi	r24, 0x01	; 1
 4cc:	90 40       	sbci	r25, 0x00	; 0
 4ce:	a0 40       	sbci	r26, 0x00	; 0
 4d0:	e1 f7       	brne	.-8      	; 0x4ca <main+0x66>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <main+0x70>
 4d4:	00 00       	nop
	_delay_ms(10000);
	clear_lcd();
 4d6:	0e 94 1b 04 	call	0x836	; 0x836 <clear_lcd>
	movecursor(1,1);
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	0e 94 22 04 	call	0x844	; 0x844 <movecursor>
    putstr_lcd("set van toc:",12);
 4e2:	84 e8       	ldi	r24, 0x84	; 132
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	6c e0       	ldi	r22, 0x0C	; 12
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	0e 94 c1 04 	call	0x982	; 0x982 <putstr_lcd>
	movecursor(2,4);
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	64 e0       	ldi	r22, 0x04	; 4
 4f2:	0e 94 22 04 	call	0x844	; 0x844 <movecursor>
	movecursor(1,1);
	putstr_lcd("vset:      /25ms",16);
	movecursor(2,1);
	putstr_lcd("vthuc:     /25ms",16);
	*/
	OCR1A=1;
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	9b bd       	out	0x2b, r25	; 43
 4fc:	8a bd       	out	0x2a, r24	; 42
	ICR1=Time_period_PWM;
 4fe:	80 e4       	ldi	r24, 0x40	; 64
 500:	9f e1       	ldi	r25, 0x1F	; 31
 502:	97 bd       	out	0x27, r25	; 39
 504:	86 bd       	out	0x26, r24	; 38
	
	//setbit(MOTOR_PORT,MOTOR_EN);
	sei();
 506:	78 94       	sei
		}*/
	   key =KEY4x4_Getkey();
	   
	   if(key){
		   TCNT2=0;
		   TCCR2=(1<<CS22);
 508:	14 e0       	ldi	r17, 0x04	; 4
			printnumber_lcd(control_speed);
			movecursor(2,7);
			printnumber_lcd(Reality_speed);
			count=0;
		}*/
	   key =KEY4x4_Getkey();
 50a:	0e 94 83 00 	call	0x106	; 0x106 <KEY4x4_Getkey>
 50e:	80 93 00 01 	sts	0x0100, r24
	   
	   if(key){
 512:	80 91 00 01 	lds	r24, 0x0100
 516:	88 23       	and	r24, r24
 518:	31 f0       	breq	.+12     	; 0x526 <main+0xc2>
		   TCNT2=0;
 51a:	14 bc       	out	0x24, r1	; 36
		   TCCR2=(1<<CS22);
 51c:	15 bd       	out	0x25, r17	; 37
		   k=key;
 51e:	80 91 00 01 	lds	r24, 0x0100
 522:	80 93 f7 00 	sts	0x00F7, r24
	   }
	   if(bit_is_clear(PINB,3)){
 526:	b3 99       	sbic	0x16, 3	; 22
 528:	f0 cf       	rjmp	.-32     	; 0x50a <main+0xa6>
		   break;
	   }
        
    }
	  clear_lcd();
 52a:	0e 94 1b 04 	call	0x836	; 0x836 <clear_lcd>
	  movecursor(1,1);
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	61 e0       	ldi	r22, 0x01	; 1
 532:	0e 94 22 04 	call	0x844	; 0x844 <movecursor>
	  putstr_lcd("da nhap du lieu",15);
 536:	81 e9       	ldi	r24, 0x91	; 145
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	6f e0       	ldi	r22, 0x0F	; 15
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	0e 94 c1 04 	call	0x982	; 0x982 <putstr_lcd>
	  movecursor(2,4);
 542:	82 e0       	ldi	r24, 0x02	; 2
 544:	64 e0       	ldi	r22, 0x04	; 4
 546:	0e 94 22 04 	call	0x844	; 0x844 <movecursor>
	  putstr_lcd("thanh cong",10);
 54a:	81 ea       	ldi	r24, 0xA1	; 161
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	6a e0       	ldi	r22, 0x0A	; 10
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	0e 94 c1 04 	call	0x982	; 0x982 <putstr_lcd>
 556:	8f ef       	ldi	r24, 0xFF	; 255
 558:	98 e0       	ldi	r25, 0x08	; 8
 55a:	ad e3       	ldi	r26, 0x3D	; 61
 55c:	81 50       	subi	r24, 0x01	; 1
 55e:	90 40       	sbci	r25, 0x00	; 0
 560:	a0 40       	sbci	r26, 0x00	; 0
 562:	e1 f7       	brne	.-8      	; 0x55c <main+0xf8>
 564:	00 c0       	rjmp	.+0      	; 0x566 <main+0x102>
 566:	00 00       	nop
	  _delay_ms(20000);
	  clear_lcd();
 568:	0e 94 1b 04 	call	0x836	; 0x836 <clear_lcd>

	  
	  movecursor(1,1);
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	61 e0       	ldi	r22, 0x01	; 1
 570:	0e 94 22 04 	call	0x844	; 0x844 <movecursor>
	  putstr_lcd("vset:      /25ms",16);
 574:	8c ea       	ldi	r24, 0xAC	; 172
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	60 e1       	ldi	r22, 0x10	; 16
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	0e 94 c1 04 	call	0x982	; 0x982 <putstr_lcd>
	  movecursor(2,1);
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	0e 94 22 04 	call	0x844	; 0x844 <movecursor>
	  putstr_lcd("vthuc:     /25ms",16);
 588:	8d eb       	ldi	r24, 0xBD	; 189
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	60 e1       	ldi	r22, 0x10	; 16
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	0e 94 c1 04 	call	0x982	; 0x982 <putstr_lcd>
	  setbit(MOTOR_PORT,MOTOR_EN);
 594:	97 9a       	sbi	0x12, 7	; 18
	  while(1){
		  	if(count>=10){
 596:	80 91 df 00 	lds	r24, 0x00DF
 59a:	90 91 e0 00 	lds	r25, 0x00E0
 59e:	a0 91 e1 00 	lds	r26, 0x00E1
 5a2:	b0 91 e2 00 	lds	r27, 0x00E2
 5a6:	8a 30       	cpi	r24, 0x0A	; 10
 5a8:	91 05       	cpc	r25, r1
 5aa:	a1 05       	cpc	r26, r1
 5ac:	b1 05       	cpc	r27, r1
 5ae:	9c f3       	brlt	.-26     	; 0x596 <main+0x132>

			control_speed=x;
 5b0:	80 91 de 00 	lds	r24, 0x00DE
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	a0 e0       	ldi	r26, 0x00	; 0
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	80 93 ce 00 	sts	0x00CE, r24
 5be:	90 93 cf 00 	sts	0x00CF, r25
 5c2:	a0 93 d0 00 	sts	0x00D0, r26
 5c6:	b0 93 d1 00 	sts	0x00D1, r27
			movecursor(1,6);
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	66 e0       	ldi	r22, 0x06	; 6
 5ce:	0e 94 22 04 	call	0x844	; 0x844 <movecursor>
			printnumber_lcd(control_speed);
 5d2:	80 91 ce 00 	lds	r24, 0x00CE
 5d6:	90 91 cf 00 	lds	r25, 0x00CF
 5da:	a0 91 d0 00 	lds	r26, 0x00D0
 5de:	b0 91 d1 00 	lds	r27, 0x00D1
 5e2:	0e 94 44 04 	call	0x888	; 0x888 <printnumber_lcd>
			movecursor(2,7);
 5e6:	82 e0       	ldi	r24, 0x02	; 2
 5e8:	67 e0       	ldi	r22, 0x07	; 7
 5ea:	0e 94 22 04 	call	0x844	; 0x844 <movecursor>
			printnumber_lcd(Reality_speed);
 5ee:	80 91 ef 00 	lds	r24, 0x00EF
 5f2:	90 91 f0 00 	lds	r25, 0x00F0
 5f6:	a0 91 f1 00 	lds	r26, 0x00F1
 5fa:	b0 91 f2 00 	lds	r27, 0x00F2
 5fe:	0e 94 44 04 	call	0x888	; 0x888 <printnumber_lcd>
			count=0;
 602:	10 92 df 00 	sts	0x00DF, r1
 606:	10 92 e0 00 	sts	0x00E0, r1
 60a:	10 92 e1 00 	sts	0x00E1, r1
 60e:	10 92 e2 00 	sts	0x00E2, r1
 612:	c1 cf       	rjmp	.-126    	; 0x596 <main+0x132>

00000614 <__vector_9>:
	  }
}
	}
ISR(TIMER0_OVF_vect){
 614:	1f 92       	push	r1
 616:	0f 92       	push	r0
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	0f 92       	push	r0
 61c:	11 24       	eor	r1, r1
 61e:	2f 93       	push	r18
 620:	3f 93       	push	r19
 622:	4f 93       	push	r20
 624:	5f 93       	push	r21
 626:	6f 93       	push	r22
 628:	7f 93       	push	r23
 62a:	8f 93       	push	r24
 62c:	9f 93       	push	r25
 62e:	af 93       	push	r26
 630:	bf 93       	push	r27
 632:	ef 93       	push	r30
 634:	ff 93       	push	r31
	TCNT2=60;
 636:	8c e3       	ldi	r24, 0x3C	; 60
 638:	84 bd       	out	0x24, r24	; 36
	PID_control_speed(control_speed);
 63a:	60 91 ce 00 	lds	r22, 0x00CE
 63e:	70 91 cf 00 	lds	r23, 0x00CF
 642:	80 91 d0 00 	lds	r24, 0x00D0
 646:	90 91 d1 00 	lds	r25, 0x00D1
 64a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <PID_control_speed>
	count++;
 64e:	80 91 df 00 	lds	r24, 0x00DF
 652:	90 91 e0 00 	lds	r25, 0x00E0
 656:	a0 91 e1 00 	lds	r26, 0x00E1
 65a:	b0 91 e2 00 	lds	r27, 0x00E2
 65e:	01 96       	adiw	r24, 0x01	; 1
 660:	a1 1d       	adc	r26, r1
 662:	b1 1d       	adc	r27, r1
 664:	80 93 df 00 	sts	0x00DF, r24
 668:	90 93 e0 00 	sts	0x00E0, r25
 66c:	a0 93 e1 00 	sts	0x00E1, r26
 670:	b0 93 e2 00 	sts	0x00E2, r27
}
 674:	ff 91       	pop	r31
 676:	ef 91       	pop	r30
 678:	bf 91       	pop	r27
 67a:	af 91       	pop	r26
 67c:	9f 91       	pop	r25
 67e:	8f 91       	pop	r24
 680:	7f 91       	pop	r23
 682:	6f 91       	pop	r22
 684:	5f 91       	pop	r21
 686:	4f 91       	pop	r20
 688:	3f 91       	pop	r19
 68a:	2f 91       	pop	r18
 68c:	0f 90       	pop	r0
 68e:	0f be       	out	0x3f, r0	; 63
 690:	0f 90       	pop	r0
 692:	1f 90       	pop	r1
 694:	18 95       	reti

00000696 <__vector_18>:
ISR(INT2_vect){
 696:	1f 92       	push	r1
 698:	0f 92       	push	r0
 69a:	0f b6       	in	r0, 0x3f	; 63
 69c:	0f 92       	push	r0
 69e:	11 24       	eor	r1, r1
 6a0:	8f 93       	push	r24
 6a2:	9f 93       	push	r25
 6a4:	af 93       	push	r26
 6a6:	bf 93       	push	r27
	if(bit_is_set(PORTB,0)) pulse++;
 6a8:	c0 9b       	sbis	0x18, 0	; 24
 6aa:	14 c0       	rjmp	.+40     	; 0x6d4 <__vector_18+0x3e>
 6ac:	80 91 fc 00 	lds	r24, 0x00FC
 6b0:	90 91 fd 00 	lds	r25, 0x00FD
 6b4:	a0 91 fe 00 	lds	r26, 0x00FE
 6b8:	b0 91 ff 00 	lds	r27, 0x00FF
 6bc:	01 96       	adiw	r24, 0x01	; 1
 6be:	a1 1d       	adc	r26, r1
 6c0:	b1 1d       	adc	r27, r1
 6c2:	80 93 fc 00 	sts	0x00FC, r24
 6c6:	90 93 fd 00 	sts	0x00FD, r25
 6ca:	a0 93 fe 00 	sts	0x00FE, r26
 6ce:	b0 93 ff 00 	sts	0x00FF, r27
 6d2:	13 c0       	rjmp	.+38     	; 0x6fa <__vector_18+0x64>
	else pulse--;	
 6d4:	80 91 fc 00 	lds	r24, 0x00FC
 6d8:	90 91 fd 00 	lds	r25, 0x00FD
 6dc:	a0 91 fe 00 	lds	r26, 0x00FE
 6e0:	b0 91 ff 00 	lds	r27, 0x00FF
 6e4:	01 97       	sbiw	r24, 0x01	; 1
 6e6:	a1 09       	sbc	r26, r1
 6e8:	b1 09       	sbc	r27, r1
 6ea:	80 93 fc 00 	sts	0x00FC, r24
 6ee:	90 93 fd 00 	sts	0x00FD, r25
 6f2:	a0 93 fe 00 	sts	0x00FE, r26
 6f6:	b0 93 ff 00 	sts	0x00FF, r27
}
 6fa:	bf 91       	pop	r27
 6fc:	af 91       	pop	r26
 6fe:	9f 91       	pop	r25
 700:	8f 91       	pop	r24
 702:	0f 90       	pop	r0
 704:	0f be       	out	0x3f, r0	; 63
 706:	0f 90       	pop	r0
 708:	1f 90       	pop	r1
 70a:	18 95       	reti

0000070c <__vector_4>:
ISR(TIMER2_OVF_vect){
 70c:	1f 92       	push	r1
 70e:	0f 92       	push	r0
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	0f 92       	push	r0
 714:	11 24       	eor	r1, r1
 716:	2f 93       	push	r18
 718:	3f 93       	push	r19
 71a:	4f 93       	push	r20
 71c:	5f 93       	push	r21
 71e:	6f 93       	push	r22
 720:	7f 93       	push	r23
 722:	8f 93       	push	r24
 724:	9f 93       	push	r25
 726:	af 93       	push	r26
 728:	bf 93       	push	r27
 72a:	ef 93       	push	r30
 72c:	ff 93       	push	r31
	printnumber_lcd(k);
 72e:	80 91 f7 00 	lds	r24, 0x00F7
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 44 04 	call	0x888	; 0x888 <printnumber_lcd>
	x=x*10+k;
 738:	80 91 de 00 	lds	r24, 0x00DE
 73c:	90 91 f7 00 	lds	r25, 0x00F7
 740:	88 0f       	add	r24, r24
 742:	28 2f       	mov	r18, r24
 744:	22 0f       	add	r18, r18
 746:	22 0f       	add	r18, r18
 748:	82 0f       	add	r24, r18
 74a:	89 0f       	add	r24, r25
 74c:	80 93 de 00 	sts	0x00DE, r24
	TCNT2=0;
 750:	14 bc       	out	0x24, r1	; 36
	TCCR2=0;
 752:	15 bc       	out	0x25, r1	; 37
	
 754:	ff 91       	pop	r31
 756:	ef 91       	pop	r30
 758:	bf 91       	pop	r27
 75a:	af 91       	pop	r26
 75c:	9f 91       	pop	r25
 75e:	8f 91       	pop	r24
 760:	7f 91       	pop	r23
 762:	6f 91       	pop	r22
 764:	5f 91       	pop	r21
 766:	4f 91       	pop	r20
 768:	3f 91       	pop	r19
 76a:	2f 91       	pop	r18
 76c:	0f 90       	pop	r0
 76e:	0f be       	out	0x3f, r0	; 63
 770:	0f 90       	pop	r0
 772:	1f 90       	pop	r1
 774:	18 95       	reti

00000776 <read_2Nib>:


char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
 776:	aa 9a       	sbi	0x15, 2	; 21
	DDR_DATA=0x0F;
 778:	8f e0       	ldi	r24, 0x0F	; 15
 77a:	84 bb       	out	0x14, r24	; 20
	HNib=DATA_input&0xF0;
 77c:	83 b3       	in	r24, 0x13	; 19
	clearbit(CTRL,EN);
 77e:	aa 98       	cbi	0x15, 2	; 21
	
	setbit(CTRL,EN);
 780:	aa 9a       	sbi	0x15, 2	; 21
	LNib=DATA_input&0xF0;
 782:	93 b3       	in	r25, 0x13	; 19
	clearbit(CTRL,EN);
 784:	aa 98       	cbi	0x15, 2	; 21
	LNib>>=4;
 786:	92 95       	swap	r25
 788:	9f 70       	andi	r25, 0x0F	; 15
char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
	DDR_DATA=0x0F;
	HNib=DATA_input&0xF0;
 78a:	80 7f       	andi	r24, 0xF0	; 240
	LNib=DATA_input&0xF0;
	clearbit(CTRL,EN);
	LNib>>=4;
	
	return (HNib|LNib);
}
 78c:	89 2b       	or	r24, r25
 78e:	08 95       	ret

00000790 <write_2Nib>:
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
 790:	95 b3       	in	r25, 0x15	; 21
 792:	9f 70       	andi	r25, 0x0F	; 15
	HNib=data&0xF0;
 794:	28 2f       	mov	r18, r24
 796:	20 7f       	andi	r18, 0xF0	; 240
	LNib=(data<<4)&0xF0;
	
	DATA_output=HNib|temp;
 798:	29 2b       	or	r18, r25
 79a:	25 bb       	out	0x15, r18	; 21
	setbit(CTRL,EN);
 79c:	aa 9a       	sbi	0x15, 2	; 21
	clearbit(CTRL,EN);
 79e:	aa 98       	cbi	0x15, 2	; 21
}
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
	HNib=data&0xF0;
	LNib=(data<<4)&0xF0;
 7a0:	82 95       	swap	r24
 7a2:	80 7f       	andi	r24, 0xF0	; 240
	
	DATA_output=HNib|temp;
	setbit(CTRL,EN);
	clearbit(CTRL,EN);
	
	DATA_output=LNib|temp;
 7a4:	98 2b       	or	r25, r24
 7a6:	95 bb       	out	0x15, r25	; 21
	setbit(CTRL,EN);
 7a8:	aa 9a       	sbi	0x15, 2	; 21
	clearbit(CTRL,EN);
 7aa:	aa 98       	cbi	0x15, 2	; 21
	
}
 7ac:	08 95       	ret

000007ae <wait_lcd>:
void wait_lcd(void){
 7ae:	0f 93       	push	r16
 7b0:	1f 93       	push	r17
 7b2:	df 93       	push	r29
 7b4:	cf 93       	push	r28
 7b6:	0f 92       	push	r0
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
	while(1){
     	clearbit(CTRL,RS);
		setbit(CTRL,RW);
		temp=read_2Nib();
		
		if(bit_is_clear(temp,7)) break;
 7bc:	8e 01       	movw	r16, r28
 7be:	0f 5f       	subi	r16, 0xFF	; 255
 7c0:	1f 4f       	sbci	r17, 0xFF	; 255
}
void wait_lcd(void){
	unsigned char temp;
	
	while(1){
     	clearbit(CTRL,RS);
 7c2:	a8 98       	cbi	0x15, 0	; 21
		setbit(CTRL,RW);
 7c4:	a9 9a       	sbi	0x15, 1	; 21
		temp=read_2Nib();
 7c6:	0e 94 bb 03 	call	0x776	; 0x776 <read_2Nib>
 7ca:	89 83       	std	Y+1, r24	; 0x01
		
		if(bit_is_clear(temp,7)) break;
 7cc:	f8 01       	movw	r30, r16
 7ce:	80 81       	ld	r24, Z
 7d0:	88 23       	and	r24, r24
 7d2:	bc f3       	brlt	.-18     	; 0x7c2 <wait_lcd+0x14>
	}
	clearbit(CTRL,RW);
 7d4:	a9 98       	cbi	0x15, 1	; 21
	DDR_DATA=0xFF;
 7d6:	8f ef       	ldi	r24, 0xFF	; 255
 7d8:	84 bb       	out	0x14, r24	; 20
	
}
 7da:	0f 90       	pop	r0
 7dc:	cf 91       	pop	r28
 7de:	df 91       	pop	r29
 7e0:	1f 91       	pop	r17
 7e2:	0f 91       	pop	r16
 7e4:	08 95       	ret

000007e6 <init_lcd>:

void init_lcd(){//uses mode 4 bit
	DDR_CTRL=0xFF;
 7e6:	8f ef       	ldi	r24, 0xFF	; 255
 7e8:	84 bb       	out	0x14, r24	; 20
	DDR_DATA=0xFF;
 7ea:	84 bb       	out	0x14, r24	; 20
	clearbit(CTRL,RS);
 7ec:	a8 98       	cbi	0x15, 0	; 21
	clearbit(CTRL,RW);
 7ee:	a9 98       	cbi	0x15, 1	; 21
	clearbit(CTRL,EN);
 7f0:	aa 98       	cbi	0x15, 2	; 21
	
//function set	
	setbit(CTRL,EN);
 7f2:	aa 9a       	sbi	0x15, 2	; 21
	setbit(DATA_output,5);
 7f4:	ad 9a       	sbi	0x15, 5	; 21
	clearbit(CTRL,EN);
 7f6:	aa 98       	cbi	0x15, 2	; 21
	wait_lcd();
 7f8:	0e 94 d7 03 	call	0x7ae	; 0x7ae <wait_lcd>
	write_2Nib(0x28);
 7fc:	88 e2       	ldi	r24, 0x28	; 40
 7fe:	0e 94 c8 03 	call	0x790	; 0x790 <write_2Nib>
	wait_lcd();
 802:	0e 94 d7 03 	call	0x7ae	; 0x7ae <wait_lcd>
//display on/off control
    write_2Nib(0x0E);
 806:	8e e0       	ldi	r24, 0x0E	; 14
 808:	0e 94 c8 03 	call	0x790	; 0x790 <write_2Nib>
	wait_lcd();
 80c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <wait_lcd>

//entry mode set 
    
    write_2Nib(0x06);
 810:	86 e0       	ldi	r24, 0x06	; 6
 812:	0e 94 c8 03 	call	0x790	; 0x790 <write_2Nib>
    wait_lcd();		
 816:	0e 94 d7 03 	call	0x7ae	; 0x7ae <wait_lcd>
}
 81a:	08 95       	ret

0000081c <putchar_lcd>:
void putchar_lcd(unsigned char data){
	
	setbit(CTRL,RS);
 81c:	a8 9a       	sbi	0x15, 0	; 21
	write_2Nib(data);
 81e:	0e 94 c8 03 	call	0x790	; 0x790 <write_2Nib>
	wait_lcd();
 822:	0e 94 d7 03 	call	0x7ae	; 0x7ae <wait_lcd>
}
 826:	08 95       	ret

00000828 <cursor_home>:
void cursor_home(){
	clearbit(CTRL,RS);
 828:	a8 98       	cbi	0x15, 0	; 21
	write_2Nib(0x03);
 82a:	83 e0       	ldi	r24, 0x03	; 3
 82c:	0e 94 c8 03 	call	0x790	; 0x790 <write_2Nib>
	wait_lcd();
 830:	0e 94 d7 03 	call	0x7ae	; 0x7ae <wait_lcd>
}
 834:	08 95       	ret

00000836 <clear_lcd>:
void clear_lcd(){
	clearbit(CTRL,RS);
 836:	a8 98       	cbi	0x15, 0	; 21
	write_2Nib(0x01);
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	0e 94 c8 03 	call	0x790	; 0x790 <write_2Nib>
	wait_lcd();
 83e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <wait_lcd>
}
 842:	08 95       	ret

00000844 <movecursor>:
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
	clearbit(CTRL,RS);
 844:	a8 98       	cbi	0x15, 0	; 21
	write_2Nib(0x01);
	wait_lcd();
}
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
 846:	82 95       	swap	r24
 848:	88 0f       	add	r24, r24
 84a:	88 0f       	add	r24, r24
 84c:	80 7c       	andi	r24, 0xC0	; 192
 84e:	86 0f       	add	r24, r22
	clearbit(CTRL,RS);
	write_2Nib(x);
 850:	81 5c       	subi	r24, 0xC1	; 193
 852:	0e 94 c8 03 	call	0x790	; 0x790 <write_2Nib>
	wait_lcd();
 856:	0e 94 d7 03 	call	0x7ae	; 0x7ae <wait_lcd>
}
 85a:	08 95       	ret

0000085c <count_number>:
int count_number(unsigned int number){
 85c:	bc 01       	movw	r22, r24
	int dem=0;
	if(number!=0) {
 85e:	00 97       	sbiw	r24, 0x00	; 0
 860:	71 f0       	breq	.+28     	; 0x87e <count_number+0x22>
 862:	20 e0       	ldi	r18, 0x00	; 0
 864:	30 e0       	ldi	r19, 0x00	; 0
	   while(number){
		number=number/10;
 866:	ea e0       	ldi	r30, 0x0A	; 10
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	cb 01       	movw	r24, r22
 86c:	bf 01       	movw	r22, r30
 86e:	0e 94 04 05 	call	0xa08	; 0xa08 <__udivmodhi4>
		dem++;
 872:	2f 5f       	subi	r18, 0xFF	; 255
 874:	3f 4f       	sbci	r19, 0xFF	; 255
	wait_lcd();
}
int count_number(unsigned int number){
	int dem=0;
	if(number!=0) {
	   while(number){
 876:	61 15       	cp	r22, r1
 878:	71 05       	cpc	r23, r1
 87a:	b9 f7       	brne	.-18     	; 0x86a <count_number+0xe>
 87c:	02 c0       	rjmp	.+4      	; 0x882 <count_number+0x26>
		number=number/10;
		dem++;
	}	
    } 
	else dem=dem+1; 
 87e:	21 e0       	ldi	r18, 0x01	; 1
 880:	30 e0       	ldi	r19, 0x00	; 0
	return dem;
	}
 882:	82 2f       	mov	r24, r18
 884:	93 2f       	mov	r25, r19
 886:	08 95       	ret

00000888 <printnumber_lcd>:
void printnumber_lcd(unsigned int number){
 888:	ef 92       	push	r14
 88a:	ff 92       	push	r15
 88c:	0f 93       	push	r16
 88e:	1f 93       	push	r17
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
	putchar_lcd(a+48);
	b=number%10;
	putchar_lcd(b+48);
	*/
		int a,b,c,d,e;
	    a=number/10000;
 894:	60 e1       	ldi	r22, 0x10	; 16
 896:	77 e2       	ldi	r23, 0x27	; 39
 898:	0e 94 04 05 	call	0xa08	; 0xa08 <__udivmodhi4>
 89c:	9b 01       	movw	r18, r22
	    //putchar_lcd(a+48);
		number=number%10000;
	    b=number/1000;
 89e:	68 ee       	ldi	r22, 0xE8	; 232
 8a0:	73 e0       	ldi	r23, 0x03	; 3
 8a2:	0e 94 04 05 	call	0xa08	; 0xa08 <__udivmodhi4>
 8a6:	06 2f       	mov	r16, r22
 8a8:	e6 2f       	mov	r30, r22
 8aa:	f7 2f       	mov	r31, r23
	    //putchar_lcd(b+48);
	    number=number%1000;
	    c=number/100;
 8ac:	64 e6       	ldi	r22, 0x64	; 100
 8ae:	70 e0       	ldi	r23, 0x00	; 0
 8b0:	0e 94 04 05 	call	0xa08	; 0xa08 <__udivmodhi4>
 8b4:	16 2f       	mov	r17, r22
 8b6:	e6 2e       	mov	r14, r22
 8b8:	e7 01       	movw	r28, r14
 8ba:	7e 01       	movw	r14, r28
 8bc:	f7 2e       	mov	r15, r23
 8be:	e7 01       	movw	r28, r14
	    //putchar_lcd(c+48);	
	    number=number%100;
	    d=number/10;
 8c0:	6a e0       	ldi	r22, 0x0A	; 10
 8c2:	70 e0       	ldi	r23, 0x00	; 0
 8c4:	0e 94 04 05 	call	0xa08	; 0xa08 <__udivmodhi4>
 8c8:	e6 2e       	mov	r14, r22
 8ca:	46 2f       	mov	r20, r22
 8cc:	57 2f       	mov	r21, r23
	    //putchar_lcd(d+48);	
	    e=number%10;
 8ce:	f8 2e       	mov	r15, r24
	   // putchar_lcd(e+48);
    if(a==0 && b==0 && c==0 && d==0){
 8d0:	21 15       	cp	r18, r1
 8d2:	31 05       	cpc	r19, r1
 8d4:	a1 f5       	brne	.+104    	; 0x93e <printnumber_lcd+0xb6>
 8d6:	30 97       	sbiw	r30, 0x00	; 0
 8d8:	09 f5       	brne	.+66     	; 0x91c <printnumber_lcd+0x94>
 8da:	20 97       	sbiw	r28, 0x00	; 0
 8dc:	39 f4       	brne	.+14     	; 0x8ec <printnumber_lcd+0x64>
 8de:	41 15       	cp	r20, r1
 8e0:	51 05       	cpc	r21, r1
 8e2:	21 f4       	brne	.+8      	; 0x8ec <printnumber_lcd+0x64>
		putchar_lcd(e+48);
 8e4:	80 5d       	subi	r24, 0xD0	; 208
 8e6:	0e 94 0e 04 	call	0x81c	; 0x81c <putchar_lcd>
 8ea:	44 c0       	rjmp	.+136    	; 0x974 <printnumber_lcd+0xec>
	}
	else if(a==0 && b==0 && c==0){
 8ec:	20 97       	sbiw	r28, 0x00	; 0
 8ee:	49 f4       	brne	.+18     	; 0x902 <printnumber_lcd+0x7a>
		putchar_lcd(d+48);
 8f0:	8e 2d       	mov	r24, r14
 8f2:	80 5d       	subi	r24, 0xD0	; 208
 8f4:	0e 94 0e 04 	call	0x81c	; 0x81c <putchar_lcd>
		putchar_lcd(e+48);
 8f8:	8f 2d       	mov	r24, r15
 8fa:	80 5d       	subi	r24, 0xD0	; 208
 8fc:	0e 94 0e 04 	call	0x81c	; 0x81c <putchar_lcd>
 900:	39 c0       	rjmp	.+114    	; 0x974 <printnumber_lcd+0xec>
	}
	else if(a==0 && b==0){
		putchar_lcd(c+48);
 902:	81 2f       	mov	r24, r17
 904:	80 5d       	subi	r24, 0xD0	; 208
 906:	0e 94 0e 04 	call	0x81c	; 0x81c <putchar_lcd>
		putchar_lcd(d+48);
 90a:	8e 2d       	mov	r24, r14
 90c:	80 5d       	subi	r24, 0xD0	; 208
 90e:	0e 94 0e 04 	call	0x81c	; 0x81c <putchar_lcd>
		putchar_lcd(e+48);
 912:	8f 2d       	mov	r24, r15
 914:	80 5d       	subi	r24, 0xD0	; 208
 916:	0e 94 0e 04 	call	0x81c	; 0x81c <putchar_lcd>
 91a:	2c c0       	rjmp	.+88     	; 0x974 <printnumber_lcd+0xec>
	}
	else if(a==0){
		putchar_lcd(b+48);
 91c:	80 2f       	mov	r24, r16
 91e:	80 5d       	subi	r24, 0xD0	; 208
 920:	0e 94 0e 04 	call	0x81c	; 0x81c <putchar_lcd>
	    putchar_lcd(c+48);
 924:	81 2f       	mov	r24, r17
 926:	80 5d       	subi	r24, 0xD0	; 208
 928:	0e 94 0e 04 	call	0x81c	; 0x81c <putchar_lcd>
		putchar_lcd(d+48);
 92c:	8e 2d       	mov	r24, r14
 92e:	80 5d       	subi	r24, 0xD0	; 208
 930:	0e 94 0e 04 	call	0x81c	; 0x81c <putchar_lcd>
		putchar_lcd(e+48);
 934:	8f 2d       	mov	r24, r15
 936:	80 5d       	subi	r24, 0xD0	; 208
 938:	0e 94 0e 04 	call	0x81c	; 0x81c <putchar_lcd>
 93c:	1b c0       	rjmp	.+54     	; 0x974 <printnumber_lcd+0xec>
	}
	else if(a!=0 && b!=0 && c!=0 && d!=0){
 93e:	30 97       	sbiw	r30, 0x00	; 0
 940:	c9 f0       	breq	.+50     	; 0x974 <printnumber_lcd+0xec>
 942:	20 97       	sbiw	r28, 0x00	; 0
 944:	b9 f0       	breq	.+46     	; 0x974 <printnumber_lcd+0xec>
 946:	41 15       	cp	r20, r1
 948:	51 05       	cpc	r21, r1
 94a:	a1 f0       	breq	.+40     	; 0x974 <printnumber_lcd+0xec>
		putchar_lcd(a+48);
 94c:	82 2f       	mov	r24, r18
 94e:	80 5d       	subi	r24, 0xD0	; 208
 950:	0e 94 0e 04 	call	0x81c	; 0x81c <putchar_lcd>
		putchar_lcd(b+48);
 954:	80 2f       	mov	r24, r16
 956:	80 5d       	subi	r24, 0xD0	; 208
 958:	0e 94 0e 04 	call	0x81c	; 0x81c <putchar_lcd>
	    putchar_lcd(c+48);
 95c:	81 2f       	mov	r24, r17
 95e:	80 5d       	subi	r24, 0xD0	; 208
 960:	0e 94 0e 04 	call	0x81c	; 0x81c <putchar_lcd>
		putchar_lcd(d+48);
 964:	8e 2d       	mov	r24, r14
 966:	80 5d       	subi	r24, 0xD0	; 208
 968:	0e 94 0e 04 	call	0x81c	; 0x81c <putchar_lcd>
		putchar_lcd(e+48);
 96c:	8f 2d       	mov	r24, r15
 96e:	80 5d       	subi	r24, 0xD0	; 208
 970:	0e 94 0e 04 	call	0x81c	; 0x81c <putchar_lcd>
	}
}
 974:	df 91       	pop	r29
 976:	cf 91       	pop	r28
 978:	1f 91       	pop	r17
 97a:	0f 91       	pop	r16
 97c:	ff 90       	pop	r15
 97e:	ef 90       	pop	r14
 980:	08 95       	ret

00000982 <putstr_lcd>:
putstr_lcd(unsigned char *str, unsigned int lenght){
 982:	ef 92       	push	r14
 984:	ff 92       	push	r15
 986:	0f 93       	push	r16
 988:	1f 93       	push	r17
 98a:	cf 93       	push	r28
 98c:	df 93       	push	r29
 98e:	7b 01       	movw	r14, r22
	unsigned int i;
	for(i=0;i<lenght;i++){
 990:	61 15       	cp	r22, r1
 992:	71 05       	cpc	r23, r1
 994:	99 f0       	breq	.+38     	; 0x9bc <putstr_lcd+0x3a>
 996:	08 2f       	mov	r16, r24
 998:	19 2f       	mov	r17, r25
 99a:	c0 e0       	ldi	r28, 0x00	; 0
 99c:	d0 e0       	ldi	r29, 0x00	; 0
		if(*(str+i)>0){ 
 99e:	f8 01       	movw	r30, r16
 9a0:	81 91       	ld	r24, Z+
 9a2:	8f 01       	movw	r16, r30
 9a4:	88 23       	and	r24, r24
 9a6:	19 f0       	breq	.+6      	; 0x9ae <putstr_lcd+0x2c>
			putchar_lcd(*(str+i));
 9a8:	0e 94 0e 04 	call	0x81c	; 0x81c <putchar_lcd>
 9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <putstr_lcd+0x32>
			}
		else putchar_lcd(0);	
 9ae:	80 e0       	ldi	r24, 0x00	; 0
 9b0:	0e 94 0e 04 	call	0x81c	; 0x81c <putchar_lcd>
		putchar_lcd(e+48);
	}
}
putstr_lcd(unsigned char *str, unsigned int lenght){
	unsigned int i;
	for(i=0;i<lenght;i++){
 9b4:	21 96       	adiw	r28, 0x01	; 1
 9b6:	ce 15       	cp	r28, r14
 9b8:	df 05       	cpc	r29, r15
 9ba:	88 f3       	brcs	.-30     	; 0x99e <putstr_lcd+0x1c>
		if(*(str+i)>0){ 
			putchar_lcd(*(str+i));
			}
		else putchar_lcd(0);	
}
}
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	1f 91       	pop	r17
 9c2:	0f 91       	pop	r16
 9c4:	ff 90       	pop	r15
 9c6:	ef 90       	pop	r14
 9c8:	08 95       	ret

000009ca <__mulsi3>:
 9ca:	62 9f       	mul	r22, r18
 9cc:	d0 01       	movw	r26, r0
 9ce:	73 9f       	mul	r23, r19
 9d0:	f0 01       	movw	r30, r0
 9d2:	82 9f       	mul	r24, r18
 9d4:	e0 0d       	add	r30, r0
 9d6:	f1 1d       	adc	r31, r1
 9d8:	64 9f       	mul	r22, r20
 9da:	e0 0d       	add	r30, r0
 9dc:	f1 1d       	adc	r31, r1
 9de:	92 9f       	mul	r25, r18
 9e0:	f0 0d       	add	r31, r0
 9e2:	83 9f       	mul	r24, r19
 9e4:	f0 0d       	add	r31, r0
 9e6:	74 9f       	mul	r23, r20
 9e8:	f0 0d       	add	r31, r0
 9ea:	65 9f       	mul	r22, r21
 9ec:	f0 0d       	add	r31, r0
 9ee:	99 27       	eor	r25, r25
 9f0:	72 9f       	mul	r23, r18
 9f2:	b0 0d       	add	r27, r0
 9f4:	e1 1d       	adc	r30, r1
 9f6:	f9 1f       	adc	r31, r25
 9f8:	63 9f       	mul	r22, r19
 9fa:	b0 0d       	add	r27, r0
 9fc:	e1 1d       	adc	r30, r1
 9fe:	f9 1f       	adc	r31, r25
 a00:	bd 01       	movw	r22, r26
 a02:	cf 01       	movw	r24, r30
 a04:	11 24       	eor	r1, r1
 a06:	08 95       	ret

00000a08 <__udivmodhi4>:
 a08:	aa 1b       	sub	r26, r26
 a0a:	bb 1b       	sub	r27, r27
 a0c:	51 e1       	ldi	r21, 0x11	; 17
 a0e:	07 c0       	rjmp	.+14     	; 0xa1e <__udivmodhi4_ep>

00000a10 <__udivmodhi4_loop>:
 a10:	aa 1f       	adc	r26, r26
 a12:	bb 1f       	adc	r27, r27
 a14:	a6 17       	cp	r26, r22
 a16:	b7 07       	cpc	r27, r23
 a18:	10 f0       	brcs	.+4      	; 0xa1e <__udivmodhi4_ep>
 a1a:	a6 1b       	sub	r26, r22
 a1c:	b7 0b       	sbc	r27, r23

00000a1e <__udivmodhi4_ep>:
 a1e:	88 1f       	adc	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	5a 95       	dec	r21
 a24:	a9 f7       	brne	.-22     	; 0xa10 <__udivmodhi4_loop>
 a26:	80 95       	com	r24
 a28:	90 95       	com	r25
 a2a:	bc 01       	movw	r22, r24
 a2c:	cd 01       	movw	r24, r26
 a2e:	08 95       	ret

00000a30 <__divmodsi4>:
 a30:	97 fb       	bst	r25, 7
 a32:	09 2e       	mov	r0, r25
 a34:	05 26       	eor	r0, r21
 a36:	0e d0       	rcall	.+28     	; 0xa54 <__divmodsi4_neg1>
 a38:	57 fd       	sbrc	r21, 7
 a3a:	04 d0       	rcall	.+8      	; 0xa44 <__divmodsi4_neg2>
 a3c:	14 d0       	rcall	.+40     	; 0xa66 <__udivmodsi4>
 a3e:	0a d0       	rcall	.+20     	; 0xa54 <__divmodsi4_neg1>
 a40:	00 1c       	adc	r0, r0
 a42:	38 f4       	brcc	.+14     	; 0xa52 <__divmodsi4_exit>

00000a44 <__divmodsi4_neg2>:
 a44:	50 95       	com	r21
 a46:	40 95       	com	r20
 a48:	30 95       	com	r19
 a4a:	21 95       	neg	r18
 a4c:	3f 4f       	sbci	r19, 0xFF	; 255
 a4e:	4f 4f       	sbci	r20, 0xFF	; 255
 a50:	5f 4f       	sbci	r21, 0xFF	; 255

00000a52 <__divmodsi4_exit>:
 a52:	08 95       	ret

00000a54 <__divmodsi4_neg1>:
 a54:	f6 f7       	brtc	.-4      	; 0xa52 <__divmodsi4_exit>
 a56:	90 95       	com	r25
 a58:	80 95       	com	r24
 a5a:	70 95       	com	r23
 a5c:	61 95       	neg	r22
 a5e:	7f 4f       	sbci	r23, 0xFF	; 255
 a60:	8f 4f       	sbci	r24, 0xFF	; 255
 a62:	9f 4f       	sbci	r25, 0xFF	; 255
 a64:	08 95       	ret

00000a66 <__udivmodsi4>:
 a66:	a1 e2       	ldi	r26, 0x21	; 33
 a68:	1a 2e       	mov	r1, r26
 a6a:	aa 1b       	sub	r26, r26
 a6c:	bb 1b       	sub	r27, r27
 a6e:	fd 01       	movw	r30, r26
 a70:	0d c0       	rjmp	.+26     	; 0xa8c <__udivmodsi4_ep>

00000a72 <__udivmodsi4_loop>:
 a72:	aa 1f       	adc	r26, r26
 a74:	bb 1f       	adc	r27, r27
 a76:	ee 1f       	adc	r30, r30
 a78:	ff 1f       	adc	r31, r31
 a7a:	a2 17       	cp	r26, r18
 a7c:	b3 07       	cpc	r27, r19
 a7e:	e4 07       	cpc	r30, r20
 a80:	f5 07       	cpc	r31, r21
 a82:	20 f0       	brcs	.+8      	; 0xa8c <__udivmodsi4_ep>
 a84:	a2 1b       	sub	r26, r18
 a86:	b3 0b       	sbc	r27, r19
 a88:	e4 0b       	sbc	r30, r20
 a8a:	f5 0b       	sbc	r31, r21

00000a8c <__udivmodsi4_ep>:
 a8c:	66 1f       	adc	r22, r22
 a8e:	77 1f       	adc	r23, r23
 a90:	88 1f       	adc	r24, r24
 a92:	99 1f       	adc	r25, r25
 a94:	1a 94       	dec	r1
 a96:	69 f7       	brne	.-38     	; 0xa72 <__udivmodsi4_loop>
 a98:	60 95       	com	r22
 a9a:	70 95       	com	r23
 a9c:	80 95       	com	r24
 a9e:	90 95       	com	r25
 aa0:	9b 01       	movw	r18, r22
 aa2:	ac 01       	movw	r20, r24
 aa4:	bd 01       	movw	r22, r26
 aa6:	cf 01       	movw	r24, r30
 aa8:	08 95       	ret

00000aaa <_exit>:
 aaa:	f8 94       	cli

00000aac <__stop_program>:
 aac:	ff cf       	rjmp	.-2      	; 0xaac <__stop_program>
