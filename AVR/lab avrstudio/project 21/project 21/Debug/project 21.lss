
project 21.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000206  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000206  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000087  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000052a  00000000  00000000  00000a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000187  00000000  00000000  00000fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f1  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  0000152c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000016f  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013b  00000000  00000000  0000172b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00001866  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  7a:	0c 94 01 01 	jmp	0x202	; 0x202 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_send_command>:
}
 
/* This function sends a command 'cmnd' to the LCD module*/
void LCD_send_command(unsigned char cmnd)
{
	LCD_DATA_PORT = cmnd;
  82:	8b bb       	out	0x1b, r24	; 27
	LCD_CNTRL_PORT &= ~(1<<LCD_RW_PIN);
  84:	a9 98       	cbi	0x15, 1	; 21
	LCD_CNTRL_PORT &= ~(1<<LCD_RS_PIN);
  86:	a8 98       	cbi	0x15, 0	; 21
 
	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
  88:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	82 e0       	ldi	r24, 0x02	; 2
  8c:	8a 95       	dec	r24
  8e:	f1 f7       	brne	.-4      	; 0x8c <LCD_send_command+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <LCD_send_command+0x10>
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
  92:	aa 98       	cbi	0x15, 2	; 21
  94:	85 e8       	ldi	r24, 0x85	; 133
  96:	8a 95       	dec	r24
  98:	f1 f7       	brne	.-4      	; 0x96 <LCD_send_command+0x14>
  9a:	00 00       	nop
	_delay_us(100);
}
  9c:	08 95       	ret

0000009e <LCD_send_data>:
 
/* This function sends the data 'data' to the LCD module*/
void LCD_send_data(unsigned char data)
{
	LCD_DATA_PORT = data;
  9e:	8b bb       	out	0x1b, r24	; 27
	LCD_CNTRL_PORT &= ~(1<<LCD_RW_PIN);
  a0:	a9 98       	cbi	0x15, 1	; 21
	LCD_CNTRL_PORT |= (1<<LCD_RS_PIN);
  a2:	a8 9a       	sbi	0x15, 0	; 21
 
	LCD_CNTRL_PORT |= (1<<LCD_ENABLE_PIN);
  a4:	aa 9a       	sbi	0x15, 2	; 21
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <LCD_send_data+0xa>
  ac:	00 c0       	rjmp	.+0      	; 0xae <LCD_send_data+0x10>
	_delay_us(2);
	LCD_CNTRL_PORT &= ~(1<<LCD_ENABLE_PIN);
  ae:	aa 98       	cbi	0x15, 2	; 21
  b0:	85 e8       	ldi	r24, 0x85	; 133
  b2:	8a 95       	dec	r24
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_send_data+0x14>
  b6:	00 00       	nop
	_delay_us(100);
}
  b8:	08 95       	ret

000000ba <LCD_init>:
 
void LCD_init()
{
	LCD_CNTRL_DDR = 0xFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	84 bb       	out	0x14, r24	; 20
	LCD_CNTRL_PORT = 0x00;
  be:	15 ba       	out	0x15, r1	; 21
	LCD_DATA_DDR = 0xFF;
  c0:	8a bb       	out	0x1a, r24	; 26
	LCD_DATA_PORT = 0x00;
  c2:	1b ba       	out	0x1b, r1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	8f e0       	ldi	r24, 0x0F	; 15
  c6:	97 e2       	ldi	r25, 0x27	; 39
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCD_init+0xe>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCD_init+0x14>
  ce:	00 00       	nop
 
	_delay_ms(10);
	LCD_send_command(0x38);
  d0:	88 e3       	ldi	r24, 0x38	; 56
  d2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_send_command>
	LCD_send_command(0x0C);
  d6:	8c e0       	ldi	r24, 0x0C	; 12
  d8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_send_command>
	LCD_send_command(0x01);
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 41 00 	call	0x82	; 0x82 <LCD_send_command>
  e2:	8f e0       	ldi	r24, 0x0F	; 15
  e4:	97 e2       	ldi	r25, 0x27	; 39
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_init+0x2c>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_init+0x32>
  ec:	00 00       	nop
	_delay_ms(10);
	LCD_send_command(0x06);
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_send_command>
}
  f4:	08 95       	ret

000000f6 <LCD_goto>:
 
	//LCD_send_command(firstAddress[y-1] + x-1);
	//_delay_ms(10);	
	
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
  f6:	82 95       	swap	r24
  f8:	88 0f       	add	r24, r24
  fa:	88 0f       	add	r24, r24
  fc:	80 7c       	andi	r24, 0xC0	; 192
  fe:	86 0f       	add	r24, r22
	//clearbit(CTRL,RS);
	LCD_send_command(x);
 100:	81 5c       	subi	r24, 0xC1	; 193
 102:	0e 94 41 00 	call	0x82	; 0x82 <LCD_send_command>
 106:	8f e0       	ldi	r24, 0x0F	; 15
 108:	97 e2       	ldi	r25, 0x27	; 39
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <LCD_goto+0x14>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <LCD_goto+0x1a>
 110:	00 00       	nop
	
	_delay_ms(10);
}
 112:	08 95       	ret

00000114 <LCD_print>:
 
void LCD_print(char *string)
{
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	ec 01       	movw	r28, r24
	unsigned char i;
 
	while(string[i]!=0)
 11c:	10 e0       	ldi	r17, 0x00	; 0
 11e:	88 81       	ld	r24, Y
 120:	88 23       	and	r24, r24
 122:	49 f0       	breq	.+18     	; 0x136 <LCD_print+0x22>
	{
		LCD_send_data(string[i]);
 124:	0e 94 4f 00 	call	0x9e	; 0x9e <LCD_send_data>
		i++;
 128:	1f 5f       	subi	r17, 0xFF	; 255
 
void LCD_print(char *string)
{
	unsigned char i;
 
	while(string[i]!=0)
 12a:	fe 01       	movw	r30, r28
 12c:	e1 0f       	add	r30, r17
 12e:	f1 1d       	adc	r31, r1
 130:	80 81       	ld	r24, Z
 132:	88 23       	and	r24, r24
 134:	b9 f7       	brne	.-18     	; 0x124 <LCD_print+0x10>
	{
		LCD_send_data(string[i]);
		i++;
	}
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	08 95       	ret

0000013e <LCD_blink>:
 
void LCD_blink()
{
	LCD_send_command(0x08);
 13e:	88 e0       	ldi	r24, 0x08	; 8
 140:	0e 94 41 00 	call	0x82	; 0x82 <LCD_send_command>
 144:	8f e3       	ldi	r24, 0x3F	; 63
 146:	9d e0       	ldi	r25, 0x0D	; 13
 148:	a3 e0       	ldi	r26, 0x03	; 3
 14a:	81 50       	subi	r24, 0x01	; 1
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	a0 40       	sbci	r26, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <LCD_blink+0xc>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCD_blink+0x16>
 154:	00 00       	nop
	_delay_ms(250);
	LCD_send_command(0x0C);
 156:	8c e0       	ldi	r24, 0x0C	; 12
 158:	0e 94 41 00 	call	0x82	; 0x82 <LCD_send_command>
 15c:	8f e3       	ldi	r24, 0x3F	; 63
 15e:	9d e0       	ldi	r25, 0x0D	; 13
 160:	a3 e0       	ldi	r26, 0x03	; 3
 162:	81 50       	subi	r24, 0x01	; 1
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	a0 40       	sbci	r26, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <LCD_blink+0x24>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_blink+0x2e>
 16c:	00 00       	nop
	_delay_ms(250);
}
 16e:	08 95       	ret

00000170 <LCD_scroll>:
 
void LCD_scroll(unsigned char direction)
{
	if(direction == 0)
 170:	88 23       	and	r24, r24
 172:	21 f4       	brne	.+8      	; 0x17c <LCD_scroll+0xc>
		LCD_send_command(0x18);
 174:	88 e1       	ldi	r24, 0x18	; 24
 176:	0e 94 41 00 	call	0x82	; 0x82 <LCD_send_command>
 17a:	03 c0       	rjmp	.+6      	; 0x182 <LCD_scroll+0x12>
	else
		LCD_send_command(0x1C);
 17c:	8c e1       	ldi	r24, 0x1C	; 28
 17e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_send_command>
 182:	8f e7       	ldi	r24, 0x7F	; 127
 184:	9a e1       	ldi	r25, 0x1A	; 26
 186:	a6 e0       	ldi	r26, 0x06	; 6
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	a0 40       	sbci	r26, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <LCD_scroll+0x18>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_scroll+0x22>
 192:	00 00       	nop
 
	_delay_ms(500);
 194:	08 95       	ret

00000196 <main>:
#define LCD_RS_PIN		0
#define LCD_RW_PIN		1
#define LCD_ENABLE_PIN	2
 
int main(void)
{
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
	unsigned char i; 
 
    LCD_init();
 19c:	0e 94 5d 00 	call	0xba	; 0xba <LCD_init>
	LCD_goto(1,2);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	62 e0       	ldi	r22, 0x02	; 2
 1a4:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_goto>
	LCD_print("DUC KHANH");
 1a8:	c0 e6       	ldi	r28, 0x60	; 96
 1aa:	d0 e0       	ldi	r29, 0x00	; 0
 1ac:	ce 01       	movw	r24, r28
 1ae:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_print>
	LCD_goto(2,3);
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	63 e0       	ldi	r22, 0x03	; 3
 1b6:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_goto>
	LCD_print("DUC KHANH");
 1ba:	ce 01       	movw	r24, r28
 1bc:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_print>
 
	while(1)
    {
        for(i=0;i<2;i++)
 1c0:	10 e0       	ldi	r17, 0x00	; 0
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <main+0x34>
			LCD_blink();
 1c4:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_blink>
	LCD_goto(2,3);
	LCD_print("DUC KHANH");
 
	while(1)
    {
        for(i=0;i<2;i++)
 1c8:	1f 5f       	subi	r17, 0xFF	; 255
 1ca:	12 30       	cpi	r17, 0x02	; 2
 1cc:	d8 f3       	brcs	.-10     	; 0x1c4 <main+0x2e>
			LCD_blink();
 
		for(i=0;i<2;i++)
			LCD_scroll(0);
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_scroll>
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_scroll>
 
		for(i=0;i<4;i++)
			LCD_scroll(1);
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_scroll>
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_scroll>
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_scroll>
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_scroll>
 
		for(i=0;i<2;i++)
			LCD_scroll(0);
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_scroll>
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_scroll>
	LCD_goto(2,3);
	LCD_print("DUC KHANH");
 
	while(1)
    {
        for(i=0;i<2;i++)
 1fe:	10 e0       	ldi	r17, 0x00	; 0
 200:	e4 cf       	rjmp	.-56     	; 0x1ca <main+0x34>

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>
