
hienthi_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000562  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00000562  000005f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080009c  0080009c  00000632  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000165  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006c0  00000000  00000000  00000f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003b8  00000000  00000000  00001615  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000009da  00000000  00000000  000019cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000130  00000000  00000000  000023a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000206  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002ee  00000000  00000000  000026de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000009b  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 39       	cpi	r26, 0x9C	; 156
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e9       	ldi	r26, 0x9C	; 156
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3a       	cpi	r26, 0xA1	; 161
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 af 02 	jmp	0x55e	; 0x55e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
volatile uint8_t val=0;
volatile uint8_t ByteOfData;
volatile unsigned char  key,k,x=0;

int main(void)
{
  92:	1f 93       	push	r17
	movecursor(1,10);
	printnumber_lcd(val);
}
*/
	
	DDRD=0x00;
  94:	11 ba       	out	0x11, r1	; 17
	PORTD=0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	82 bb       	out	0x12, r24	; 18
	
	DDRC=0x0F;
  9a:	9f e0       	ldi	r25, 0x0F	; 15
  9c:	94 bb       	out	0x14, r25	; 20
	PORTC=0xFF;
  9e:	85 bb       	out	0x15, r24	; 21
	
	TCCR2=0;
  a0:	15 bc       	out	0x25, r1	; 37
	TIMSK|=(1<<TOIE2);
  a2:	89 b7       	in	r24, 0x39	; 57
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	89 bf       	out	0x39, r24	; 57
	
	init_lcd();
  a8:	0e 94 a9 01 	call	0x352	; 0x352 <init_lcd>
	movecursor(1,1);
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <movecursor>
	putstr_lcd("DUC KHANH",9);
  b4:	80 e6       	ldi	r24, 0x60	; 96
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	69 e0       	ldi	r22, 0x09	; 9
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	0e 94 77 02 	call	0x4ee	; 0x4ee <putstr_lcd>
	movecursor(2,1);
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <movecursor>
	putstr_lcd("28-4-2016",9);
  c8:	8a e6       	ldi	r24, 0x6A	; 106
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	69 e0       	ldi	r22, 0x09	; 9
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	0e 94 77 02 	call	0x4ee	; 0x4ee <putstr_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	8f e3       	ldi	r24, 0x3F	; 63
  d6:	92 e4       	ldi	r25, 0x42	; 66
  d8:	af e0       	ldi	r26, 0x0F	; 15
  da:	81 50       	subi	r24, 0x01	; 1
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	a0 40       	sbci	r26, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x48>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x52>
  e4:	00 00       	nop
	_delay_ms(5000);
	clear_lcd();
  e6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <clear_lcd>
	movecursor(1,1);
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <movecursor>
    putstr_lcd("Channels ",9);
  f2:	84 e7       	ldi	r24, 0x74	; 116
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	69 e0       	ldi	r22, 0x09	; 9
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	0e 94 77 02 	call	0x4ee	; 0x4ee <putstr_lcd>
	
	movecursor(2,1);
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <movecursor>
	putstr_lcd("lock channel",12);
 106:	8e e7       	ldi	r24, 0x7E	; 126
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	6c e0       	ldi	r22, 0x0C	; 12
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	0e 94 77 02 	call	0x4ee	; 0x4ee <putstr_lcd>
	 
	movecursor(1,11);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	6b e0       	ldi	r22, 0x0B	; 11
 116:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <movecursor>
	
	
	sei();
 11a:	78 94       	sei

	   key =KEY4x4_Getkey();
	   
	   if(key){
		   TCNT2=0;
		   TCCR2=(1<<CS22);
 11c:	14 e0       	ldi	r17, 0x04	; 4
	
	sei();
	while(1)
       {

	   key =KEY4x4_Getkey();
 11e:	0e 94 1f 01 	call	0x23e	; 0x23e <KEY4x4_Getkey>
 122:	80 93 a0 00 	sts	0x00A0, r24
	   
	   if(key){
 126:	80 91 a0 00 	lds	r24, 0x00A0
 12a:	88 23       	and	r24, r24
 12c:	31 f0       	breq	.+12     	; 0x13a <main+0xa8>
		   TCNT2=0;
 12e:	14 bc       	out	0x24, r1	; 36
		   TCCR2=(1<<CS22);
 130:	15 bd       	out	0x25, r17	; 37
		   k=key;
 132:	80 91 a0 00 	lds	r24, 0x00A0
 136:	80 93 9e 00 	sts	0x009E, r24
	   }
	   if(bit_is_clear(PIND,4)){
 13a:	84 99       	sbic	0x10, 4	; 16
 13c:	f0 cf       	rjmp	.-32     	; 0x11e <main+0x8c>
		   movecursor(2,14);
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	6e e0       	ldi	r22, 0x0E	; 14
 142:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <movecursor>
		   ByteOfData=x;
 146:	80 91 9d 00 	lds	r24, 0x009D
 14a:	80 93 9f 00 	sts	0x009F, r24
		   printnumber_lcd(ByteOfData);
 14e:	80 91 9f 00 	lds	r24, 0x009F
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <printnumber_lcd>
		   break;
	   }
        

}
}
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	1f 91       	pop	r17
 15e:	08 95       	ret

00000160 <__vector_4>:
ISR(TIMER2_OVF_vect){
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	4f 93       	push	r20
 170:	5f 93       	push	r21
 172:	6f 93       	push	r22
 174:	7f 93       	push	r23
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	af 93       	push	r26
 17c:	bf 93       	push	r27
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
	printnumber_lcd(k);
 182:	80 91 9e 00 	lds	r24, 0x009E
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <printnumber_lcd>
	x=x*10+k;
 18c:	80 91 9d 00 	lds	r24, 0x009D
 190:	90 91 9e 00 	lds	r25, 0x009E
 194:	88 0f       	add	r24, r24
 196:	28 2f       	mov	r18, r24
 198:	22 0f       	add	r18, r18
 19a:	22 0f       	add	r18, r18
 19c:	82 0f       	add	r24, r18
 19e:	89 0f       	add	r24, r25
 1a0:	80 93 9d 00 	sts	0x009D, r24
	TCNT2=0;
 1a4:	14 bc       	out	0x24, r1	; 36
	TCCR2=0;
 1a6:	15 bc       	out	0x25, r1	; 37
	
 1a8:	ff 91       	pop	r31
 1aa:	ef 91       	pop	r30
 1ac:	bf 91       	pop	r27
 1ae:	af 91       	pop	r26
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	7f 91       	pop	r23
 1b6:	6f 91       	pop	r22
 1b8:	5f 91       	pop	r21
 1ba:	4f 91       	pop	r20
 1bc:	3f 91       	pop	r19
 1be:	2f 91       	pop	r18
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <KEY4x4_Ispush>:
return 0;
}
*/

unsigned char KEY4x4_Ispush(void){
if((bit_is_clear(control_pin,KEY4x4_COL1))|(bit_is_clear(control_pin,KEY4x4_COL2))|(bit_is_clear(control_pin,KEY4x4_COL3))|(bit_is_clear(control_pin,KEY4x4_COL4)))
 1ca:	63 b3       	in	r22, 0x13	; 19
 1cc:	53 b3       	in	r21, 0x13	; 19
 1ce:	33 b3       	in	r19, 0x13	; 19
 1d0:	23 b3       	in	r18, 0x13	; 19
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	36 ff       	sbrs	r19, 6
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <KEY4x4_Ispush+0x14>
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	33 27       	eor	r19, r19
 1e0:	27 fd       	sbrc	r18, 7
 1e2:	30 95       	com	r19
 1e4:	20 95       	com	r18
 1e6:	30 95       	com	r19
 1e8:	22 27       	eor	r18, r18
 1ea:	33 0f       	add	r19, r19
 1ec:	22 1f       	adc	r18, r18
 1ee:	33 27       	eor	r19, r19
 1f0:	82 2b       	or	r24, r18
 1f2:	93 2b       	or	r25, r19
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	64 fd       	sbrc	r22, 4
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	55 fd       	sbrc	r21, 5
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	42 2b       	or	r20, r18
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	9c 01       	movw	r18, r24
 206:	24 2b       	or	r18, r20
 208:	35 2b       	or	r19, r21
return 1;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	21 15       	cp	r18, r1
 20e:	31 05       	cpc	r19, r1
 210:	09 f4       	brne	.+2      	; 0x214 <KEY4x4_Ispush+0x4a>
 212:	80 e0       	ldi	r24, 0x00	; 0
else return 0;
}
 214:	08 95       	ret

00000216 <KEY4x4_checkROW>:
void KEY4x4_checkROW(unsigned char i){

setbit(control_port,KEY4x4_ROW1);
 216:	ab 9a       	sbi	0x15, 3	; 21
setbit(control_port,KEY4x4_ROW2);
 218:	aa 9a       	sbi	0x15, 2	; 21
setbit(control_port,KEY4x4_ROW3);
 21a:	a9 9a       	sbi	0x15, 1	; 21
setbit(control_port,KEY4x4_ROW4);
 21c:	a8 9a       	sbi	0x15, 0	; 21
if(i==0){
 21e:	88 23       	and	r24, r24
 220:	11 f4       	brne	.+4      	; 0x226 <KEY4x4_checkROW+0x10>
    clearbit(control_port,KEY4x4_ROW1);
 222:	ab 98       	cbi	0x15, 3	; 21
 224:	08 c0       	rjmp	.+16     	; 0x236 <KEY4x4_checkROW+0x20>
}
if(i==1){
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	11 f4       	brne	.+4      	; 0x22e <KEY4x4_checkROW+0x18>
    clearbit(control_port,KEY4x4_ROW2);
 22a:	aa 98       	cbi	0x15, 2	; 21
 22c:	08 95       	ret
}
if(i==2){
 22e:	82 30       	cpi	r24, 0x02	; 2
 230:	11 f4       	brne	.+4      	; 0x236 <KEY4x4_checkROW+0x20>
    clearbit(control_port,KEY4x4_ROW3);
 232:	a9 98       	cbi	0x15, 1	; 21
 234:	08 95       	ret
}
if(i==3){
 236:	83 30       	cpi	r24, 0x03	; 3
 238:	09 f4       	brne	.+2      	; 0x23c <KEY4x4_checkROW+0x26>
    clearbit(control_port,KEY4x4_ROW4);
 23a:	a8 98       	cbi	0x15, 0	; 21
 23c:	08 95       	ret

0000023e <KEY4x4_Getkey>:
}   
}
unsigned char KEY4x4_Getkey(void){
 23e:	1f 93       	push	r17
unsigned char i,button;
clearbit(control_port,KEY4x4_ROW1);
 240:	ab 98       	cbi	0x15, 3	; 21
clearbit(control_port,KEY4x4_ROW2);
 242:	aa 98       	cbi	0x15, 2	; 21
clearbit(control_port,KEY4x4_ROW3);
 244:	a9 98       	cbi	0x15, 1	; 21
clearbit(control_port,KEY4x4_ROW4);
 246:	a8 98       	cbi	0x15, 0	; 21

if(KEY4x4_Ispush()){
 248:	0e 94 e5 00 	call	0x1ca	; 0x1ca <KEY4x4_Ispush>
 24c:	88 23       	and	r24, r24
 24e:	09 f4       	brne	.+2      	; 0x252 <KEY4x4_Getkey+0x14>
 250:	43 c0       	rjmp	.+134    	; 0x2d8 <KEY4x4_Getkey+0x9a>
 252:	81 ee       	ldi	r24, 0xE1	; 225
 254:	94 e0       	ldi	r25, 0x04	; 4
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <KEY4x4_Getkey+0x18>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <KEY4x4_Getkey+0x1e>
 25c:	00 00       	nop
_delay_ms(5);
if(KEY4x4_Ispush()){
 25e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <KEY4x4_Ispush>
 262:	88 23       	and	r24, r24
 264:	d9 f1       	breq	.+118    	; 0x2dc <KEY4x4_Getkey+0x9e>
 266:	10 e0       	ldi	r17, 0x00	; 0
for(i=0;i<4;i++){
KEY4x4_checkROW(i);
 268:	81 2f       	mov	r24, r17
 26a:	0e 94 0b 01 	call	0x216	; 0x216 <KEY4x4_checkROW>
if(bit_is_clear(control_pin,KEY4x4_COL1))  return KEY_4x4[i][0];
 26e:	9c 99       	sbic	0x13, 4	; 19
 270:	0a c0       	rjmp	.+20     	; 0x286 <KEY4x4_Getkey+0x48>
 272:	e1 2f       	mov	r30, r17
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	ee 0f       	add	r30, r30
 27c:	ff 1f       	adc	r31, r31
 27e:	e5 57       	subi	r30, 0x75	; 117
 280:	ff 4f       	sbci	r31, 0xFF	; 255
 282:	80 81       	ld	r24, Z
 284:	2c c0       	rjmp	.+88     	; 0x2de <KEY4x4_Getkey+0xa0>
if(bit_is_clear(control_pin,KEY4x4_COL2))  return KEY_4x4[i][1];
 286:	9d 99       	sbic	0x13, 5	; 19
 288:	0a c0       	rjmp	.+20     	; 0x29e <KEY4x4_Getkey+0x60>
 28a:	e1 2f       	mov	r30, r17
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	ee 0f       	add	r30, r30
 290:	ff 1f       	adc	r31, r31
 292:	ee 0f       	add	r30, r30
 294:	ff 1f       	adc	r31, r31
 296:	e5 57       	subi	r30, 0x75	; 117
 298:	ff 4f       	sbci	r31, 0xFF	; 255
 29a:	81 81       	ldd	r24, Z+1	; 0x01
 29c:	20 c0       	rjmp	.+64     	; 0x2de <KEY4x4_Getkey+0xa0>
if(bit_is_clear(control_pin,KEY4x4_COL3))  return KEY_4x4[i][2];
 29e:	9e 99       	sbic	0x13, 6	; 19
 2a0:	0a c0       	rjmp	.+20     	; 0x2b6 <KEY4x4_Getkey+0x78>
 2a2:	e1 2f       	mov	r30, r17
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	ee 0f       	add	r30, r30
 2a8:	ff 1f       	adc	r31, r31
 2aa:	ee 0f       	add	r30, r30
 2ac:	ff 1f       	adc	r31, r31
 2ae:	e5 57       	subi	r30, 0x75	; 117
 2b0:	ff 4f       	sbci	r31, 0xFF	; 255
 2b2:	82 81       	ldd	r24, Z+2	; 0x02
 2b4:	14 c0       	rjmp	.+40     	; 0x2de <KEY4x4_Getkey+0xa0>
if(bit_is_clear(control_pin,KEY4x4_COL4))  return KEY_4x4[i][3];
 2b6:	9f 99       	sbic	0x13, 7	; 19
 2b8:	0a c0       	rjmp	.+20     	; 0x2ce <KEY4x4_Getkey+0x90>
 2ba:	e1 2f       	mov	r30, r17
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	ee 0f       	add	r30, r30
 2c0:	ff 1f       	adc	r31, r31
 2c2:	ee 0f       	add	r30, r30
 2c4:	ff 1f       	adc	r31, r31
 2c6:	e5 57       	subi	r30, 0x75	; 117
 2c8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ca:	83 81       	ldd	r24, Z+3	; 0x03
 2cc:	08 c0       	rjmp	.+16     	; 0x2de <KEY4x4_Getkey+0xa0>
clearbit(control_port,KEY4x4_ROW4);

if(KEY4x4_Ispush()){
_delay_ms(5);
if(KEY4x4_Ispush()){
for(i=0;i<4;i++){
 2ce:	1f 5f       	subi	r17, 0xFF	; 255
 2d0:	14 30       	cpi	r17, 0x04	; 4
 2d2:	51 f6       	brne	.-108    	; 0x268 <KEY4x4_Getkey+0x2a>
if(bit_is_clear(control_pin,KEY4x4_COL3))  return KEY_4x4[i][2];
if(bit_is_clear(control_pin,KEY4x4_COL4))  return KEY_4x4[i][3];
}
}
}
return 0;
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	03 c0       	rjmp	.+6      	; 0x2de <KEY4x4_Getkey+0xa0>
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	01 c0       	rjmp	.+2      	; 0x2de <KEY4x4_Getkey+0xa0>
 2dc:	80 e0       	ldi	r24, 0x00	; 0
}
 2de:	1f 91       	pop	r17
 2e0:	08 95       	ret

000002e2 <read_2Nib>:


char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
 2e2:	da 9a       	sbi	0x1b, 2	; 27
	DDR_DATA=0x0F;
 2e4:	8f e0       	ldi	r24, 0x0F	; 15
 2e6:	8a bb       	out	0x1a, r24	; 26
	HNib=DATA_input&0xF0;
 2e8:	89 b3       	in	r24, 0x19	; 25
	clearbit(CTRL,EN);
 2ea:	da 98       	cbi	0x1b, 2	; 27
	
	setbit(CTRL,EN);
 2ec:	da 9a       	sbi	0x1b, 2	; 27
	LNib=DATA_input&0xF0;
 2ee:	99 b3       	in	r25, 0x19	; 25
	clearbit(CTRL,EN);
 2f0:	da 98       	cbi	0x1b, 2	; 27
	LNib>>=4;
 2f2:	92 95       	swap	r25
 2f4:	9f 70       	andi	r25, 0x0F	; 15
char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
	DDR_DATA=0x0F;
	HNib=DATA_input&0xF0;
 2f6:	80 7f       	andi	r24, 0xF0	; 240
	LNib=DATA_input&0xF0;
	clearbit(CTRL,EN);
	LNib>>=4;
	
	return (HNib|LNib);
}
 2f8:	89 2b       	or	r24, r25
 2fa:	08 95       	ret

000002fc <write_2Nib>:
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
 2fc:	9b b3       	in	r25, 0x1b	; 27
 2fe:	9f 70       	andi	r25, 0x0F	; 15
	HNib=data&0xF0;
 300:	28 2f       	mov	r18, r24
 302:	20 7f       	andi	r18, 0xF0	; 240
	LNib=(data<<4)&0xF0;
	
	DATA_output=HNib|temp;
 304:	29 2b       	or	r18, r25
 306:	2b bb       	out	0x1b, r18	; 27
	setbit(CTRL,EN);
 308:	da 9a       	sbi	0x1b, 2	; 27
	clearbit(CTRL,EN);
 30a:	da 98       	cbi	0x1b, 2	; 27
}
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
	HNib=data&0xF0;
	LNib=(data<<4)&0xF0;
 30c:	82 95       	swap	r24
 30e:	80 7f       	andi	r24, 0xF0	; 240
	
	DATA_output=HNib|temp;
	setbit(CTRL,EN);
	clearbit(CTRL,EN);
	
	DATA_output=LNib|temp;
 310:	98 2b       	or	r25, r24
 312:	9b bb       	out	0x1b, r25	; 27
	setbit(CTRL,EN);
 314:	da 9a       	sbi	0x1b, 2	; 27
	clearbit(CTRL,EN);
 316:	da 98       	cbi	0x1b, 2	; 27
	
}
 318:	08 95       	ret

0000031a <wait_lcd>:
void wait_lcd(void){
 31a:	0f 93       	push	r16
 31c:	1f 93       	push	r17
 31e:	df 93       	push	r29
 320:	cf 93       	push	r28
 322:	0f 92       	push	r0
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
	while(1){
     	clearbit(CTRL,RS);
		setbit(CTRL,RW);
		temp=read_2Nib();
		
		if(bit_is_clear(temp,7)) break;
 328:	8e 01       	movw	r16, r28
 32a:	0f 5f       	subi	r16, 0xFF	; 255
 32c:	1f 4f       	sbci	r17, 0xFF	; 255
}
void wait_lcd(void){
	unsigned char temp;
	
	while(1){
     	clearbit(CTRL,RS);
 32e:	d8 98       	cbi	0x1b, 0	; 27
		setbit(CTRL,RW);
 330:	d9 9a       	sbi	0x1b, 1	; 27
		temp=read_2Nib();
 332:	0e 94 71 01 	call	0x2e2	; 0x2e2 <read_2Nib>
 336:	89 83       	std	Y+1, r24	; 0x01
		
		if(bit_is_clear(temp,7)) break;
 338:	f8 01       	movw	r30, r16
 33a:	80 81       	ld	r24, Z
 33c:	88 23       	and	r24, r24
 33e:	bc f3       	brlt	.-18     	; 0x32e <wait_lcd+0x14>
	}
	clearbit(CTRL,RW);
 340:	d9 98       	cbi	0x1b, 1	; 27
	DDR_DATA=0xFF;
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	8a bb       	out	0x1a, r24	; 26
	
}
 346:	0f 90       	pop	r0
 348:	cf 91       	pop	r28
 34a:	df 91       	pop	r29
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	08 95       	ret

00000352 <init_lcd>:

void init_lcd(){//uses mode 4 bit
	DDR_CTRL=0xFF;
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	8a bb       	out	0x1a, r24	; 26
	DDR_DATA=0xFF;
 356:	8a bb       	out	0x1a, r24	; 26
	clearbit(CTRL,RS);
 358:	d8 98       	cbi	0x1b, 0	; 27
	clearbit(CTRL,RW);
 35a:	d9 98       	cbi	0x1b, 1	; 27
	clearbit(CTRL,EN);
 35c:	da 98       	cbi	0x1b, 2	; 27
	
//function set	
	setbit(CTRL,EN);
 35e:	da 9a       	sbi	0x1b, 2	; 27
	setbit(DATA_output,5);
 360:	dd 9a       	sbi	0x1b, 5	; 27
	clearbit(CTRL,EN);
 362:	da 98       	cbi	0x1b, 2	; 27
	wait_lcd();
 364:	0e 94 8d 01 	call	0x31a	; 0x31a <wait_lcd>
	write_2Nib(0x28);
 368:	88 e2       	ldi	r24, 0x28	; 40
 36a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <write_2Nib>
	wait_lcd();
 36e:	0e 94 8d 01 	call	0x31a	; 0x31a <wait_lcd>
//display on/off control
    write_2Nib(0x0C);
 372:	8c e0       	ldi	r24, 0x0C	; 12
 374:	0e 94 7e 01 	call	0x2fc	; 0x2fc <write_2Nib>
	wait_lcd();
 378:	0e 94 8d 01 	call	0x31a	; 0x31a <wait_lcd>

//entry mode set 
    
    write_2Nib(0x06);
 37c:	86 e0       	ldi	r24, 0x06	; 6
 37e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <write_2Nib>
    wait_lcd();		
 382:	0e 94 8d 01 	call	0x31a	; 0x31a <wait_lcd>
}
 386:	08 95       	ret

00000388 <putchar_lcd>:
void putchar_lcd(unsigned char data){
	
	setbit(CTRL,RS);
 388:	d8 9a       	sbi	0x1b, 0	; 27
	write_2Nib(data);
 38a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <write_2Nib>
	wait_lcd();
 38e:	0e 94 8d 01 	call	0x31a	; 0x31a <wait_lcd>
}
 392:	08 95       	ret

00000394 <cursor_home>:
void cursor_home(){
	clearbit(CTRL,RS);
 394:	d8 98       	cbi	0x1b, 0	; 27
	write_2Nib(0x03);
 396:	83 e0       	ldi	r24, 0x03	; 3
 398:	0e 94 7e 01 	call	0x2fc	; 0x2fc <write_2Nib>
	wait_lcd();
 39c:	0e 94 8d 01 	call	0x31a	; 0x31a <wait_lcd>
}
 3a0:	08 95       	ret

000003a2 <clear_lcd>:
void clear_lcd(){
	clearbit(CTRL,RS);
 3a2:	d8 98       	cbi	0x1b, 0	; 27
	write_2Nib(0x01);
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <write_2Nib>
	wait_lcd();
 3aa:	0e 94 8d 01 	call	0x31a	; 0x31a <wait_lcd>
}
 3ae:	08 95       	ret

000003b0 <movecursor>:
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
	clearbit(CTRL,RS);
 3b0:	d8 98       	cbi	0x1b, 0	; 27
	write_2Nib(0x01);
	wait_lcd();
}
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
 3b2:	82 95       	swap	r24
 3b4:	88 0f       	add	r24, r24
 3b6:	88 0f       	add	r24, r24
 3b8:	80 7c       	andi	r24, 0xC0	; 192
 3ba:	86 0f       	add	r24, r22
	clearbit(CTRL,RS);
	write_2Nib(x);
 3bc:	81 5c       	subi	r24, 0xC1	; 193
 3be:	0e 94 7e 01 	call	0x2fc	; 0x2fc <write_2Nib>
	wait_lcd();
 3c2:	0e 94 8d 01 	call	0x31a	; 0x31a <wait_lcd>
}
 3c6:	08 95       	ret

000003c8 <count_number>:
int count_number(unsigned int number){
 3c8:	bc 01       	movw	r22, r24
	int dem=0;
	if(number!=0) {
 3ca:	00 97       	sbiw	r24, 0x00	; 0
 3cc:	71 f0       	breq	.+28     	; 0x3ea <count_number+0x22>
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	30 e0       	ldi	r19, 0x00	; 0
	   while(number){
		number=number/10;
 3d2:	ea e0       	ldi	r30, 0x0A	; 10
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	cb 01       	movw	r24, r22
 3d8:	bf 01       	movw	r22, r30
 3da:	0e 94 9b 02 	call	0x536	; 0x536 <__udivmodhi4>
		dem++;
 3de:	2f 5f       	subi	r18, 0xFF	; 255
 3e0:	3f 4f       	sbci	r19, 0xFF	; 255
	wait_lcd();
}
int count_number(unsigned int number){
	int dem=0;
	if(number!=0) {
	   while(number){
 3e2:	61 15       	cp	r22, r1
 3e4:	71 05       	cpc	r23, r1
 3e6:	b9 f7       	brne	.-18     	; 0x3d6 <count_number+0xe>
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <count_number+0x26>
		number=number/10;
		dem++;
	}	
    } 
	else dem=dem+1; 
 3ea:	21 e0       	ldi	r18, 0x01	; 1
 3ec:	30 e0       	ldi	r19, 0x00	; 0
	return dem;
	}
 3ee:	82 2f       	mov	r24, r18
 3f0:	93 2f       	mov	r25, r19
 3f2:	08 95       	ret

000003f4 <printnumber_lcd>:
void printnumber_lcd(unsigned int number){
 3f4:	ef 92       	push	r14
 3f6:	ff 92       	push	r15
 3f8:	0f 93       	push	r16
 3fa:	1f 93       	push	r17
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
	putchar_lcd(a+48);
	b=number%10;
	putchar_lcd(b+48);
	*/
		int a,b,c,d,e;
	    a=number/10000;
 400:	60 e1       	ldi	r22, 0x10	; 16
 402:	77 e2       	ldi	r23, 0x27	; 39
 404:	0e 94 9b 02 	call	0x536	; 0x536 <__udivmodhi4>
 408:	9b 01       	movw	r18, r22
	    //putchar_lcd(a+48);
		number=number%10000;
	    b=number/1000;
 40a:	68 ee       	ldi	r22, 0xE8	; 232
 40c:	73 e0       	ldi	r23, 0x03	; 3
 40e:	0e 94 9b 02 	call	0x536	; 0x536 <__udivmodhi4>
 412:	06 2f       	mov	r16, r22
 414:	e6 2f       	mov	r30, r22
 416:	f7 2f       	mov	r31, r23
	    //putchar_lcd(b+48);
	    number=number%1000;
	    c=number/100;
 418:	64 e6       	ldi	r22, 0x64	; 100
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	0e 94 9b 02 	call	0x536	; 0x536 <__udivmodhi4>
 420:	16 2f       	mov	r17, r22
 422:	e6 2e       	mov	r14, r22
 424:	e7 01       	movw	r28, r14
 426:	7e 01       	movw	r14, r28
 428:	f7 2e       	mov	r15, r23
 42a:	e7 01       	movw	r28, r14
	    //putchar_lcd(c+48);	
	    number=number%100;
	    d=number/10;
 42c:	6a e0       	ldi	r22, 0x0A	; 10
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	0e 94 9b 02 	call	0x536	; 0x536 <__udivmodhi4>
 434:	e6 2e       	mov	r14, r22
 436:	46 2f       	mov	r20, r22
 438:	57 2f       	mov	r21, r23
	    //putchar_lcd(d+48);	
	    e=number%10;
 43a:	f8 2e       	mov	r15, r24
	   // putchar_lcd(e+48);
    if(a==0 && b==0 && c==0 && d==0){
 43c:	21 15       	cp	r18, r1
 43e:	31 05       	cpc	r19, r1
 440:	a1 f5       	brne	.+104    	; 0x4aa <__stack+0x4b>
 442:	30 97       	sbiw	r30, 0x00	; 0
 444:	09 f5       	brne	.+66     	; 0x488 <__stack+0x29>
 446:	20 97       	sbiw	r28, 0x00	; 0
 448:	39 f4       	brne	.+14     	; 0x458 <printnumber_lcd+0x64>
 44a:	41 15       	cp	r20, r1
 44c:	51 05       	cpc	r21, r1
 44e:	21 f4       	brne	.+8      	; 0x458 <printnumber_lcd+0x64>
		putchar_lcd(e+48);
 450:	80 5d       	subi	r24, 0xD0	; 208
 452:	0e 94 c4 01 	call	0x388	; 0x388 <putchar_lcd>
 456:	44 c0       	rjmp	.+136    	; 0x4e0 <__stack+0x81>
	}
	else if(a==0 && b==0 && c==0){
 458:	20 97       	sbiw	r28, 0x00	; 0
 45a:	49 f4       	brne	.+18     	; 0x46e <__stack+0xf>
		putchar_lcd(d+48);
 45c:	8e 2d       	mov	r24, r14
 45e:	80 5d       	subi	r24, 0xD0	; 208
 460:	0e 94 c4 01 	call	0x388	; 0x388 <putchar_lcd>
		putchar_lcd(e+48);
 464:	8f 2d       	mov	r24, r15
 466:	80 5d       	subi	r24, 0xD0	; 208
 468:	0e 94 c4 01 	call	0x388	; 0x388 <putchar_lcd>
 46c:	39 c0       	rjmp	.+114    	; 0x4e0 <__stack+0x81>
	}
	else if(a==0 && b==0){
		putchar_lcd(c+48);
 46e:	81 2f       	mov	r24, r17
 470:	80 5d       	subi	r24, 0xD0	; 208
 472:	0e 94 c4 01 	call	0x388	; 0x388 <putchar_lcd>
		putchar_lcd(d+48);
 476:	8e 2d       	mov	r24, r14
 478:	80 5d       	subi	r24, 0xD0	; 208
 47a:	0e 94 c4 01 	call	0x388	; 0x388 <putchar_lcd>
		putchar_lcd(e+48);
 47e:	8f 2d       	mov	r24, r15
 480:	80 5d       	subi	r24, 0xD0	; 208
 482:	0e 94 c4 01 	call	0x388	; 0x388 <putchar_lcd>
 486:	2c c0       	rjmp	.+88     	; 0x4e0 <__stack+0x81>
	}
	else if(a==0){
		putchar_lcd(b+48);
 488:	80 2f       	mov	r24, r16
 48a:	80 5d       	subi	r24, 0xD0	; 208
 48c:	0e 94 c4 01 	call	0x388	; 0x388 <putchar_lcd>
	    putchar_lcd(c+48);
 490:	81 2f       	mov	r24, r17
 492:	80 5d       	subi	r24, 0xD0	; 208
 494:	0e 94 c4 01 	call	0x388	; 0x388 <putchar_lcd>
		putchar_lcd(d+48);
 498:	8e 2d       	mov	r24, r14
 49a:	80 5d       	subi	r24, 0xD0	; 208
 49c:	0e 94 c4 01 	call	0x388	; 0x388 <putchar_lcd>
		putchar_lcd(e+48);
 4a0:	8f 2d       	mov	r24, r15
 4a2:	80 5d       	subi	r24, 0xD0	; 208
 4a4:	0e 94 c4 01 	call	0x388	; 0x388 <putchar_lcd>
 4a8:	1b c0       	rjmp	.+54     	; 0x4e0 <__stack+0x81>
	}
	else if(a!=0 && b!=0 && c!=0 && d!=0){
 4aa:	30 97       	sbiw	r30, 0x00	; 0
 4ac:	c9 f0       	breq	.+50     	; 0x4e0 <__stack+0x81>
 4ae:	20 97       	sbiw	r28, 0x00	; 0
 4b0:	b9 f0       	breq	.+46     	; 0x4e0 <__stack+0x81>
 4b2:	41 15       	cp	r20, r1
 4b4:	51 05       	cpc	r21, r1
 4b6:	a1 f0       	breq	.+40     	; 0x4e0 <__stack+0x81>
		putchar_lcd(a+48);
 4b8:	82 2f       	mov	r24, r18
 4ba:	80 5d       	subi	r24, 0xD0	; 208
 4bc:	0e 94 c4 01 	call	0x388	; 0x388 <putchar_lcd>
		putchar_lcd(b+48);
 4c0:	80 2f       	mov	r24, r16
 4c2:	80 5d       	subi	r24, 0xD0	; 208
 4c4:	0e 94 c4 01 	call	0x388	; 0x388 <putchar_lcd>
	    putchar_lcd(c+48);
 4c8:	81 2f       	mov	r24, r17
 4ca:	80 5d       	subi	r24, 0xD0	; 208
 4cc:	0e 94 c4 01 	call	0x388	; 0x388 <putchar_lcd>
		putchar_lcd(d+48);
 4d0:	8e 2d       	mov	r24, r14
 4d2:	80 5d       	subi	r24, 0xD0	; 208
 4d4:	0e 94 c4 01 	call	0x388	; 0x388 <putchar_lcd>
		putchar_lcd(e+48);
 4d8:	8f 2d       	mov	r24, r15
 4da:	80 5d       	subi	r24, 0xD0	; 208
 4dc:	0e 94 c4 01 	call	0x388	; 0x388 <putchar_lcd>
	}
}
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	1f 91       	pop	r17
 4e6:	0f 91       	pop	r16
 4e8:	ff 90       	pop	r15
 4ea:	ef 90       	pop	r14
 4ec:	08 95       	ret

000004ee <putstr_lcd>:
putstr_lcd(unsigned char *str, unsigned int lenght){
 4ee:	ef 92       	push	r14
 4f0:	ff 92       	push	r15
 4f2:	0f 93       	push	r16
 4f4:	1f 93       	push	r17
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	7b 01       	movw	r14, r22
	unsigned int i;
	for(i=0;i<lenght;i++){
 4fc:	61 15       	cp	r22, r1
 4fe:	71 05       	cpc	r23, r1
 500:	99 f0       	breq	.+38     	; 0x528 <putstr_lcd+0x3a>
 502:	08 2f       	mov	r16, r24
 504:	19 2f       	mov	r17, r25
 506:	c0 e0       	ldi	r28, 0x00	; 0
 508:	d0 e0       	ldi	r29, 0x00	; 0
		if(*(str+i)>0){ 
 50a:	f8 01       	movw	r30, r16
 50c:	81 91       	ld	r24, Z+
 50e:	8f 01       	movw	r16, r30
 510:	88 23       	and	r24, r24
 512:	19 f0       	breq	.+6      	; 0x51a <putstr_lcd+0x2c>
			putchar_lcd(*(str+i));
 514:	0e 94 c4 01 	call	0x388	; 0x388 <putchar_lcd>
 518:	03 c0       	rjmp	.+6      	; 0x520 <putstr_lcd+0x32>
			}
		else putchar_lcd(0);	
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	0e 94 c4 01 	call	0x388	; 0x388 <putchar_lcd>
		putchar_lcd(e+48);
	}
}
putstr_lcd(unsigned char *str, unsigned int lenght){
	unsigned int i;
	for(i=0;i<lenght;i++){
 520:	21 96       	adiw	r28, 0x01	; 1
 522:	ce 15       	cp	r28, r14
 524:	df 05       	cpc	r29, r15
 526:	88 f3       	brcs	.-30     	; 0x50a <putstr_lcd+0x1c>
		if(*(str+i)>0){ 
			putchar_lcd(*(str+i));
			}
		else putchar_lcd(0);	
}
}
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	1f 91       	pop	r17
 52e:	0f 91       	pop	r16
 530:	ff 90       	pop	r15
 532:	ef 90       	pop	r14
 534:	08 95       	ret

00000536 <__udivmodhi4>:
 536:	aa 1b       	sub	r26, r26
 538:	bb 1b       	sub	r27, r27
 53a:	51 e1       	ldi	r21, 0x11	; 17
 53c:	07 c0       	rjmp	.+14     	; 0x54c <__udivmodhi4_ep>

0000053e <__udivmodhi4_loop>:
 53e:	aa 1f       	adc	r26, r26
 540:	bb 1f       	adc	r27, r27
 542:	a6 17       	cp	r26, r22
 544:	b7 07       	cpc	r27, r23
 546:	10 f0       	brcs	.+4      	; 0x54c <__udivmodhi4_ep>
 548:	a6 1b       	sub	r26, r22
 54a:	b7 0b       	sbc	r27, r23

0000054c <__udivmodhi4_ep>:
 54c:	88 1f       	adc	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	5a 95       	dec	r21
 552:	a9 f7       	brne	.-22     	; 0x53e <__udivmodhi4_loop>
 554:	80 95       	com	r24
 556:	90 95       	com	r25
 558:	bc 01       	movw	r22, r24
 55a:	cd 01       	movw	r24, r26
 55c:	08 95       	ret

0000055e <_exit>:
 55e:	f8 94       	cli

00000560 <__stop_program>:
 560:	ff cf       	rjmp	.-2      	; 0x560 <__stop_program>
