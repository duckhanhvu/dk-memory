
project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000002a  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000a2  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000063  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000160  00000000  00000000  000009d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000009d  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000002b  00000000  00000000  00000c05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
 */ 

#include <avr/io.h>
#include <avr/interrupt.h> 

ISR (INT0_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	8f 93       	push	r24
  7a:	9f 93       	push	r25
	if(OCR1A==1000) OCR1A=2000;
  7c:	8a b5       	in	r24, 0x2a	; 42
  7e:	9b b5       	in	r25, 0x2b	; 43
  80:	23 e0       	ldi	r18, 0x03	; 3
  82:	88 3e       	cpi	r24, 0xE8	; 232
  84:	92 07       	cpc	r25, r18
  86:	29 f4       	brne	.+10     	; 0x92 <__vector_1+0x26>
  88:	80 ed       	ldi	r24, 0xD0	; 208
  8a:	97 e0       	ldi	r25, 0x07	; 7
  8c:	9b bd       	out	0x2b, r25	; 43
  8e:	8a bd       	out	0x2a, r24	; 42
  90:	04 c0       	rjmp	.+8      	; 0x9a <__vector_1+0x2e>
	else OCR1A=1000;
  92:	88 ee       	ldi	r24, 0xE8	; 232
  94:	93 e0       	ldi	r25, 0x03	; 3
  96:	9b bd       	out	0x2b, r25	; 43
  98:	8a bd       	out	0x2a, r24	; 42
}
  9a:	9f 91       	pop	r25
  9c:	8f 91       	pop	r24
  9e:	2f 91       	pop	r18
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <main>:
int main(void)
{
	PORTD=0x00;
  aa:	12 ba       	out	0x12, r1	; 18
	DDRD=0x20;
  ac:	80 e2       	ldi	r24, 0x20	; 32
  ae:	81 bb       	out	0x11, r24	; 17
	
	TCCR1A=(1<<COM1A1)|(1<<WGM11);
  b0:	82 e8       	ldi	r24, 0x82	; 130
  b2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(1<<WGM13)|(1<<WGM12)|(1<<CS10);
  b4:	89 e1       	ldi	r24, 0x19	; 25
  b6:	8e bd       	out	0x2e, r24	; 46
	
	MCUCR=(1<<ISC01);
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	85 bf       	out	0x35, r24	; 53
	GICR=(1<<INT0);
  bc:	80 e4       	ldi	r24, 0x40	; 64
  be:	8b bf       	out	0x3b, r24	; 59
	
	OCR1A=1000;
  c0:	88 ee       	ldi	r24, 0xE8	; 232
  c2:	93 e0       	ldi	r25, 0x03	; 3
  c4:	9b bd       	out	0x2b, r25	; 43
  c6:	8a bd       	out	0x2a, r24	; 42
	ICR1=20000;
  c8:	80 e2       	ldi	r24, 0x20	; 32
  ca:	9e e4       	ldi	r25, 0x4E	; 78
  cc:	97 bd       	out	0x27, r25	; 39
  ce:	86 bd       	out	0x26, r24	; 38
	
	sei();
  d0:	78 94       	sei
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <main+0x28>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
