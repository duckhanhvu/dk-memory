
project 36.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000a8e  00000b22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000033  00800086  00800086  00000b48  2**0
                  ALLOC
  3 .stab         000017b8  00000000  00000000  00000b48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000061f  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  0000291f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000136  00000000  00000000  0000293f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000009ff  00000000  00000000  00002a75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000223  00000000  00000000  00003474  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000008e5  00000000  00000000  00003697  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000f0  00000000  00000000  00003f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000020b  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000004bd  00000000  00000000  00004277  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  00004734  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__vector_1>
   8:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3b       	cpi	r26, 0xB9	; 185
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6d 02 	call	0x4da	; 0x4da <main>
  8a:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_write_4>:



void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        
  92:	df 98       	cbi	0x1b, 7	; 27
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     
  94:	88 23       	and	r24, r24
  96:	0c f4       	brge	.+2      	; 0x9a <lcd_write_4+0x8>
  98:	df 9a       	sbi	0x1b, 7	; 27

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        
  9a:	de 98       	cbi	0x1b, 6	; 27
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
  9c:	86 fd       	sbrc	r24, 6
  9e:	de 9a       	sbi	0x1b, 6	; 27

    lcd_D5_port &= ~(1<<lcd_D5_bit);
  a0:	dd 98       	cbi	0x1b, 5	; 27
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
  a2:	85 fd       	sbrc	r24, 5
  a4:	dd 9a       	sbi	0x1b, 5	; 27

    lcd_D4_port &= ~(1<<lcd_D4_bit);
  a6:	dc 98       	cbi	0x1b, 4	; 27
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
  a8:	84 fd       	sbrc	r24, 4
  aa:	dc 9a       	sbi	0x1b, 4	; 27


                                                    
    lcd_E_port |= (1<<lcd_E_bit);                   
  ac:	d9 9a       	sbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <lcd_write_4+0x1e>
    _delay_us(1);                                   
    lcd_E_port &= ~(1<<lcd_E_bit);                  
  b0:	d9 98       	cbi	0x1b, 1	; 27
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcd_write_4+0x22>
    _delay_us(1);    
	
}
  b4:	08 95       	ret

000000b6 <lcd_write_instruction_4d>:
    lcd_write_4(theData << 4);                      
}


void lcd_write_instruction_4d(uint8_t theInstruction)
{
  b6:	1f 93       	push	r17
  b8:	18 2f       	mov	r17, r24
    lcd_RS_port &= ~(1<<lcd_RS_bit);                
  ba:	d8 98       	cbi	0x1b, 0	; 27
    lcd_E_port &= ~(1<<lcd_E_bit);                 
  bc:	d9 98       	cbi	0x1b, 1	; 27
    lcd_write_4(theInstruction);                   
  be:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_4>
    lcd_write_4(theInstruction << 4);               
  c2:	81 2f       	mov	r24, r17
  c4:	82 95       	swap	r24
  c6:	80 7f       	andi	r24, 0xF0	; 240
  c8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_4>
}
  cc:	1f 91       	pop	r17
  ce:	08 95       	ret

000000d0 <lcd_write_character_4d>:
        i++;
        _delay_us(80);                             
    }
}
void lcd_write_character_4d(uint8_t theData)
{
  d0:	1f 93       	push	r17
  d2:	18 2f       	mov	r17, r24
    lcd_RS_port |= (1<<lcd_RS_bit);                 
  d4:	d8 9a       	sbi	0x1b, 0	; 27
    lcd_E_port &= ~(1<<lcd_E_bit);                 
  d6:	d9 98       	cbi	0x1b, 1	; 27
    lcd_write_4(theData);                           
  d8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_4>
    lcd_write_4(theData << 4);                      
  dc:	81 2f       	mov	r24, r17
  de:	82 95       	swap	r24
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_4>
}
  e6:	1f 91       	pop	r17
  e8:	08 95       	ret

000000ea <lcd_write_string_4d>:
    _delay_us(80);                                  
}


void lcd_write_string_4d(uint8_t theString[])
{
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	df 93       	push	r29
  f0:	cf 93       	push	r28
  f2:	00 d0       	rcall	.+0      	; 0xf4 <lcd_write_string_4d+0xa>
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	8c 01       	movw	r16, r24
    volatile int i = 0;                            
  fa:	1a 82       	std	Y+2, r1	; 0x02
  fc:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
  fe:	e9 81       	ldd	r30, Y+1	; 0x01
 100:	fa 81       	ldd	r31, Y+2	; 0x02
 102:	e8 0f       	add	r30, r24
 104:	f9 1f       	adc	r31, r25
 106:	80 81       	ld	r24, Z
 108:	88 23       	and	r24, r24
 10a:	b9 f0       	breq	.+46     	; 0x13a <lcd_write_string_4d+0x50>
    {
        lcd_write_character_4d(theString[i]);
 10c:	e9 81       	ldd	r30, Y+1	; 0x01
 10e:	fa 81       	ldd	r31, Y+2	; 0x02
 110:	e0 0f       	add	r30, r16
 112:	f1 1f       	adc	r31, r17
 114:	80 81       	ld	r24, Z
 116:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
        i++;
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	9a 81       	ldd	r25, Y+2	; 0x02
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	9a 83       	std	Y+2, r25	; 0x02
 122:	89 83       	std	Y+1, r24	; 0x01
 124:	85 e3       	ldi	r24, 0x35	; 53
 126:	8a 95       	dec	r24
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_write_string_4d+0x3c>
 12a:	00 00       	nop


void lcd_write_string_4d(uint8_t theString[])
{
    volatile int i = 0;                            
    while (theString[i] != 0)
 12c:	e9 81       	ldd	r30, Y+1	; 0x01
 12e:	fa 81       	ldd	r31, Y+2	; 0x02
 130:	e0 0f       	add	r30, r16
 132:	f1 1f       	adc	r31, r17
 134:	80 81       	ld	r24, Z
 136:	88 23       	and	r24, r24
 138:	49 f7       	brne	.-46     	; 0x10c <lcd_write_string_4d+0x22>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(80);                             
    }
}
 13a:	0f 90       	pop	r0
 13c:	0f 90       	pop	r0
 13e:	cf 91       	pop	r28
 140:	df 91       	pop	r29
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	08 95       	ret

00000148 <lcd_init_4d>:
void LCD_goto(unsigned char dong, unsigned char cot);
void printnumber_lcd(int number);

void lcd_init_4d(void)
{
	lcd_D7_ddr |= (1<<lcd_D7_bit);                  // 4 data lines - output
 148:	d7 9a       	sbi	0x1a, 7	; 26
    lcd_D6_ddr |= (1<<lcd_D6_bit);
 14a:	d6 9a       	sbi	0x1a, 6	; 26
    lcd_D5_ddr |= (1<<lcd_D5_bit);
 14c:	d5 9a       	sbi	0x1a, 5	; 26
    lcd_D4_ddr |= (1<<lcd_D4_bit);
 14e:	d4 9a       	sbi	0x1a, 4	; 26
	
	lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
 150:	d1 9a       	sbi	0x1a, 1	; 26
    lcd_RS_ddr |= (1<<lcd_RS_bit);
 152:	d0 9a       	sbi	0x1a, 0	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	8f e4       	ldi	r24, 0x4F	; 79
 156:	93 ec       	ldi	r25, 0xC3	; 195
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_init_4d+0x10>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <lcd_init_4d+0x16>
 15e:	00 00       	nop
// Power-up delay
    _delay_ms(100);                                 



    lcd_RS_port &= ~(1<<lcd_RS_bit);                
 160:	d8 98       	cbi	0x1b, 0	; 27
    lcd_E_port &= ~(1<<lcd_E_bit);                  
 162:	d9 98       	cbi	0x1b, 1	; 27

/*
    lcd_write_4(lcd_FunctionReset);                 
    _delay_ms(10);                                  
*/
    lcd_write_4(lcd_FunctionReset);                 
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	95 e8       	ldi	r25, 0x85	; 133
 16c:	9a 95       	dec	r25
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_init_4d+0x24>
 170:	00 00       	nop
    _delay_us(200);                                 

    lcd_write_4(lcd_FunctionReset);                 
 172:	80 e3       	ldi	r24, 0x30	; 48
 174:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_4>
 178:	85 e8       	ldi	r24, 0x85	; 133
 17a:	8a 95       	dec	r24
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_init_4d+0x32>
 17e:	00 00       	nop
    _delay_us(200);                                 

   
    lcd_write_4(lcd_FunctionSet4bit);               
 180:	88 e2       	ldi	r24, 0x28	; 40
 182:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_4>
 186:	95 e3       	ldi	r25, 0x35	; 53
 188:	9a 95       	dec	r25
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_init_4d+0x40>
 18c:	00 00       	nop
    _delay_us(80);                                  

    lcd_write_instruction_4d(lcd_FunctionSet4bit);   
 18e:	88 e2       	ldi	r24, 0x28	; 40
 190:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_write_instruction_4d>
 194:	85 e3       	ldi	r24, 0x35	; 53
 196:	8a 95       	dec	r24
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_init_4d+0x4e>
 19a:	00 00       	nop
    _delay_us(80);                                  

    lcd_write_instruction_4d(lcd_Clear);             
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	8f ec       	ldi	r24, 0xCF	; 207
 1a4:	97 e0       	ldi	r25, 0x07	; 7
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_init_4d+0x5e>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_init_4d+0x64>
 1ac:	00 00       	nop
    _delay_ms(4); 


    lcd_write_instruction_4d(lcd_DisplayOff);        
 1ae:	88 e0       	ldi	r24, 0x08	; 8
 1b0:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	95 e3       	ldi	r25, 0x35	; 53
 1b6:	9a 95       	dec	r25
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_init_4d+0x6e>
 1ba:	00 00       	nop
    _delay_us(80);                                  




    lcd_write_instruction_4d(lcd_EntryMode);         
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_write_instruction_4d>
 1c2:	85 e3       	ldi	r24, 0x35	; 53
 1c4:	8a 95       	dec	r24
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init_4d+0x7c>
 1c8:	00 00       	nop
    _delay_us(80);                                  


    lcd_write_instruction_4d(lcd_DisplayOn);         
 1ca:	8c e0       	ldi	r24, 0x0C	; 12
 1cc:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_write_instruction_4d>
 1d0:	95 e3       	ldi	r25, 0x35	; 53
 1d2:	9a 95       	dec	r25
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_init_4d+0x8a>
 1d6:	00 00       	nop
    _delay_us(80);                                  
}
 1d8:	08 95       	ret

000001da <LCD_goto>:
                             
void LCD_goto(unsigned char dong, unsigned char cot)
{

	unsigned char x;
	x=64*(dong-1)+(cot-1)+0x80;
 1da:	82 95       	swap	r24
 1dc:	88 0f       	add	r24, r24
 1de:	88 0f       	add	r24, r24
 1e0:	80 7c       	andi	r24, 0xC0	; 192
 1e2:	86 0f       	add	r24, r22

	lcd_write_instruction_4d(x);
 1e4:	81 5c       	subi	r24, 0xC1	; 193
 1e6:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	83 ef       	ldi	r24, 0xF3	; 243
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_goto+0x14>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_goto+0x1a>
 1f4:	00 00       	nop
	
	_delay_ms(1);
	return;
}
 1f6:	08 95       	ret

000001f8 <printnumber_lcd>:
void printnumber_lcd(int number){
 1f8:	af 92       	push	r10
 1fa:	bf 92       	push	r11
 1fc:	cf 92       	push	r12
 1fe:	df 92       	push	r13
 200:	ef 92       	push	r14
 202:	ff 92       	push	r15
 204:	0f 93       	push	r16
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
	
		

		int a,b,c,d,e,f;
	    a=number/100000;
 20c:	6c 01       	movw	r12, r24
 20e:	b6 01       	movw	r22, r12
 210:	88 27       	eor	r24, r24
 212:	77 fd       	sbrc	r23, 7
 214:	80 95       	com	r24
 216:	98 2f       	mov	r25, r24
 218:	20 ea       	ldi	r18, 0xA0	; 160
 21a:	36 e8       	ldi	r19, 0x86	; 134
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__divmodsi4>
	    
		number=number%100000;
 224:	cb 01       	movw	r24, r22
	    b=number/10000;
 226:	60 e1       	ldi	r22, 0x10	; 16
 228:	77 e2       	ldi	r23, 0x27	; 39
 22a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__divmodhi4>
 22e:	f6 2e       	mov	r15, r22
 230:	46 2f       	mov	r20, r22
 232:	ea 01       	movw	r28, r20
 234:	6e 01       	movw	r12, r28
 236:	d7 2e       	mov	r13, r23
 238:	e6 01       	movw	r28, r12
	    
	    number=number%10000;
	    c=number/1000;
 23a:	68 ee       	ldi	r22, 0xE8	; 232
 23c:	73 e0       	ldi	r23, 0x03	; 3
 23e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__divmodhi4>
 242:	06 2f       	mov	r16, r22
 244:	e6 2f       	mov	r30, r22
 246:	f7 2f       	mov	r31, r23
	    	
	    number=number%1000;
	    d=number/100;
 248:	64 e6       	ldi	r22, 0x64	; 100
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__divmodhi4>
 250:	16 2f       	mov	r17, r22
 252:	a6 2e       	mov	r10, r22
 254:	b7 2e       	mov	r11, r23
	    	
	    number=number%100;
	   
        e=number/10;
 256:	6a e0       	ldi	r22, 0x0A	; 10
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__divmodhi4>
 25e:	d6 2e       	mov	r13, r22
 260:	46 2f       	mov	r20, r22
 262:	57 2f       	mov	r21, r23
		f=number%10;
 264:	e8 2e       	mov	r14, r24
	   
    if(a==0 && b==0 && c==0 && d==0 && e==0){
 266:	21 15       	cp	r18, r1
 268:	31 05       	cpc	r19, r1
 26a:	09 f0       	breq	.+2      	; 0x26e <printnumber_lcd+0x76>
 26c:	51 c0       	rjmp	.+162    	; 0x310 <printnumber_lcd+0x118>
 26e:	20 97       	sbiw	r28, 0x00	; 0
 270:	d1 f5       	brne	.+116    	; 0x2e6 <printnumber_lcd+0xee>
 272:	30 97       	sbiw	r30, 0x00	; 0
 274:	51 f4       	brne	.+20     	; 0x28a <printnumber_lcd+0x92>
 276:	a1 14       	cp	r10, r1
 278:	b1 04       	cpc	r11, r1
 27a:	39 f4       	brne	.+14     	; 0x28a <printnumber_lcd+0x92>
 27c:	41 15       	cp	r20, r1
 27e:	51 05       	cpc	r21, r1
 280:	21 f4       	brne	.+8      	; 0x28a <printnumber_lcd+0x92>
		lcd_write_character_4d(f+48);
 282:	80 5d       	subi	r24, 0xD0	; 208
 284:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
 288:	65 c0       	rjmp	.+202    	; 0x354 <printnumber_lcd+0x15c>
	}
	else if(a==0 && b==0 && c==0 && d==0){
 28a:	30 97       	sbiw	r30, 0x00	; 0
 28c:	61 f4       	brne	.+24     	; 0x2a6 <printnumber_lcd+0xae>
 28e:	a1 14       	cp	r10, r1
 290:	b1 04       	cpc	r11, r1
 292:	49 f4       	brne	.+18     	; 0x2a6 <printnumber_lcd+0xae>
		lcd_write_character_4d(e+48);
 294:	8d 2d       	mov	r24, r13
 296:	80 5d       	subi	r24, 0xD0	; 208
 298:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
		lcd_write_character_4d(f+48);
 29c:	8e 2d       	mov	r24, r14
 29e:	80 5d       	subi	r24, 0xD0	; 208
 2a0:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
 2a4:	57 c0       	rjmp	.+174    	; 0x354 <printnumber_lcd+0x15c>
	}
	else if(a==0 && b==0 && c==0){
 2a6:	30 97       	sbiw	r30, 0x00	; 0
 2a8:	69 f4       	brne	.+26     	; 0x2c4 <printnumber_lcd+0xcc>
		lcd_write_character_4d(d+48);
 2aa:	81 2f       	mov	r24, r17
 2ac:	80 5d       	subi	r24, 0xD0	; 208
 2ae:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
		lcd_write_character_4d(e+48);
 2b2:	8d 2d       	mov	r24, r13
 2b4:	80 5d       	subi	r24, 0xD0	; 208
 2b6:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
		lcd_write_character_4d(f+48);
 2ba:	8e 2d       	mov	r24, r14
 2bc:	80 5d       	subi	r24, 0xD0	; 208
 2be:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
 2c2:	48 c0       	rjmp	.+144    	; 0x354 <printnumber_lcd+0x15c>
	}
	else if(a==0 && b==0){
		
	    lcd_write_character_4d(c+48);
 2c4:	80 2f       	mov	r24, r16
 2c6:	80 5d       	subi	r24, 0xD0	; 208
 2c8:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
		lcd_write_character_4d(d+48);
 2cc:	81 2f       	mov	r24, r17
 2ce:	80 5d       	subi	r24, 0xD0	; 208
 2d0:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
		lcd_write_character_4d(e+48);
 2d4:	8d 2d       	mov	r24, r13
 2d6:	80 5d       	subi	r24, 0xD0	; 208
 2d8:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
		lcd_write_character_4d(f+48);
 2dc:	8e 2d       	mov	r24, r14
 2de:	80 5d       	subi	r24, 0xD0	; 208
 2e0:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
 2e4:	37 c0       	rjmp	.+110    	; 0x354 <printnumber_lcd+0x15c>
	}
	else if(a==0){
		
		lcd_write_character_4d(b+48);
 2e6:	8f 2d       	mov	r24, r15
 2e8:	80 5d       	subi	r24, 0xD0	; 208
 2ea:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
	    lcd_write_character_4d(c+48);
 2ee:	80 2f       	mov	r24, r16
 2f0:	80 5d       	subi	r24, 0xD0	; 208
 2f2:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
		lcd_write_character_4d(d+48);
 2f6:	81 2f       	mov	r24, r17
 2f8:	80 5d       	subi	r24, 0xD0	; 208
 2fa:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
		lcd_write_character_4d(e+48);
 2fe:	8d 2d       	mov	r24, r13
 300:	80 5d       	subi	r24, 0xD0	; 208
 302:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
		lcd_write_character_4d(f+48);
 306:	8e 2d       	mov	r24, r14
 308:	80 5d       	subi	r24, 0xD0	; 208
 30a:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
 30e:	22 c0       	rjmp	.+68     	; 0x354 <printnumber_lcd+0x15c>
	}
	else if(a!=0 && b!=0 && c!=0 && d!=0 && e!=0){ 
 310:	20 97       	sbiw	r28, 0x00	; 0
 312:	01 f1       	breq	.+64     	; 0x354 <printnumber_lcd+0x15c>
 314:	30 97       	sbiw	r30, 0x00	; 0
 316:	f1 f0       	breq	.+60     	; 0x354 <printnumber_lcd+0x15c>
 318:	a1 14       	cp	r10, r1
 31a:	b1 04       	cpc	r11, r1
 31c:	d9 f0       	breq	.+54     	; 0x354 <printnumber_lcd+0x15c>
 31e:	41 15       	cp	r20, r1
 320:	51 05       	cpc	r21, r1
 322:	c1 f0       	breq	.+48     	; 0x354 <printnumber_lcd+0x15c>
		lcd_write_character_4d(a+48);
 324:	82 2f       	mov	r24, r18
 326:	80 5d       	subi	r24, 0xD0	; 208
 328:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
		lcd_write_character_4d(b+48);
 32c:	8f 2d       	mov	r24, r15
 32e:	80 5d       	subi	r24, 0xD0	; 208
 330:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
	    lcd_write_character_4d(c+48);
 334:	80 2f       	mov	r24, r16
 336:	80 5d       	subi	r24, 0xD0	; 208
 338:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
		lcd_write_character_4d(d+48);
 33c:	81 2f       	mov	r24, r17
 33e:	80 5d       	subi	r24, 0xD0	; 208
 340:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
		lcd_write_character_4d(e+48);
 344:	8d 2d       	mov	r24, r13
 346:	80 5d       	subi	r24, 0xD0	; 208
 348:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
		lcd_write_character_4d(f+48);
 34c:	8e 2d       	mov	r24, r14
 34e:	80 5d       	subi	r24, 0xD0	; 208
 350:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
}
}
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	ff 90       	pop	r15
 35e:	ef 90       	pop	r14
 360:	df 90       	pop	r13
 362:	cf 90       	pop	r12
 364:	bf 90       	pop	r11
 366:	af 90       	pop	r10
 368:	08 95       	ret

0000036a <write>:
volatile unsigned char x;
volatile int val=0;
volatile int N_tong;
volatile int a=0;
void write(unsigned int i){
	CTRL_DDR=0xFF;
 36a:	2f ef       	ldi	r18, 0xFF	; 255
 36c:	2a bb       	out	0x1a, r18	; 26
	if(i==1){
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	91 05       	cpc	r25, r1
 372:	81 f4       	brne	.+32     	; 0x394 <write+0x2a>
	      setbit(CTRL_PORT, data);      
 374:	d9 9a       	sbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 376:	8d e0       	ldi	r24, 0x0D	; 13
 378:	8a 95       	dec	r24
 37a:	f1 f7       	brne	.-4      	; 0x378 <write+0xe>
 37c:	00 00       	nop
	      _delay_us(20);
          clearbit(CTRL_PORT,clk);    
 37e:	da 98       	cbi	0x1b, 2	; 27
 380:	86 e0       	ldi	r24, 0x06	; 6
 382:	8a 95       	dec	r24
 384:	f1 f7       	brne	.-4      	; 0x382 <write+0x18>
 386:	00 c0       	rjmp	.+0      	; 0x388 <write+0x1e>
          _delay_us(10);
          setbit(CTRL_PORT,clk);   
 388:	da 9a       	sbi	0x1b, 2	; 27
 38a:	86 e0       	ldi	r24, 0x06	; 6
 38c:	8a 95       	dec	r24
 38e:	f1 f7       	brne	.-4      	; 0x38c <write+0x22>
 390:	00 c0       	rjmp	.+0      	; 0x392 <write+0x28>
 392:	08 95       	ret
		  _delay_us(10);
	}
	if(i==0){
 394:	00 97       	sbiw	r24, 0x00	; 0
 396:	79 f4       	brne	.+30     	; 0x3b6 <write+0x4c>
	      clearbit(CTRL_PORT,clk);	
 398:	da 98       	cbi	0x1b, 2	; 27
 39a:	8d e0       	ldi	r24, 0x0D	; 13
 39c:	8a 95       	dec	r24
 39e:	f1 f7       	brne	.-4      	; 0x39c <write+0x32>
 3a0:	00 00       	nop
	      _delay_us(20);
          setbit(CTRL_PORT,clk);    
 3a2:	da 9a       	sbi	0x1b, 2	; 27
 3a4:	86 e0       	ldi	r24, 0x06	; 6
 3a6:	8a 95       	dec	r24
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <write+0x3c>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <write+0x42>
          _delay_us(10);
          clearbit(CTRL_PORT,clk);    		
 3ac:	da 98       	cbi	0x1b, 2	; 27
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	8a 95       	dec	r24
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <write+0x46>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <write+0x4c>
 3b6:	08 95       	ret

000003b8 <write_reference>:
		  _delay_us(10); 
	}	 
	}    
void write_reference(unsigned int number){
 3b8:	0f 93       	push	r16
 3ba:	1f 93       	push	r17
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
	   unsigned int i=0;
	   while(number!=0){
 3c0:	00 97       	sbiw	r24, 0x00	; 0
 3c2:	a1 f0       	breq	.+40     	; 0x3ec <write_reference+0x34>
          clearbit(CTRL_PORT,clk);    		
		  _delay_us(10); 
	}	 
	}    
void write_reference(unsigned int number){
	   unsigned int i=0;
 3c4:	20 e0       	ldi	r18, 0x00	; 0
 3c6:	30 e0       	ldi	r19, 0x00	; 0
	   while(number!=0){
		n[i]=number%2;	
 3c8:	66 e8       	ldi	r22, 0x86	; 134
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	ac 01       	movw	r20, r24
 3ce:	41 70       	andi	r20, 0x01	; 1
 3d0:	50 70       	andi	r21, 0x00	; 0
 3d2:	f9 01       	movw	r30, r18
 3d4:	ee 0f       	add	r30, r30
 3d6:	ff 1f       	adc	r31, r31
 3d8:	e6 0f       	add	r30, r22
 3da:	f7 1f       	adc	r31, r23
 3dc:	51 83       	std	Z+1, r21	; 0x01
 3de:	40 83       	st	Z, r20
		number=number/2;
 3e0:	96 95       	lsr	r25
 3e2:	87 95       	ror	r24
		i++;
 3e4:	2f 5f       	subi	r18, 0xFF	; 255
 3e6:	3f 4f       	sbci	r19, 0xFF	; 255
		  _delay_us(10); 
	}	 
	}    
void write_reference(unsigned int number){
	   unsigned int i=0;
	   while(number!=0){
 3e8:	00 97       	sbiw	r24, 0x00	; 0
 3ea:	81 f7       	brne	.-32     	; 0x3cc <write_reference+0x14>
          clearbit(CTRL_PORT,clk);    		
		  _delay_us(10); 
	}	 
	}    
void write_reference(unsigned int number){
	   unsigned int i=0;
 3ec:	c2 e1       	ldi	r28, 0x12	; 18
 3ee:	d0 e0       	ldi	r29, 0x00	; 0
		n[i]=number%2;	
		number=number/2;
		i++;
	  }        
	  for(i=18;i<22;i++){
		write(n[i]) ;
 3f0:	06 e8       	ldi	r16, 0x86	; 134
 3f2:	10 e0       	ldi	r17, 0x00	; 0
 3f4:	fe 01       	movw	r30, r28
 3f6:	ee 0f       	add	r30, r30
 3f8:	ff 1f       	adc	r31, r31
 3fa:	e0 0f       	add	r30, r16
 3fc:	f1 1f       	adc	r31, r17
 3fe:	80 81       	ld	r24, Z
 400:	91 81       	ldd	r25, Z+1	; 0x01
 402:	0e 94 b5 01 	call	0x36a	; 0x36a <write>
	   while(number!=0){
		n[i]=number%2;	
		number=number/2;
		i++;
	  }        
	  for(i=18;i<22;i++){
 406:	21 96       	adiw	r28, 0x01	; 1
 408:	c6 31       	cpi	r28, 0x16	; 22
 40a:	d1 05       	cpc	r29, r1
 40c:	99 f7       	brne	.-26     	; 0x3f4 <write_reference+0x3c>
		write(n[i]) ;
	  }
	
	}
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	08 95       	ret

00000418 <write_N_and_A_divide>:
void write_N_and_A_divide(unsigned int Nnumber, unsigned int Anumber){
 418:	0f 93       	push	r16
 41a:	1f 93       	push	r17
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
	   unsigned int i=0;
	   unsigned int j=0;
	   while(Nnumber!=0){
 420:	00 97       	sbiw	r24, 0x00	; 0
 422:	a1 f0       	breq	.+40     	; 0x44c <write_N_and_A_divide+0x34>
		write(n[i]) ;
	  }
	
	}
void write_N_and_A_divide(unsigned int Nnumber, unsigned int Anumber){
	   unsigned int i=0;
 424:	20 e0       	ldi	r18, 0x00	; 0
 426:	30 e0       	ldi	r19, 0x00	; 0
	   unsigned int j=0;
	   while(Nnumber!=0){
		n[i]=Nnumber%2;	
 428:	a6 e8       	ldi	r26, 0x86	; 134
 42a:	b0 e0       	ldi	r27, 0x00	; 0
 42c:	ac 01       	movw	r20, r24
 42e:	41 70       	andi	r20, 0x01	; 1
 430:	50 70       	andi	r21, 0x00	; 0
 432:	f9 01       	movw	r30, r18
 434:	ee 0f       	add	r30, r30
 436:	ff 1f       	adc	r31, r31
 438:	ea 0f       	add	r30, r26
 43a:	fb 1f       	adc	r31, r27
 43c:	51 83       	std	Z+1, r21	; 0x01
 43e:	40 83       	st	Z, r20
		Nnumber=Nnumber/2;
 440:	96 95       	lsr	r25
 442:	87 95       	ror	r24
		i++;
 444:	2f 5f       	subi	r18, 0xFF	; 255
 446:	3f 4f       	sbci	r19, 0xFF	; 255
	
	}
void write_N_and_A_divide(unsigned int Nnumber, unsigned int Anumber){
	   unsigned int i=0;
	   unsigned int j=0;
	   while(Nnumber!=0){
 448:	00 97       	sbiw	r24, 0x00	; 0
 44a:	81 f7       	brne	.-32     	; 0x42c <write_N_and_A_divide+0x14>
		n[i]=Nnumber%2;	
		Nnumber=Nnumber/2;
		i++;
	  }
	   while(Anumber!=0){
 44c:	61 15       	cp	r22, r1
 44e:	71 05       	cpc	r23, r1
 450:	a1 f0       	breq	.+40     	; 0x47a <__stack+0x1b>
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	90 e0       	ldi	r25, 0x00	; 0
		n[j]=Anumber%2;	
 456:	46 e8       	ldi	r20, 0x86	; 134
 458:	50 e0       	ldi	r21, 0x00	; 0
 45a:	9b 01       	movw	r18, r22
 45c:	21 70       	andi	r18, 0x01	; 1
 45e:	30 70       	andi	r19, 0x00	; 0
 460:	fc 01       	movw	r30, r24
 462:	ee 0f       	add	r30, r30
 464:	ff 1f       	adc	r31, r31
 466:	e4 0f       	add	r30, r20
 468:	f5 1f       	adc	r31, r21
 46a:	31 83       	std	Z+1, r19	; 0x01
 46c:	20 83       	st	Z, r18
		Anumber=Anumber/2;
 46e:	76 95       	lsr	r23
 470:	67 95       	ror	r22
		j++;
 472:	01 96       	adiw	r24, 0x01	; 1
	   while(Nnumber!=0){
		n[i]=Nnumber%2;	
		Nnumber=Nnumber/2;
		i++;
	  }
	   while(Anumber!=0){
 474:	61 15       	cp	r22, r1
 476:	71 05       	cpc	r23, r1
 478:	81 f7       	brne	.-32     	; 0x45a <write_N_and_A_divide+0x42>
 47a:	c0 e0       	ldi	r28, 0x00	; 0
 47c:	d0 e0       	ldi	r29, 0x00	; 0
		n[j]=Anumber%2;	
		Anumber=Anumber/2;
		j++;
	  }
	  for(i=0;i<7;i++){
		write(n[i]) ;
 47e:	06 e8       	ldi	r16, 0x86	; 134
 480:	10 e0       	ldi	r17, 0x00	; 0
 482:	fe 01       	movw	r30, r28
 484:	ee 0f       	add	r30, r30
 486:	ff 1f       	adc	r31, r31
 488:	e0 0f       	add	r30, r16
 48a:	f1 1f       	adc	r31, r17
 48c:	80 81       	ld	r24, Z
 48e:	91 81       	ldd	r25, Z+1	; 0x01
 490:	0e 94 b5 01 	call	0x36a	; 0x36a <write>
	   while(Anumber!=0){
		n[j]=Anumber%2;	
		Anumber=Anumber/2;
		j++;
	  }
	  for(i=0;i<7;i++){
 494:	21 96       	adiw	r28, 0x01	; 1
 496:	c7 30       	cpi	r28, 0x07	; 7
 498:	d1 05       	cpc	r29, r1
 49a:	99 f7       	brne	.-26     	; 0x482 <__stack+0x23>
 49c:	c7 e0       	ldi	r28, 0x07	; 7
 49e:	d0 e0       	ldi	r29, 0x00	; 0
		write(n[i]) ;
	  }
	  for(j=7;j<18;j++){
		 write(n[j]); 
 4a0:	06 e8       	ldi	r16, 0x86	; 134
 4a2:	10 e0       	ldi	r17, 0x00	; 0
 4a4:	fe 01       	movw	r30, r28
 4a6:	ee 0f       	add	r30, r30
 4a8:	ff 1f       	adc	r31, r31
 4aa:	e0 0f       	add	r30, r16
 4ac:	f1 1f       	adc	r31, r17
 4ae:	80 81       	ld	r24, Z
 4b0:	91 81       	ldd	r25, Z+1	; 0x01
 4b2:	0e 94 b5 01 	call	0x36a	; 0x36a <write>
		j++;
	  }
	  for(i=0;i<7;i++){
		write(n[i]) ;
	  }
	  for(j=7;j<18;j++){
 4b6:	21 96       	adiw	r28, 0x01	; 1
 4b8:	c2 31       	cpi	r28, 0x12	; 18
 4ba:	d1 05       	cpc	r29, r1
 4bc:	99 f7       	brne	.-26     	; 0x4a4 <__stack+0x45>
		 write(n[j]); 
	  }
}
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	1f 91       	pop	r17
 4c4:	0f 91       	pop	r16
 4c6:	08 95       	ret

000004c8 <reset_pulse>:
void reset_pulse(void){
	CTRL_DDR=0xFF;
 4c8:	8f ef       	ldi	r24, 0xFF	; 255
 4ca:	8a bb       	out	0x1a, r24	; 26
	setbit(CTRL_PORT,en);   
 4cc:	db 9a       	sbi	0x1b, 3	; 27
 4ce:	8e e2       	ldi	r24, 0x2E	; 46
 4d0:	8a 95       	dec	r24
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <reset_pulse+0x8>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <reset_pulse+0xe>
    _delay_us(70);
    clearbit(CTRL_PORT,en);    
 4d6:	db 98       	cbi	0x1b, 3	; 27
}
 4d8:	08 95       	ret

000004da <main>:

int main()
{
 4da:	ef 92       	push	r14
 4dc:	ff 92       	push	r15
 4de:	0f 93       	push	r16
 4e0:	1f 93       	push	r17
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
	uint8_t b=0;
	DDRD=0x00;
 4e6:	11 ba       	out	0x11, r1	; 17
	PORTD=0xFF;	
 4e8:	8f ef       	ldi	r24, 0xFF	; 255
 4ea:	82 bb       	out	0x12, r24	; 18
	
    DDRA=0xff; 
 4ec:	8a bb       	out	0x1a, r24	; 26
    DDRC=0x07; 
 4ee:	87 e0       	ldi	r24, 0x07	; 7
 4f0:	84 bb       	out	0x14, r24	; 20
    MCUCR|=(1<<ISC11)|(1<<ISC01);      
 4f2:	85 b7       	in	r24, 0x35	; 53
 4f4:	8a 60       	ori	r24, 0x0A	; 10
 4f6:	85 bf       	out	0x35, r24	; 53
    GICR    |=(1<<INT1)|(1<<INT0);   
 4f8:	8b b7       	in	r24, 0x3b	; 59
 4fa:	80 6c       	ori	r24, 0xC0	; 192
 4fc:	8b bf       	out	0x3b, r24	; 59
    lcd_init_4d(); 
 4fe:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_init_4d>
    sei();  
 502:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 504:	87 ea       	ldi	r24, 0xA7	; 167
 506:	91 e6       	ldi	r25, 0x61	; 97
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	f1 f7       	brne	.-4      	; 0x508 <main+0x2e>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <main+0x34>
 50e:	00 00       	nop
    _delay_ms(50); 


	
	LCD_goto(1,1);
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_goto>
	lcd_write_string_4d("tan so : ");
 518:	80 e6       	ldi	r24, 0x60	; 96
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 75 00 	call	0xea	; 0xea <lcd_write_string_4d>
	printnumber_lcd(211);
 520:	83 ed       	ldi	r24, 0xD3	; 211
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <printnumber_lcd>
	val=eeprom_read_byte((uint8_t*)46);
	N_tong=(32*128 + val)*100*50*pow(10,-3);
	LCD_goto(1,9);
	printnumber_lcd(N_tong);
	*/
	LCD_goto(1,13);
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	6d e0       	ldi	r22, 0x0D	; 13
 52c:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_goto>
	lcd_write_string_4d("MHz");
 530:	8a e6       	ldi	r24, 0x6A	; 106
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 75 00 	call	0xea	; 0xea <lcd_write_string_4d>
	LCD_goto(2,1);
 538:	82 e0       	ldi	r24, 0x02	; 2
 53a:	61 e0       	ldi	r22, 0x01	; 1
 53c:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_goto>
	lcd_write_string_4d("chon tan so");
 540:	8e e6       	ldi	r24, 0x6E	; 110
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 75 00 	call	0xea	; 0xea <lcd_write_string_4d>
	
    while(1){
	 if(bit_is_clear(PIND,PD4)){
		 LCD_goto(2,1);
		 lcd_write_string_4d("chon tan so");
 548:	ce e6       	ldi	r28, 0x6E	; 110
 54a:	d0 e0       	ldi	r29, 0x00	; 0
	 if(bit_is_clear(PIND,PD1)){
		 lcd_write_instruction_4d(lcd_Clear); 
		 _delay_ms(10);
		 eeprom_write_byte((uint8_t *)46,val);
		 LCD_goto(1,1);
	     lcd_write_string_4d("luu tan so ");
 54c:	0a e7       	ldi	r16, 0x7A	; 122
 54e:	10 e0       	ldi	r17, 0x00	; 0
		 LCD_goto(2,1);
		 printnumber_lcd(val);
		 LCD_goto(2,4);
		 lcd_write_string_4d("MHz");
 550:	0f 2e       	mov	r0, r31
 552:	fa e6       	ldi	r31, 0x6A	; 106
 554:	ef 2e       	mov	r14, r31
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	ff 2e       	mov	r15, r31
 55a:	f0 2d       	mov	r31, r0
	lcd_write_string_4d("MHz");
	LCD_goto(2,1);
	lcd_write_string_4d("chon tan so");
	
    while(1){
	 if(bit_is_clear(PIND,PD4)){
 55c:	84 99       	sbic	0x10, 4	; 16
 55e:	13 c0       	rjmp	.+38     	; 0x586 <main+0xac>
		 LCD_goto(2,1);
 560:	82 e0       	ldi	r24, 0x02	; 2
 562:	61 e0       	ldi	r22, 0x01	; 1
 564:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_goto>
		 lcd_write_string_4d("chon tan so");
 568:	ce 01       	movw	r24, r28
 56a:	0e 94 75 00 	call	0xea	; 0xea <lcd_write_string_4d>
		 write_N_and_A_divide(32,val);
 56e:	60 91 b2 00 	lds	r22, 0x00B2
 572:	70 91 b3 00 	lds	r23, 0x00B3
 576:	80 e2       	ldi	r24, 0x20	; 32
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 0c 02 	call	0x418	; 0x418 <write_N_and_A_divide>
		 write_reference(0b0010);
 57e:	82 e0       	ldi	r24, 0x02	; 2
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <write_reference>
     }
	 if(bit_is_clear(PIND,PD1)){
 586:	81 99       	sbic	0x10, 1	; 16
 588:	e9 cf       	rjmp	.-46     	; 0x55c <main+0x82>
		 lcd_write_instruction_4d(lcd_Clear); 
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_write_instruction_4d>
 590:	87 e8       	ldi	r24, 0x87	; 135
 592:	93 e1       	ldi	r25, 0x13	; 19
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <main+0xba>
 598:	00 c0       	rjmp	.+0      	; 0x59a <main+0xc0>
 59a:	00 00       	nop
		 _delay_ms(10);
		 eeprom_write_byte((uint8_t *)46,val);
 59c:	60 91 b2 00 	lds	r22, 0x00B2
 5a0:	70 91 b3 00 	lds	r23, 0x00B3
 5a4:	8e e2       	ldi	r24, 0x2E	; 46
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 38 05 	call	0xa70	; 0xa70 <__eewr_byte_m16>
		 LCD_goto(1,1);
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	61 e0       	ldi	r22, 0x01	; 1
 5b0:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_goto>
	     lcd_write_string_4d("luu tan so ");
 5b4:	c8 01       	movw	r24, r16
 5b6:	0e 94 75 00 	call	0xea	; 0xea <lcd_write_string_4d>
		 LCD_goto(2,1);
 5ba:	82 e0       	ldi	r24, 0x02	; 2
 5bc:	61 e0       	ldi	r22, 0x01	; 1
 5be:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_goto>
		 printnumber_lcd(val);
 5c2:	80 91 b2 00 	lds	r24, 0x00B2
 5c6:	90 91 b3 00 	lds	r25, 0x00B3
 5ca:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <printnumber_lcd>
		 LCD_goto(2,4);
 5ce:	82 e0       	ldi	r24, 0x02	; 2
 5d0:	64 e0       	ldi	r22, 0x04	; 4
 5d2:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_goto>
		 lcd_write_string_4d("MHz");
 5d6:	c7 01       	movw	r24, r14
 5d8:	0e 94 75 00 	call	0xea	; 0xea <lcd_write_string_4d>
 5dc:	bf cf       	rjmp	.-130    	; 0x55c <main+0x82>

000005de <__vector_1>:
	 }
   } 
return 0;
}

ISR(INT0_vect){
 5de:	1f 92       	push	r1
 5e0:	0f 92       	push	r0
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	0f 92       	push	r0
 5e6:	11 24       	eor	r1, r1
 5e8:	2f 93       	push	r18
 5ea:	3f 93       	push	r19
 5ec:	4f 93       	push	r20
 5ee:	5f 93       	push	r21
 5f0:	6f 93       	push	r22
 5f2:	7f 93       	push	r23
 5f4:	8f 93       	push	r24
 5f6:	9f 93       	push	r25
 5f8:	af 93       	push	r26
 5fa:	bf 93       	push	r27
 5fc:	ef 93       	push	r30
 5fe:	ff 93       	push	r31
	val++;
 600:	80 91 b2 00 	lds	r24, 0x00B2
 604:	90 91 b3 00 	lds	r25, 0x00B3
 608:	01 96       	adiw	r24, 0x01	; 1
 60a:	90 93 b3 00 	sts	0x00B3, r25
 60e:	80 93 b2 00 	sts	0x00B2, r24
    if(val>127){
 612:	80 91 b2 00 	lds	r24, 0x00B2
 616:	90 91 b3 00 	lds	r25, 0x00B3
 61a:	80 38       	cpi	r24, 0x80	; 128
 61c:	91 05       	cpc	r25, r1
 61e:	24 f0       	brlt	.+8      	; 0x628 <__vector_1+0x4a>
	val =0;
 620:	10 92 b3 00 	sts	0x00B3, r1
 624:	10 92 b2 00 	sts	0x00B2, r1
	}
    N_tong=(32*128 + val)*100*50*pow(10,-3);
 628:	20 91 b2 00 	lds	r18, 0x00B2
 62c:	30 91 b3 00 	lds	r19, 0x00B3
 630:	20 50       	subi	r18, 0x00	; 0
 632:	30 4f       	sbci	r19, 0xF0	; 240
 634:	88 e8       	ldi	r24, 0x88	; 136
 636:	93 e1       	ldi	r25, 0x13	; 19
 638:	28 9f       	mul	r18, r24
 63a:	b0 01       	movw	r22, r0
 63c:	29 9f       	mul	r18, r25
 63e:	70 0d       	add	r23, r0
 640:	38 9f       	mul	r19, r24
 642:	70 0d       	add	r23, r0
 644:	11 24       	eor	r1, r1
 646:	88 27       	eor	r24, r24
 648:	77 fd       	sbrc	r23, 7
 64a:	80 95       	com	r24
 64c:	98 2f       	mov	r25, r24
 64e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__floatsisf>
 652:	2f e6       	ldi	r18, 0x6F	; 111
 654:	32 e1       	ldi	r19, 0x12	; 18
 656:	43 e8       	ldi	r20, 0x83	; 131
 658:	5a e3       	ldi	r21, 0x3A	; 58
 65a:	0e 94 49 04 	call	0x892	; 0x892 <__mulsf3>
 65e:	0e 94 b2 03 	call	0x764	; 0x764 <__fixsfsi>
 662:	70 93 b8 00 	sts	0x00B8, r23
 666:	60 93 b7 00 	sts	0x00B7, r22
	
	LCD_goto(1,9);
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	69 e0       	ldi	r22, 0x09	; 9
 66e:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_goto>
	printnumber_lcd(a);
 672:	80 91 b4 00 	lds	r24, 0x00B4
 676:	90 91 b5 00 	lds	r25, 0x00B5
 67a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <printnumber_lcd>
}
 67e:	ff 91       	pop	r31
 680:	ef 91       	pop	r30
 682:	bf 91       	pop	r27
 684:	af 91       	pop	r26
 686:	9f 91       	pop	r25
 688:	8f 91       	pop	r24
 68a:	7f 91       	pop	r23
 68c:	6f 91       	pop	r22
 68e:	5f 91       	pop	r21
 690:	4f 91       	pop	r20
 692:	3f 91       	pop	r19
 694:	2f 91       	pop	r18
 696:	0f 90       	pop	r0
 698:	0f be       	out	0x3f, r0	; 63
 69a:	0f 90       	pop	r0
 69c:	1f 90       	pop	r1
 69e:	18 95       	reti

000006a0 <__vector_2>:
ISR(INT1_vect){
 6a0:	1f 92       	push	r1
 6a2:	0f 92       	push	r0
 6a4:	0f b6       	in	r0, 0x3f	; 63
 6a6:	0f 92       	push	r0
 6a8:	11 24       	eor	r1, r1
 6aa:	2f 93       	push	r18
 6ac:	3f 93       	push	r19
 6ae:	4f 93       	push	r20
 6b0:	5f 93       	push	r21
 6b2:	6f 93       	push	r22
 6b4:	7f 93       	push	r23
 6b6:	8f 93       	push	r24
 6b8:	9f 93       	push	r25
 6ba:	af 93       	push	r26
 6bc:	bf 93       	push	r27
 6be:	ef 93       	push	r30
 6c0:	ff 93       	push	r31
	val--;
 6c2:	80 91 b2 00 	lds	r24, 0x00B2
 6c6:	90 91 b3 00 	lds	r25, 0x00B3
 6ca:	01 97       	sbiw	r24, 0x01	; 1
 6cc:	90 93 b3 00 	sts	0x00B3, r25
 6d0:	80 93 b2 00 	sts	0x00B2, r24
	if(val<0){
 6d4:	80 91 b2 00 	lds	r24, 0x00B2
 6d8:	90 91 b3 00 	lds	r25, 0x00B3
 6dc:	99 23       	and	r25, r25
 6de:	34 f4       	brge	.+12     	; 0x6ec <__vector_2+0x4c>
		val=127;
 6e0:	8f e7       	ldi	r24, 0x7F	; 127
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	90 93 b3 00 	sts	0x00B3, r25
 6e8:	80 93 b2 00 	sts	0x00B2, r24
	}
	N_tong=(32*128 + val)*100*50*pow(10,-3);
 6ec:	20 91 b2 00 	lds	r18, 0x00B2
 6f0:	30 91 b3 00 	lds	r19, 0x00B3
 6f4:	20 50       	subi	r18, 0x00	; 0
 6f6:	30 4f       	sbci	r19, 0xF0	; 240
 6f8:	88 e8       	ldi	r24, 0x88	; 136
 6fa:	93 e1       	ldi	r25, 0x13	; 19
 6fc:	28 9f       	mul	r18, r24
 6fe:	b0 01       	movw	r22, r0
 700:	29 9f       	mul	r18, r25
 702:	70 0d       	add	r23, r0
 704:	38 9f       	mul	r19, r24
 706:	70 0d       	add	r23, r0
 708:	11 24       	eor	r1, r1
 70a:	88 27       	eor	r24, r24
 70c:	77 fd       	sbrc	r23, 7
 70e:	80 95       	com	r24
 710:	98 2f       	mov	r25, r24
 712:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__floatsisf>
 716:	2f e6       	ldi	r18, 0x6F	; 111
 718:	32 e1       	ldi	r19, 0x12	; 18
 71a:	43 e8       	ldi	r20, 0x83	; 131
 71c:	5a e3       	ldi	r21, 0x3A	; 58
 71e:	0e 94 49 04 	call	0x892	; 0x892 <__mulsf3>
 722:	0e 94 b2 03 	call	0x764	; 0x764 <__fixsfsi>
 726:	70 93 b8 00 	sts	0x00B8, r23
 72a:	60 93 b7 00 	sts	0x00B7, r22
	
	LCD_goto(1,9);
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	69 e0       	ldi	r22, 0x09	; 9
 732:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_goto>
	printnumber_lcd(a);
 736:	80 91 b4 00 	lds	r24, 0x00B4
 73a:	90 91 b5 00 	lds	r25, 0x00B5
 73e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <printnumber_lcd>
 742:	ff 91       	pop	r31
 744:	ef 91       	pop	r30
 746:	bf 91       	pop	r27
 748:	af 91       	pop	r26
 74a:	9f 91       	pop	r25
 74c:	8f 91       	pop	r24
 74e:	7f 91       	pop	r23
 750:	6f 91       	pop	r22
 752:	5f 91       	pop	r21
 754:	4f 91       	pop	r20
 756:	3f 91       	pop	r19
 758:	2f 91       	pop	r18
 75a:	0f 90       	pop	r0
 75c:	0f be       	out	0x3f, r0	; 63
 75e:	0f 90       	pop	r0
 760:	1f 90       	pop	r1
 762:	18 95       	reti

00000764 <__fixsfsi>:
 764:	04 d0       	rcall	.+8      	; 0x76e <__fixunssfsi>
 766:	68 94       	set
 768:	b1 11       	cpse	r27, r1
 76a:	8d c0       	rjmp	.+282    	; 0x886 <__fp_szero>
 76c:	08 95       	ret

0000076e <__fixunssfsi>:
 76e:	70 d0       	rcall	.+224    	; 0x850 <__fp_splitA>
 770:	88 f0       	brcs	.+34     	; 0x794 <__fixunssfsi+0x26>
 772:	9f 57       	subi	r25, 0x7F	; 127
 774:	90 f0       	brcs	.+36     	; 0x79a <__fixunssfsi+0x2c>
 776:	b9 2f       	mov	r27, r25
 778:	99 27       	eor	r25, r25
 77a:	b7 51       	subi	r27, 0x17	; 23
 77c:	a0 f0       	brcs	.+40     	; 0x7a6 <__fixunssfsi+0x38>
 77e:	d1 f0       	breq	.+52     	; 0x7b4 <__fixunssfsi+0x46>
 780:	66 0f       	add	r22, r22
 782:	77 1f       	adc	r23, r23
 784:	88 1f       	adc	r24, r24
 786:	99 1f       	adc	r25, r25
 788:	1a f0       	brmi	.+6      	; 0x790 <__fixunssfsi+0x22>
 78a:	ba 95       	dec	r27
 78c:	c9 f7       	brne	.-14     	; 0x780 <__fixunssfsi+0x12>
 78e:	12 c0       	rjmp	.+36     	; 0x7b4 <__fixunssfsi+0x46>
 790:	b1 30       	cpi	r27, 0x01	; 1
 792:	81 f0       	breq	.+32     	; 0x7b4 <__fixunssfsi+0x46>
 794:	77 d0       	rcall	.+238    	; 0x884 <__fp_zero>
 796:	b1 e0       	ldi	r27, 0x01	; 1
 798:	08 95       	ret
 79a:	74 c0       	rjmp	.+232    	; 0x884 <__fp_zero>
 79c:	67 2f       	mov	r22, r23
 79e:	78 2f       	mov	r23, r24
 7a0:	88 27       	eor	r24, r24
 7a2:	b8 5f       	subi	r27, 0xF8	; 248
 7a4:	39 f0       	breq	.+14     	; 0x7b4 <__fixunssfsi+0x46>
 7a6:	b9 3f       	cpi	r27, 0xF9	; 249
 7a8:	cc f3       	brlt	.-14     	; 0x79c <__fixunssfsi+0x2e>
 7aa:	86 95       	lsr	r24
 7ac:	77 95       	ror	r23
 7ae:	67 95       	ror	r22
 7b0:	b3 95       	inc	r27
 7b2:	d9 f7       	brne	.-10     	; 0x7aa <__fixunssfsi+0x3c>
 7b4:	3e f4       	brtc	.+14     	; 0x7c4 <__fixunssfsi+0x56>
 7b6:	90 95       	com	r25
 7b8:	80 95       	com	r24
 7ba:	70 95       	com	r23
 7bc:	61 95       	neg	r22
 7be:	7f 4f       	sbci	r23, 0xFF	; 255
 7c0:	8f 4f       	sbci	r24, 0xFF	; 255
 7c2:	9f 4f       	sbci	r25, 0xFF	; 255
 7c4:	08 95       	ret

000007c6 <__floatunsisf>:
 7c6:	e8 94       	clt
 7c8:	09 c0       	rjmp	.+18     	; 0x7dc <__floatsisf+0x12>

000007ca <__floatsisf>:
 7ca:	97 fb       	bst	r25, 7
 7cc:	3e f4       	brtc	.+14     	; 0x7dc <__floatsisf+0x12>
 7ce:	90 95       	com	r25
 7d0:	80 95       	com	r24
 7d2:	70 95       	com	r23
 7d4:	61 95       	neg	r22
 7d6:	7f 4f       	sbci	r23, 0xFF	; 255
 7d8:	8f 4f       	sbci	r24, 0xFF	; 255
 7da:	9f 4f       	sbci	r25, 0xFF	; 255
 7dc:	99 23       	and	r25, r25
 7de:	a9 f0       	breq	.+42     	; 0x80a <__floatsisf+0x40>
 7e0:	f9 2f       	mov	r31, r25
 7e2:	96 e9       	ldi	r25, 0x96	; 150
 7e4:	bb 27       	eor	r27, r27
 7e6:	93 95       	inc	r25
 7e8:	f6 95       	lsr	r31
 7ea:	87 95       	ror	r24
 7ec:	77 95       	ror	r23
 7ee:	67 95       	ror	r22
 7f0:	b7 95       	ror	r27
 7f2:	f1 11       	cpse	r31, r1
 7f4:	f8 cf       	rjmp	.-16     	; 0x7e6 <__floatsisf+0x1c>
 7f6:	fa f4       	brpl	.+62     	; 0x836 <__floatsisf+0x6c>
 7f8:	bb 0f       	add	r27, r27
 7fa:	11 f4       	brne	.+4      	; 0x800 <__floatsisf+0x36>
 7fc:	60 ff       	sbrs	r22, 0
 7fe:	1b c0       	rjmp	.+54     	; 0x836 <__floatsisf+0x6c>
 800:	6f 5f       	subi	r22, 0xFF	; 255
 802:	7f 4f       	sbci	r23, 0xFF	; 255
 804:	8f 4f       	sbci	r24, 0xFF	; 255
 806:	9f 4f       	sbci	r25, 0xFF	; 255
 808:	16 c0       	rjmp	.+44     	; 0x836 <__floatsisf+0x6c>
 80a:	88 23       	and	r24, r24
 80c:	11 f0       	breq	.+4      	; 0x812 <__floatsisf+0x48>
 80e:	96 e9       	ldi	r25, 0x96	; 150
 810:	11 c0       	rjmp	.+34     	; 0x834 <__floatsisf+0x6a>
 812:	77 23       	and	r23, r23
 814:	21 f0       	breq	.+8      	; 0x81e <__floatsisf+0x54>
 816:	9e e8       	ldi	r25, 0x8E	; 142
 818:	87 2f       	mov	r24, r23
 81a:	76 2f       	mov	r23, r22
 81c:	05 c0       	rjmp	.+10     	; 0x828 <__floatsisf+0x5e>
 81e:	66 23       	and	r22, r22
 820:	71 f0       	breq	.+28     	; 0x83e <__floatsisf+0x74>
 822:	96 e8       	ldi	r25, 0x86	; 134
 824:	86 2f       	mov	r24, r22
 826:	70 e0       	ldi	r23, 0x00	; 0
 828:	60 e0       	ldi	r22, 0x00	; 0
 82a:	2a f0       	brmi	.+10     	; 0x836 <__floatsisf+0x6c>
 82c:	9a 95       	dec	r25
 82e:	66 0f       	add	r22, r22
 830:	77 1f       	adc	r23, r23
 832:	88 1f       	adc	r24, r24
 834:	da f7       	brpl	.-10     	; 0x82c <__floatsisf+0x62>
 836:	88 0f       	add	r24, r24
 838:	96 95       	lsr	r25
 83a:	87 95       	ror	r24
 83c:	97 f9       	bld	r25, 7
 83e:	08 95       	ret

00000840 <__fp_split3>:
 840:	57 fd       	sbrc	r21, 7
 842:	90 58       	subi	r25, 0x80	; 128
 844:	44 0f       	add	r20, r20
 846:	55 1f       	adc	r21, r21
 848:	59 f0       	breq	.+22     	; 0x860 <__fp_splitA+0x10>
 84a:	5f 3f       	cpi	r21, 0xFF	; 255
 84c:	71 f0       	breq	.+28     	; 0x86a <__fp_splitA+0x1a>
 84e:	47 95       	ror	r20

00000850 <__fp_splitA>:
 850:	88 0f       	add	r24, r24
 852:	97 fb       	bst	r25, 7
 854:	99 1f       	adc	r25, r25
 856:	61 f0       	breq	.+24     	; 0x870 <__fp_splitA+0x20>
 858:	9f 3f       	cpi	r25, 0xFF	; 255
 85a:	79 f0       	breq	.+30     	; 0x87a <__fp_splitA+0x2a>
 85c:	87 95       	ror	r24
 85e:	08 95       	ret
 860:	12 16       	cp	r1, r18
 862:	13 06       	cpc	r1, r19
 864:	14 06       	cpc	r1, r20
 866:	55 1f       	adc	r21, r21
 868:	f2 cf       	rjmp	.-28     	; 0x84e <__fp_split3+0xe>
 86a:	46 95       	lsr	r20
 86c:	f1 df       	rcall	.-30     	; 0x850 <__fp_splitA>
 86e:	08 c0       	rjmp	.+16     	; 0x880 <__fp_splitA+0x30>
 870:	16 16       	cp	r1, r22
 872:	17 06       	cpc	r1, r23
 874:	18 06       	cpc	r1, r24
 876:	99 1f       	adc	r25, r25
 878:	f1 cf       	rjmp	.-30     	; 0x85c <__fp_splitA+0xc>
 87a:	86 95       	lsr	r24
 87c:	71 05       	cpc	r23, r1
 87e:	61 05       	cpc	r22, r1
 880:	08 94       	sec
 882:	08 95       	ret

00000884 <__fp_zero>:
 884:	e8 94       	clt

00000886 <__fp_szero>:
 886:	bb 27       	eor	r27, r27
 888:	66 27       	eor	r22, r22
 88a:	77 27       	eor	r23, r23
 88c:	cb 01       	movw	r24, r22
 88e:	97 f9       	bld	r25, 7
 890:	08 95       	ret

00000892 <__mulsf3>:
 892:	0b d0       	rcall	.+22     	; 0x8aa <__mulsf3x>
 894:	78 c0       	rjmp	.+240    	; 0x986 <__fp_round>
 896:	69 d0       	rcall	.+210    	; 0x96a <__fp_pscA>
 898:	28 f0       	brcs	.+10     	; 0x8a4 <__mulsf3+0x12>
 89a:	6e d0       	rcall	.+220    	; 0x978 <__fp_pscB>
 89c:	18 f0       	brcs	.+6      	; 0x8a4 <__mulsf3+0x12>
 89e:	95 23       	and	r25, r21
 8a0:	09 f0       	breq	.+2      	; 0x8a4 <__mulsf3+0x12>
 8a2:	5a c0       	rjmp	.+180    	; 0x958 <__fp_inf>
 8a4:	5f c0       	rjmp	.+190    	; 0x964 <__fp_nan>
 8a6:	11 24       	eor	r1, r1
 8a8:	ee cf       	rjmp	.-36     	; 0x886 <__fp_szero>

000008aa <__mulsf3x>:
 8aa:	ca df       	rcall	.-108    	; 0x840 <__fp_split3>
 8ac:	a0 f3       	brcs	.-24     	; 0x896 <__mulsf3+0x4>

000008ae <__mulsf3_pse>:
 8ae:	95 9f       	mul	r25, r21
 8b0:	d1 f3       	breq	.-12     	; 0x8a6 <__mulsf3+0x14>
 8b2:	95 0f       	add	r25, r21
 8b4:	50 e0       	ldi	r21, 0x00	; 0
 8b6:	55 1f       	adc	r21, r21
 8b8:	62 9f       	mul	r22, r18
 8ba:	f0 01       	movw	r30, r0
 8bc:	72 9f       	mul	r23, r18
 8be:	bb 27       	eor	r27, r27
 8c0:	f0 0d       	add	r31, r0
 8c2:	b1 1d       	adc	r27, r1
 8c4:	63 9f       	mul	r22, r19
 8c6:	aa 27       	eor	r26, r26
 8c8:	f0 0d       	add	r31, r0
 8ca:	b1 1d       	adc	r27, r1
 8cc:	aa 1f       	adc	r26, r26
 8ce:	64 9f       	mul	r22, r20
 8d0:	66 27       	eor	r22, r22
 8d2:	b0 0d       	add	r27, r0
 8d4:	a1 1d       	adc	r26, r1
 8d6:	66 1f       	adc	r22, r22
 8d8:	82 9f       	mul	r24, r18
 8da:	22 27       	eor	r18, r18
 8dc:	b0 0d       	add	r27, r0
 8de:	a1 1d       	adc	r26, r1
 8e0:	62 1f       	adc	r22, r18
 8e2:	73 9f       	mul	r23, r19
 8e4:	b0 0d       	add	r27, r0
 8e6:	a1 1d       	adc	r26, r1
 8e8:	62 1f       	adc	r22, r18
 8ea:	83 9f       	mul	r24, r19
 8ec:	a0 0d       	add	r26, r0
 8ee:	61 1d       	adc	r22, r1
 8f0:	22 1f       	adc	r18, r18
 8f2:	74 9f       	mul	r23, r20
 8f4:	33 27       	eor	r19, r19
 8f6:	a0 0d       	add	r26, r0
 8f8:	61 1d       	adc	r22, r1
 8fa:	23 1f       	adc	r18, r19
 8fc:	84 9f       	mul	r24, r20
 8fe:	60 0d       	add	r22, r0
 900:	21 1d       	adc	r18, r1
 902:	82 2f       	mov	r24, r18
 904:	76 2f       	mov	r23, r22
 906:	6a 2f       	mov	r22, r26
 908:	11 24       	eor	r1, r1
 90a:	9f 57       	subi	r25, 0x7F	; 127
 90c:	50 40       	sbci	r21, 0x00	; 0
 90e:	8a f0       	brmi	.+34     	; 0x932 <__mulsf3_pse+0x84>
 910:	e1 f0       	breq	.+56     	; 0x94a <__mulsf3_pse+0x9c>
 912:	88 23       	and	r24, r24
 914:	4a f0       	brmi	.+18     	; 0x928 <__mulsf3_pse+0x7a>
 916:	ee 0f       	add	r30, r30
 918:	ff 1f       	adc	r31, r31
 91a:	bb 1f       	adc	r27, r27
 91c:	66 1f       	adc	r22, r22
 91e:	77 1f       	adc	r23, r23
 920:	88 1f       	adc	r24, r24
 922:	91 50       	subi	r25, 0x01	; 1
 924:	50 40       	sbci	r21, 0x00	; 0
 926:	a9 f7       	brne	.-22     	; 0x912 <__mulsf3_pse+0x64>
 928:	9e 3f       	cpi	r25, 0xFE	; 254
 92a:	51 05       	cpc	r21, r1
 92c:	70 f0       	brcs	.+28     	; 0x94a <__mulsf3_pse+0x9c>
 92e:	14 c0       	rjmp	.+40     	; 0x958 <__fp_inf>
 930:	aa cf       	rjmp	.-172    	; 0x886 <__fp_szero>
 932:	5f 3f       	cpi	r21, 0xFF	; 255
 934:	ec f3       	brlt	.-6      	; 0x930 <__mulsf3_pse+0x82>
 936:	98 3e       	cpi	r25, 0xE8	; 232
 938:	dc f3       	brlt	.-10     	; 0x930 <__mulsf3_pse+0x82>
 93a:	86 95       	lsr	r24
 93c:	77 95       	ror	r23
 93e:	67 95       	ror	r22
 940:	b7 95       	ror	r27
 942:	f7 95       	ror	r31
 944:	e7 95       	ror	r30
 946:	9f 5f       	subi	r25, 0xFF	; 255
 948:	c1 f7       	brne	.-16     	; 0x93a <__mulsf3_pse+0x8c>
 94a:	fe 2b       	or	r31, r30
 94c:	88 0f       	add	r24, r24
 94e:	91 1d       	adc	r25, r1
 950:	96 95       	lsr	r25
 952:	87 95       	ror	r24
 954:	97 f9       	bld	r25, 7
 956:	08 95       	ret

00000958 <__fp_inf>:
 958:	97 f9       	bld	r25, 7
 95a:	9f 67       	ori	r25, 0x7F	; 127
 95c:	80 e8       	ldi	r24, 0x80	; 128
 95e:	70 e0       	ldi	r23, 0x00	; 0
 960:	60 e0       	ldi	r22, 0x00	; 0
 962:	08 95       	ret

00000964 <__fp_nan>:
 964:	9f ef       	ldi	r25, 0xFF	; 255
 966:	80 ec       	ldi	r24, 0xC0	; 192
 968:	08 95       	ret

0000096a <__fp_pscA>:
 96a:	00 24       	eor	r0, r0
 96c:	0a 94       	dec	r0
 96e:	16 16       	cp	r1, r22
 970:	17 06       	cpc	r1, r23
 972:	18 06       	cpc	r1, r24
 974:	09 06       	cpc	r0, r25
 976:	08 95       	ret

00000978 <__fp_pscB>:
 978:	00 24       	eor	r0, r0
 97a:	0a 94       	dec	r0
 97c:	12 16       	cp	r1, r18
 97e:	13 06       	cpc	r1, r19
 980:	14 06       	cpc	r1, r20
 982:	05 06       	cpc	r0, r21
 984:	08 95       	ret

00000986 <__fp_round>:
 986:	09 2e       	mov	r0, r25
 988:	03 94       	inc	r0
 98a:	00 0c       	add	r0, r0
 98c:	11 f4       	brne	.+4      	; 0x992 <__fp_round+0xc>
 98e:	88 23       	and	r24, r24
 990:	52 f0       	brmi	.+20     	; 0x9a6 <__fp_round+0x20>
 992:	bb 0f       	add	r27, r27
 994:	40 f4       	brcc	.+16     	; 0x9a6 <__fp_round+0x20>
 996:	bf 2b       	or	r27, r31
 998:	11 f4       	brne	.+4      	; 0x99e <__fp_round+0x18>
 99a:	60 ff       	sbrs	r22, 0
 99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fp_round+0x20>
 99e:	6f 5f       	subi	r22, 0xFF	; 255
 9a0:	7f 4f       	sbci	r23, 0xFF	; 255
 9a2:	8f 4f       	sbci	r24, 0xFF	; 255
 9a4:	9f 4f       	sbci	r25, 0xFF	; 255
 9a6:	08 95       	ret

000009a8 <__divmodhi4>:
 9a8:	97 fb       	bst	r25, 7
 9aa:	09 2e       	mov	r0, r25
 9ac:	07 26       	eor	r0, r23
 9ae:	0a d0       	rcall	.+20     	; 0x9c4 <__divmodhi4_neg1>
 9b0:	77 fd       	sbrc	r23, 7
 9b2:	04 d0       	rcall	.+8      	; 0x9bc <__divmodhi4_neg2>
 9b4:	27 d0       	rcall	.+78     	; 0xa04 <__udivmodhi4>
 9b6:	06 d0       	rcall	.+12     	; 0x9c4 <__divmodhi4_neg1>
 9b8:	00 20       	and	r0, r0
 9ba:	1a f4       	brpl	.+6      	; 0x9c2 <__divmodhi4_exit>

000009bc <__divmodhi4_neg2>:
 9bc:	70 95       	com	r23
 9be:	61 95       	neg	r22
 9c0:	7f 4f       	sbci	r23, 0xFF	; 255

000009c2 <__divmodhi4_exit>:
 9c2:	08 95       	ret

000009c4 <__divmodhi4_neg1>:
 9c4:	f6 f7       	brtc	.-4      	; 0x9c2 <__divmodhi4_exit>
 9c6:	90 95       	com	r25
 9c8:	81 95       	neg	r24
 9ca:	9f 4f       	sbci	r25, 0xFF	; 255
 9cc:	08 95       	ret

000009ce <__divmodsi4>:
 9ce:	97 fb       	bst	r25, 7
 9d0:	09 2e       	mov	r0, r25
 9d2:	05 26       	eor	r0, r21
 9d4:	0e d0       	rcall	.+28     	; 0x9f2 <__divmodsi4_neg1>
 9d6:	57 fd       	sbrc	r21, 7
 9d8:	04 d0       	rcall	.+8      	; 0x9e2 <__divmodsi4_neg2>
 9da:	28 d0       	rcall	.+80     	; 0xa2c <__udivmodsi4>
 9dc:	0a d0       	rcall	.+20     	; 0x9f2 <__divmodsi4_neg1>
 9de:	00 1c       	adc	r0, r0
 9e0:	38 f4       	brcc	.+14     	; 0x9f0 <__divmodsi4_exit>

000009e2 <__divmodsi4_neg2>:
 9e2:	50 95       	com	r21
 9e4:	40 95       	com	r20
 9e6:	30 95       	com	r19
 9e8:	21 95       	neg	r18
 9ea:	3f 4f       	sbci	r19, 0xFF	; 255
 9ec:	4f 4f       	sbci	r20, 0xFF	; 255
 9ee:	5f 4f       	sbci	r21, 0xFF	; 255

000009f0 <__divmodsi4_exit>:
 9f0:	08 95       	ret

000009f2 <__divmodsi4_neg1>:
 9f2:	f6 f7       	brtc	.-4      	; 0x9f0 <__divmodsi4_exit>
 9f4:	90 95       	com	r25
 9f6:	80 95       	com	r24
 9f8:	70 95       	com	r23
 9fa:	61 95       	neg	r22
 9fc:	7f 4f       	sbci	r23, 0xFF	; 255
 9fe:	8f 4f       	sbci	r24, 0xFF	; 255
 a00:	9f 4f       	sbci	r25, 0xFF	; 255
 a02:	08 95       	ret

00000a04 <__udivmodhi4>:
 a04:	aa 1b       	sub	r26, r26
 a06:	bb 1b       	sub	r27, r27
 a08:	51 e1       	ldi	r21, 0x11	; 17
 a0a:	07 c0       	rjmp	.+14     	; 0xa1a <__udivmodhi4_ep>

00000a0c <__udivmodhi4_loop>:
 a0c:	aa 1f       	adc	r26, r26
 a0e:	bb 1f       	adc	r27, r27
 a10:	a6 17       	cp	r26, r22
 a12:	b7 07       	cpc	r27, r23
 a14:	10 f0       	brcs	.+4      	; 0xa1a <__udivmodhi4_ep>
 a16:	a6 1b       	sub	r26, r22
 a18:	b7 0b       	sbc	r27, r23

00000a1a <__udivmodhi4_ep>:
 a1a:	88 1f       	adc	r24, r24
 a1c:	99 1f       	adc	r25, r25
 a1e:	5a 95       	dec	r21
 a20:	a9 f7       	brne	.-22     	; 0xa0c <__udivmodhi4_loop>
 a22:	80 95       	com	r24
 a24:	90 95       	com	r25
 a26:	bc 01       	movw	r22, r24
 a28:	cd 01       	movw	r24, r26
 a2a:	08 95       	ret

00000a2c <__udivmodsi4>:
 a2c:	a1 e2       	ldi	r26, 0x21	; 33
 a2e:	1a 2e       	mov	r1, r26
 a30:	aa 1b       	sub	r26, r26
 a32:	bb 1b       	sub	r27, r27
 a34:	fd 01       	movw	r30, r26
 a36:	0d c0       	rjmp	.+26     	; 0xa52 <__udivmodsi4_ep>

00000a38 <__udivmodsi4_loop>:
 a38:	aa 1f       	adc	r26, r26
 a3a:	bb 1f       	adc	r27, r27
 a3c:	ee 1f       	adc	r30, r30
 a3e:	ff 1f       	adc	r31, r31
 a40:	a2 17       	cp	r26, r18
 a42:	b3 07       	cpc	r27, r19
 a44:	e4 07       	cpc	r30, r20
 a46:	f5 07       	cpc	r31, r21
 a48:	20 f0       	brcs	.+8      	; 0xa52 <__udivmodsi4_ep>
 a4a:	a2 1b       	sub	r26, r18
 a4c:	b3 0b       	sbc	r27, r19
 a4e:	e4 0b       	sbc	r30, r20
 a50:	f5 0b       	sbc	r31, r21

00000a52 <__udivmodsi4_ep>:
 a52:	66 1f       	adc	r22, r22
 a54:	77 1f       	adc	r23, r23
 a56:	88 1f       	adc	r24, r24
 a58:	99 1f       	adc	r25, r25
 a5a:	1a 94       	dec	r1
 a5c:	69 f7       	brne	.-38     	; 0xa38 <__udivmodsi4_loop>
 a5e:	60 95       	com	r22
 a60:	70 95       	com	r23
 a62:	80 95       	com	r24
 a64:	90 95       	com	r25
 a66:	9b 01       	movw	r18, r22
 a68:	ac 01       	movw	r20, r24
 a6a:	bd 01       	movw	r22, r26
 a6c:	cf 01       	movw	r24, r30
 a6e:	08 95       	ret

00000a70 <__eewr_byte_m16>:
 a70:	26 2f       	mov	r18, r22

00000a72 <__eewr_r18_m16>:
 a72:	e1 99       	sbic	0x1c, 1	; 28
 a74:	fe cf       	rjmp	.-4      	; 0xa72 <__eewr_r18_m16>
 a76:	9f bb       	out	0x1f, r25	; 31
 a78:	8e bb       	out	0x1e, r24	; 30
 a7a:	2d bb       	out	0x1d, r18	; 29
 a7c:	0f b6       	in	r0, 0x3f	; 63
 a7e:	f8 94       	cli
 a80:	e2 9a       	sbi	0x1c, 2	; 28
 a82:	e1 9a       	sbi	0x1c, 1	; 28
 a84:	0f be       	out	0x3f, r0	; 63
 a86:	01 96       	adiw	r24, 0x01	; 1
 a88:	08 95       	ret

00000a8a <_exit>:
 a8a:	f8 94       	cli

00000a8c <__stop_program>:
 a8c:	ff cf       	rjmp	.-2      	; 0xa8c <__stop_program>
