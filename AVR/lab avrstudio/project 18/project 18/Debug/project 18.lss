
project 18.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000086  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000000dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000008d  00000000  00000000  00000873  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000004e  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000012a  00000000  00000000  0000094e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000098  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000002b  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 41 00 	jmp	0x82	; 0x82 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
//#include <avr/sfr_defs.h>
#include <avr/delay.h>
#include "setandclear_bit.h"
int main(void)
{
	DDRC=0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
  70:	15 ba       	out	0x15, r1	; 21
	DDRA=0x00;
  72:	1a ba       	out	0x1a, r1	; 26
	PORTA=0xFF;
  74:	8b bb       	out	0x1b, r24	; 27
	
  
	while(1){
	if (bit_is_clear(PINA, PA5)) {
  76:	cd 99       	sbic	0x19, 5	; 25
  78:	02 c0       	rjmp	.+4      	; 0x7e <main+0x12>

    PORTC |= (1<<PC5); // put LED HIGH
  7a:	ad 9a       	sbi	0x15, 5	; 21
  7c:	fc cf       	rjmp	.-8      	; 0x76 <main+0xa>

    } else {

     PORTC &= ~(1<<PC5); // put LED LOW
  7e:	ad 98       	cbi	0x15, 5	; 21
  80:	fa cf       	rjmp	.-12     	; 0x76 <main+0xa>

00000082 <_exit>:
  82:	f8 94       	cli

00000084 <__stop_program>:
  84:	ff cf       	rjmp	.-2      	; 0x84 <__stop_program>
