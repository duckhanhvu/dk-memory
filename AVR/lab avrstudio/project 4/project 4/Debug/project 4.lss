
project 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  00000370  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000fa  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000399  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000171  00000000  00000000  00000f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000541  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000156  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000237  00000000  00000000  0000189a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000056  00000000  00000000  00001ad1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_5>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  74:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_5>:
unsigned long frequency;

// Interrupt for the event

ISR(TIMER1_CAPT_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	4f 93       	push	r20
  8c:	5f 93       	push	r21
  8e:	6f 93       	push	r22
  90:	7f 93       	push	r23
  92:	8f 93       	push	r24
  94:	9f 93       	push	r25
  96:	af 93       	push	r26
  98:	bf 93       	push	r27
  9a:	ef 93       	push	r30
  9c:	ff 93       	push	r31
	// Counter to 0
	TCNT1 = 0;
  9e:	1d bc       	out	0x2d, r1	; 45
  a0:	1c bc       	out	0x2c, r1	; 44
 
	// The result is valid only if the counter
	// has not overflowed yet
	if (bit_is_clear(ACSR,ACO))
  a2:	45 99       	sbic	0x08, 5	; 8
  a4:	10 c0       	rjmp	.+32     	; 0xc6 <__vector_5+0x4a>
	{
		// Calculating the frequency from the period
		frequency = ICR1;
  a6:	86 b5       	in	r24, 0x26	; 38
  a8:	97 b5       	in	r25, 0x27	; 39
  aa:	9c 01       	movw	r18, r24
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	20 93 60 00 	sts	0x0060, r18
  b4:	30 93 61 00 	sts	0x0061, r19
  b8:	40 93 62 00 	sts	0x0062, r20
  bc:	50 93 63 00 	sts	0x0063, r21
		printnumber_lcd(frequency);
  c0:	0e 94 12 01 	call	0x224	; 0x224 <printnumber_lcd>
  c4:	09 c0       	rjmp	.+18     	; 0xd8 <__vector_5+0x5c>
	}
	else
	{
		// Frequency is less than 122 Hz
		frequency = 0;
  c6:	10 92 60 00 	sts	0x0060, r1
  ca:	10 92 61 00 	sts	0x0061, r1
  ce:	10 92 62 00 	sts	0x0062, r1
  d2:	10 92 63 00 	sts	0x0063, r1
 
		// Set the counter's overflow flag to 0
		ACSR &= ~(1 << ACI);
  d6:	44 98       	cbi	0x08, 4	; 8
	}
}
  d8:	ff 91       	pop	r31
  da:	ef 91       	pop	r30
  dc:	bf 91       	pop	r27
  de:	af 91       	pop	r26
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	7f 91       	pop	r23
  e6:	6f 91       	pop	r22
  e8:	5f 91       	pop	r21
  ea:	4f 91       	pop	r20
  ec:	3f 91       	pop	r19
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <main>:
int main()
{
	init_lcd();
  fa:	0e 94 c1 00 	call	0x182	; 0x182 <init_lcd>
	DDRC=0xFF;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	84 bb       	out	0x14, r24	; 20
	// Register a rising front, prescaler value 1
	TCCR1B = (1<<ICNC1)| (1 << CS10);
 102:	81 e8       	ldi	r24, 0x81	; 129
 104:	8e bd       	out	0x2e, r24	; 46
 
	// Allow event interrupts
	TIMSK = (1 << TICIE1);
 106:	80 e2       	ldi	r24, 0x20	; 32
 108:	89 bf       	out	0x39, r24	; 57
	
	ACSR=(1<<ACIC);
 10a:	84 e0       	ldi	r24, 0x04	; 4
 10c:	88 b9       	out	0x08, r24	; 8
 
	// Allow interrupts globally
	sei();
 10e:	78 94       	sei
 110:	ff cf       	rjmp	.-2      	; 0x110 <main+0x16>

00000112 <read_2Nib>:


char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
 112:	aa 9a       	sbi	0x15, 2	; 21
	DDR_DATA=0x0F;
 114:	8f e0       	ldi	r24, 0x0F	; 15
 116:	84 bb       	out	0x14, r24	; 20
	HNib=DATA_input&0xF0;
 118:	83 b3       	in	r24, 0x13	; 19
	clearbit(CTRL,EN);
 11a:	aa 98       	cbi	0x15, 2	; 21
	
	setbit(CTRL,EN);
 11c:	aa 9a       	sbi	0x15, 2	; 21
	LNib=DATA_input&0xF0;
 11e:	93 b3       	in	r25, 0x13	; 19
	clearbit(CTRL,EN);
 120:	aa 98       	cbi	0x15, 2	; 21
	LNib>>=4;
 122:	92 95       	swap	r25
 124:	9f 70       	andi	r25, 0x0F	; 15
char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
	DDR_DATA=0x0F;
	HNib=DATA_input&0xF0;
 126:	80 7f       	andi	r24, 0xF0	; 240
	LNib=DATA_input&0xF0;
	clearbit(CTRL,EN);
	LNib>>=4;
	
	return (HNib|LNib);
}
 128:	89 2b       	or	r24, r25
 12a:	08 95       	ret

0000012c <write_2Nib>:
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
 12c:	95 b3       	in	r25, 0x15	; 21
 12e:	9f 70       	andi	r25, 0x0F	; 15
	HNib=data&0xF0;
 130:	28 2f       	mov	r18, r24
 132:	20 7f       	andi	r18, 0xF0	; 240
	LNib=(data<<4)&0xF0;
	
	DATA_output=HNib|temp;
 134:	29 2b       	or	r18, r25
 136:	25 bb       	out	0x15, r18	; 21
	setbit(CTRL,EN);
 138:	aa 9a       	sbi	0x15, 2	; 21
	clearbit(CTRL,EN);
 13a:	aa 98       	cbi	0x15, 2	; 21
}
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
	HNib=data&0xF0;
	LNib=(data<<4)&0xF0;
 13c:	82 95       	swap	r24
 13e:	80 7f       	andi	r24, 0xF0	; 240
	
	DATA_output=HNib|temp;
	setbit(CTRL,EN);
	clearbit(CTRL,EN);
	
	DATA_output=LNib|temp;
 140:	98 2b       	or	r25, r24
 142:	95 bb       	out	0x15, r25	; 21
	setbit(CTRL,EN);
 144:	aa 9a       	sbi	0x15, 2	; 21
	clearbit(CTRL,EN);
 146:	aa 98       	cbi	0x15, 2	; 21
	
}
 148:	08 95       	ret

0000014a <wait_lcd>:
void wait_lcd(void){
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	df 93       	push	r29
 150:	cf 93       	push	r28
 152:	0f 92       	push	r0
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
	while(1){
     	clearbit(CTRL,RS);
		setbit(CTRL,RW);
		temp=read_2Nib();
		
		if(bit_is_clear(temp,7)) break;
 158:	8e 01       	movw	r16, r28
 15a:	0f 5f       	subi	r16, 0xFF	; 255
 15c:	1f 4f       	sbci	r17, 0xFF	; 255
}
void wait_lcd(void){
	unsigned char temp;
	
	while(1){
     	clearbit(CTRL,RS);
 15e:	a8 98       	cbi	0x15, 0	; 21
		setbit(CTRL,RW);
 160:	a9 9a       	sbi	0x15, 1	; 21
		temp=read_2Nib();
 162:	0e 94 89 00 	call	0x112	; 0x112 <read_2Nib>
 166:	89 83       	std	Y+1, r24	; 0x01
		
		if(bit_is_clear(temp,7)) break;
 168:	f8 01       	movw	r30, r16
 16a:	80 81       	ld	r24, Z
 16c:	88 23       	and	r24, r24
 16e:	bc f3       	brlt	.-18     	; 0x15e <wait_lcd+0x14>
	}
	clearbit(CTRL,RW);
 170:	a9 98       	cbi	0x15, 1	; 21
	DDR_DATA=0xFF;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	84 bb       	out	0x14, r24	; 20
	
}
 176:	0f 90       	pop	r0
 178:	cf 91       	pop	r28
 17a:	df 91       	pop	r29
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	08 95       	ret

00000182 <init_lcd>:

void init_lcd(){//uses mode 4 bit
	DDR_CTRL=0xFF;
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	84 bb       	out	0x14, r24	; 20
	DDR_DATA=0xFF;
 186:	84 bb       	out	0x14, r24	; 20
	clearbit(CTRL,RS);
 188:	a8 98       	cbi	0x15, 0	; 21
	clearbit(CTRL,RW);
 18a:	a9 98       	cbi	0x15, 1	; 21
	clearbit(CTRL,EN);
 18c:	aa 98       	cbi	0x15, 2	; 21
	
//function set	
	setbit(CTRL,EN);
 18e:	aa 9a       	sbi	0x15, 2	; 21
	setbit(DATA_output,5);
 190:	ad 9a       	sbi	0x15, 5	; 21
	clearbit(CTRL,EN);
 192:	aa 98       	cbi	0x15, 2	; 21
	wait_lcd();
 194:	0e 94 a5 00 	call	0x14a	; 0x14a <wait_lcd>
	write_2Nib(0x28);
 198:	88 e2       	ldi	r24, 0x28	; 40
 19a:	0e 94 96 00 	call	0x12c	; 0x12c <write_2Nib>
	wait_lcd();
 19e:	0e 94 a5 00 	call	0x14a	; 0x14a <wait_lcd>
//display on/off control
    write_2Nib(0x0E);
 1a2:	8e e0       	ldi	r24, 0x0E	; 14
 1a4:	0e 94 96 00 	call	0x12c	; 0x12c <write_2Nib>
	wait_lcd();
 1a8:	0e 94 a5 00 	call	0x14a	; 0x14a <wait_lcd>

//entry mode set 
    
    write_2Nib(0x06);
 1ac:	86 e0       	ldi	r24, 0x06	; 6
 1ae:	0e 94 96 00 	call	0x12c	; 0x12c <write_2Nib>
    wait_lcd();		
 1b2:	0e 94 a5 00 	call	0x14a	; 0x14a <wait_lcd>
}
 1b6:	08 95       	ret

000001b8 <putchar_lcd>:
void putchar_lcd(unsigned char data){
	
	setbit(CTRL,RS);
 1b8:	a8 9a       	sbi	0x15, 0	; 21
	write_2Nib(data);
 1ba:	0e 94 96 00 	call	0x12c	; 0x12c <write_2Nib>
	wait_lcd();
 1be:	0e 94 a5 00 	call	0x14a	; 0x14a <wait_lcd>
}
 1c2:	08 95       	ret

000001c4 <cursor_home>:
void cursor_home(){
	clearbit(CTRL,RS);
 1c4:	a8 98       	cbi	0x15, 0	; 21
	write_2Nib(0x03);
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	0e 94 96 00 	call	0x12c	; 0x12c <write_2Nib>
	wait_lcd();
 1cc:	0e 94 a5 00 	call	0x14a	; 0x14a <wait_lcd>
}
 1d0:	08 95       	ret

000001d2 <clear_lcd>:
void clear_lcd(){
	clearbit(CTRL,RS);
 1d2:	a8 98       	cbi	0x15, 0	; 21
	write_2Nib(0x01);
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 96 00 	call	0x12c	; 0x12c <write_2Nib>
	wait_lcd();
 1da:	0e 94 a5 00 	call	0x14a	; 0x14a <wait_lcd>
}
 1de:	08 95       	ret

000001e0 <movecursor>:
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
	clearbit(CTRL,RS);
 1e0:	a8 98       	cbi	0x15, 0	; 21
	write_2Nib(0x01);
	wait_lcd();
}
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
 1e2:	82 95       	swap	r24
 1e4:	88 0f       	add	r24, r24
 1e6:	88 0f       	add	r24, r24
 1e8:	80 7c       	andi	r24, 0xC0	; 192
 1ea:	86 0f       	add	r24, r22
	clearbit(CTRL,RS);
	write_2Nib(x);
 1ec:	81 5c       	subi	r24, 0xC1	; 193
 1ee:	0e 94 96 00 	call	0x12c	; 0x12c <write_2Nib>
	wait_lcd();
 1f2:	0e 94 a5 00 	call	0x14a	; 0x14a <wait_lcd>
}
 1f6:	08 95       	ret

000001f8 <count_number>:
int count_number(unsigned int number){
 1f8:	bc 01       	movw	r22, r24
	int dem=0;
	while(number){
 1fa:	00 97       	sbiw	r24, 0x00	; 0
 1fc:	71 f0       	breq	.+28     	; 0x21a <count_number+0x22>
	clearbit(CTRL,RS);
	write_2Nib(x);
	wait_lcd();
}
int count_number(unsigned int number){
	int dem=0;
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	30 e0       	ldi	r19, 0x00	; 0
	while(number){
		number=number/10;
 202:	ea e0       	ldi	r30, 0x0A	; 10
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	cb 01       	movw	r24, r22
 208:	bf 01       	movw	r22, r30
 20a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__udivmodhi4>
		dem++;
 20e:	2f 5f       	subi	r18, 0xFF	; 255
 210:	3f 4f       	sbci	r19, 0xFF	; 255
	write_2Nib(x);
	wait_lcd();
}
int count_number(unsigned int number){
	int dem=0;
	while(number){
 212:	61 15       	cp	r22, r1
 214:	71 05       	cpc	r23, r1
 216:	b9 f7       	brne	.-18     	; 0x206 <count_number+0xe>
 218:	02 c0       	rjmp	.+4      	; 0x21e <count_number+0x26>
	clearbit(CTRL,RS);
	write_2Nib(x);
	wait_lcd();
}
int count_number(unsigned int number){
	int dem=0;
 21a:	20 e0       	ldi	r18, 0x00	; 0
 21c:	30 e0       	ldi	r19, 0x00	; 0
	while(number){
		number=number/10;
		dem++;
	}
	return dem;
}
 21e:	82 2f       	mov	r24, r18
 220:	93 2f       	mov	r25, r19
 222:	08 95       	ret

00000224 <printnumber_lcd>:
void printnumber_lcd(unsigned int number){
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
		temp=temp/10;
		putchar_lcd(a+48);
	}*/
	int a,b,c,d,e;
	a=number/10000;
	number=number%10000;
 22a:	60 e1       	ldi	r22, 0x10	; 16
 22c:	77 e2       	ldi	r23, 0x27	; 39
 22e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__udivmodhi4>
 232:	ec 01       	movw	r28, r24
	putchar_lcd(a+48);
 234:	86 2f       	mov	r24, r22
 236:	80 5d       	subi	r24, 0xD0	; 208
 238:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <putchar_lcd>
	b=number/1000;
 23c:	ce 01       	movw	r24, r28
 23e:	68 ee       	ldi	r22, 0xE8	; 232
 240:	73 e0       	ldi	r23, 0x03	; 3
 242:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__udivmodhi4>
 246:	ec 01       	movw	r28, r24
	putchar_lcd(b+48);
 248:	86 2f       	mov	r24, r22
 24a:	80 5d       	subi	r24, 0xD0	; 208
 24c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <putchar_lcd>
	number=number%1000;
	c=number/100;
 250:	ce 01       	movw	r24, r28
 252:	64 e6       	ldi	r22, 0x64	; 100
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__udivmodhi4>
 25a:	ec 01       	movw	r28, r24
	putchar_lcd(c+48);
 25c:	86 2f       	mov	r24, r22
 25e:	80 5d       	subi	r24, 0xD0	; 208
 260:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <putchar_lcd>
	number=number%100;
	d=number/10;
 264:	ce 01       	movw	r24, r28
 266:	6a e0       	ldi	r22, 0x0A	; 10
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__udivmodhi4>
 26e:	18 2f       	mov	r17, r24
	putchar_lcd(d+48);
 270:	86 2f       	mov	r24, r22
 272:	80 5d       	subi	r24, 0xD0	; 208
 274:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <putchar_lcd>
	e=number%10;
	putchar_lcd(e+48);
 278:	81 2f       	mov	r24, r17
 27a:	80 5d       	subi	r24, 0xD0	; 208
 27c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <putchar_lcd>
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	08 95       	ret

00000288 <putstr_lcd>:
putstr_lcd(unsigned char *str, unsigned int lenght){
 288:	ef 92       	push	r14
 28a:	ff 92       	push	r15
 28c:	0f 93       	push	r16
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	7b 01       	movw	r14, r22
	unsigned int i;
	for(i=0;i<lenght;i++){
 296:	61 15       	cp	r22, r1
 298:	71 05       	cpc	r23, r1
 29a:	99 f0       	breq	.+38     	; 0x2c2 <putstr_lcd+0x3a>
 29c:	08 2f       	mov	r16, r24
 29e:	19 2f       	mov	r17, r25
 2a0:	c0 e0       	ldi	r28, 0x00	; 0
 2a2:	d0 e0       	ldi	r29, 0x00	; 0
		if(*(str+i)>0){ 
 2a4:	f8 01       	movw	r30, r16
 2a6:	81 91       	ld	r24, Z+
 2a8:	8f 01       	movw	r16, r30
 2aa:	88 23       	and	r24, r24
 2ac:	19 f0       	breq	.+6      	; 0x2b4 <putstr_lcd+0x2c>
			putchar_lcd(*(str+i));
 2ae:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <putchar_lcd>
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <putstr_lcd+0x32>
			}
		else putchar_lcd(0);	
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <putchar_lcd>
	e=number%10;
	putchar_lcd(e+48);
}
putstr_lcd(unsigned char *str, unsigned int lenght){
	unsigned int i;
	for(i=0;i<lenght;i++){
 2ba:	21 96       	adiw	r28, 0x01	; 1
 2bc:	ce 15       	cp	r28, r14
 2be:	df 05       	cpc	r29, r15
 2c0:	88 f3       	brcs	.-30     	; 0x2a4 <putstr_lcd+0x1c>
		if(*(str+i)>0){ 
			putchar_lcd(*(str+i));
			}
		else putchar_lcd(0);	
}
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	ff 90       	pop	r15
 2cc:	ef 90       	pop	r14
 2ce:	08 95       	ret

000002d0 <__udivmodhi4>:
 2d0:	aa 1b       	sub	r26, r26
 2d2:	bb 1b       	sub	r27, r27
 2d4:	51 e1       	ldi	r21, 0x11	; 17
 2d6:	07 c0       	rjmp	.+14     	; 0x2e6 <__udivmodhi4_ep>

000002d8 <__udivmodhi4_loop>:
 2d8:	aa 1f       	adc	r26, r26
 2da:	bb 1f       	adc	r27, r27
 2dc:	a6 17       	cp	r26, r22
 2de:	b7 07       	cpc	r27, r23
 2e0:	10 f0       	brcs	.+4      	; 0x2e6 <__udivmodhi4_ep>
 2e2:	a6 1b       	sub	r26, r22
 2e4:	b7 0b       	sbc	r27, r23

000002e6 <__udivmodhi4_ep>:
 2e6:	88 1f       	adc	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	5a 95       	dec	r21
 2ec:	a9 f7       	brne	.-22     	; 0x2d8 <__udivmodhi4_loop>
 2ee:	80 95       	com	r24
 2f0:	90 95       	com	r25
 2f2:	bc 01       	movw	r22, r24
 2f4:	cd 01       	movw	r24, r26
 2f6:	08 95       	ret

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
