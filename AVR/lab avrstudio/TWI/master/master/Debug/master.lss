
master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000de4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000de4  00000e78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cf  0080006c  0080006c  00000e84  2**0
                  ALLOC
  3 .stab         000033e4  00000000  00000000  00000e84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000abd  00000000  00000000  00004268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  00004d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000200  00000000  00000000  00004d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000007b0  00000000  00000000  00004f85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000036e  00000000  00000000  00005735  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ac0  00000000  00000000  00005aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000140  00000000  00000000  00006564  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000023d  00000000  00000000  000066a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000004fe  00000000  00000000  000068e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000081  00000000  00000000  00006ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000030  00000000  00000000  00006e60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
   4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_1>
   8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_19>
  50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  54:	07 63       	ori	r16, 0x37	; 55
  56:	42 36       	cpi	r20, 0x62	; 98
  58:	b7 9b       	sbis	0x16, 7	; 22
  5a:	d8 a7       	std	Y+40, r29	; 0x28
  5c:	1a 39       	cpi	r17, 0x9A	; 154
  5e:	68 56       	subi	r22, 0x68	; 104
  60:	18 ae       	std	Y+56, r1	; 0x38
  62:	ba ab       	std	Y+50, r27	; 0x32
  64:	55 8c       	ldd	r5, Z+29	; 0x1d
  66:	1d 3c       	cpi	r17, 0xCD	; 205
  68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
  6a:	57 63       	ori	r21, 0x37	; 55
  6c:	bd 6d       	ori	r27, 0xDD	; 221
  6e:	ed fd       	.word	0xfded	; ????
  70:	75 3e       	cpi	r23, 0xE5	; 229
  72:	f6 17       	cp	r31, r22
  74:	72 31       	cpi	r23, 0x12	; 18
  76:	bf 00       	.word	0x00bf	; ????
  78:	00 00       	nop
  7a:	80 3f       	cpi	r24, 0xF0	; 240
  7c:	08 00       	.word	0x0008	; ????
  7e:	00 00       	nop
  80:	be 92       	st	-X, r11
  82:	24 49       	sbci	r18, 0x94	; 148
  84:	12 3e       	cpi	r17, 0xE2	; 226
  86:	ab aa       	std	Y+51, r10	; 0x33
  88:	aa 2a       	or	r10, r26
  8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
  8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
  8e:	4c 3e       	cpi	r20, 0xEC	; 236
  90:	00 00       	nop
  92:	00 80       	ld	r0, Z
  94:	be ab       	std	Y+54, r27	; 0x36
  96:	aa aa       	std	Y+50, r10	; 0x32
  98:	aa 3e       	cpi	r26, 0xEA	; 234
  9a:	00 00       	nop
  9c:	00 00       	nop
  9e:	bf 00       	.word	0x00bf	; ????
  a0:	00 00       	nop
  a2:	80 3f       	cpi	r24, 0xF0	; 240
  a4:	00 00       	nop
  a6:	00 00       	nop
  a8:	00 08       	sbc	r0, r0
  aa:	41 78       	andi	r20, 0x81	; 129
  ac:	d3 bb       	out	0x13, r29	; 19
  ae:	43 87       	std	Z+11, r20	; 0x0b
  b0:	d1 13       	cpse	r29, r17
  b2:	3d 19       	sub	r19, r13
  b4:	0e 3c       	cpi	r16, 0xCE	; 206
  b6:	c3 bd       	out	0x23, r28	; 35
  b8:	42 82       	std	Z+2, r4	; 0x02
  ba:	ad 2b       	or	r26, r29
  bc:	3e 68       	ori	r19, 0x8E	; 142
  be:	ec 82       	std	Y+4, r14	; 0x04
  c0:	76 be       	out	0x36, r7	; 54
  c2:	d9 8f       	std	Y+25, r29	; 0x19
  c4:	e1 a9       	ldd	r30, Z+49	; 0x31
  c6:	3e 4c       	sbci	r19, 0xCE	; 206
  c8:	80 ef       	ldi	r24, 0xF0	; 240
  ca:	ff be       	out	0x3f, r15	; 63
  cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <exp+0x16>
  ce:	ff 7f       	andi	r31, 0xFF	; 255
  d0:	3f 00       	.word	0x003f	; ????
  d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
  d6:	11 24       	eor	r1, r1
  d8:	1f be       	out	0x3f, r1	; 63
  da:	cf e5       	ldi	r28, 0x5F	; 95
  dc:	d8 e0       	ldi	r29, 0x08	; 8
  de:	de bf       	out	0x3e, r29	; 62
  e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
  e2:	10 e0       	ldi	r17, 0x00	; 0
  e4:	a0 e6       	ldi	r26, 0x60	; 96
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	e4 ee       	ldi	r30, 0xE4	; 228
  ea:	fd e0       	ldi	r31, 0x0D	; 13
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
  ee:	05 90       	lpm	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	ac 36       	cpi	r26, 0x6C	; 108
  f4:	b1 07       	cpc	r27, r17
  f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
  f8:	11 e0       	ldi	r17, 0x01	; 1
  fa:	ac e6       	ldi	r26, 0x6C	; 108
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	ab 33       	cpi	r26, 0x3B	; 59
 104:	b1 07       	cpc	r27, r17
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	0e 94 8a 00 	call	0x114	; 0x114 <main>
 10c:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <_exit>

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <main>:
#include <avr/interrupt.h>
#include "TWI.h"
#include "text_LCD.h"
volatile uint8_t s;
volatile uint8_t x,a[2];
int main(){
 114:	df 93       	push	r29
 116:	cf 93       	push	r28
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	c8 5c       	subi	r28, 0xC8	; 200
 11e:	d0 40       	sbci	r29, 0x00	; 0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
	unsigned int data_1[50];
	unsigned int data_2[50];
	DDRD =0x00;
 12a:	11 ba       	out	0x11, r1	; 17
	PORTD=0xFF;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	82 bb       	out	0x12, r24	; 18
	Init_TWI();
 130:	0e 94 06 02 	call	0x40c	; 0x40c <Init_TWI>
	init_lcd();
 134:	0e 94 43 01 	call	0x286	; 0x286 <init_lcd>
	MCUCR |=(1<<ISC01);
 138:	85 b7       	in	r24, 0x35	; 53
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	85 bf       	out	0x35, r24	; 53
	GICR  |=(1<<INT0);
 13e:	8b b7       	in	r24, 0x3b	; 59
 140:	80 64       	ori	r24, 0x40	; 64
 142:	8b bf       	out	0x3b, r24	; 59
	sei();
 144:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	87 ea       	ldi	r24, 0xA7	; 167
 148:	91 e6       	ldi	r25, 0x61	; 97
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0x36>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x3c>
 150:	00 00       	nop
	_delay_ms(100);
	cursor_home();
 152:	0e 94 64 01 	call	0x2c8	; 0x2c8 <cursor_home>
	putstr_lcd("from slave:",11);
 156:	80 e6       	ldi	r24, 0x60	; 96
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	6b e0       	ldi	r22, 0x0B	; 11
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <putstr_lcd>
 162:	fe 01       	movw	r30, r28
 164:	31 96       	adiw	r30, 0x01	; 1
	
	for(int i=0;i<50;i++) data_1[i]=i; 
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	81 93       	st	Z+, r24
 16c:	91 93       	st	Z+, r25
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	82 33       	cpi	r24, 0x32	; 50
 172:	91 05       	cpc	r25, r1
 174:	d1 f7       	brne	.-12     	; 0x16a <main+0x56>
	MASTER_Trans(2,data_1,55);
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	be 01       	movw	r22, r28
 17a:	6f 5f       	subi	r22, 0xFF	; 255
 17c:	7f 4f       	sbci	r23, 0xFF	; 255
 17e:	47 e3       	ldi	r20, 0x37	; 55
 180:	0e 94 11 02 	call	0x422	; 0x422 <MASTER_Trans>
 184:	fe 01       	movw	r30, r28
 186:	eb 59       	subi	r30, 0x9B	; 155
 188:	ff 4f       	sbci	r31, 0xFF	; 255
	
	for(int i=0;i<44;i++) data_2[i]=i;
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	81 93       	st	Z+, r24
 190:	91 93       	st	Z+, r25
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	8c 32       	cpi	r24, 0x2C	; 44
 196:	91 05       	cpc	r25, r1
 198:	d1 f7       	brne	.-12     	; 0x18e <main+0x7a>
	MASTER_Trans(3,data_2,44);
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	be 01       	movw	r22, r28
 19e:	6b 59       	subi	r22, 0x9B	; 155
 1a0:	7f 4f       	sbci	r23, 0xFF	; 255
 1a2:	4c e2       	ldi	r20, 0x2C	; 44
 1a4:	0e 94 11 02 	call	0x422	; 0x422 <MASTER_Trans>
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <main+0x94>

000001aa <__vector_1>:
	while(1){}
	
	return 0;
}

ISR(INT0_vect){
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	2f 93       	push	r18
 1b6:	3f 93       	push	r19
 1b8:	4f 93       	push	r20
 1ba:	5f 93       	push	r21
 1bc:	6f 93       	push	r22
 1be:	7f 93       	push	r23
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
 1c4:	af 93       	push	r26
 1c6:	bf 93       	push	r27
 1c8:	ef 93       	push	r30
 1ca:	ff 93       	push	r31
 
    unsigned int c;
    s=PIND&0x03;
 1cc:	80 b3       	in	r24, 0x10	; 16
 1ce:	83 70       	andi	r24, 0x03	; 3
 1d0:	80 93 d3 00 	sts	0x00D3, r24
	MASTER_Receiver(s,a,1);
 1d4:	80 91 d3 00 	lds	r24, 0x00D3
 1d8:	68 e3       	ldi	r22, 0x38	; 56
 1da:	71 e0       	ldi	r23, 0x01	; 1
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	0e 94 55 02 	call	0x4aa	; 0x4aa <MASTER_Receiver>
	movecursor(1,12);
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	6c e0       	ldi	r22, 0x0C	; 12
 1e6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <movecursor>

	printnumber_lcd(a[0]);
 1ea:	80 91 38 01 	lds	r24, 0x0138
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 94 01 	call	0x328	; 0x328 <printnumber_lcd>

 	
}
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	bf 91       	pop	r27
 1fa:	af 91       	pop	r26
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	7f 91       	pop	r23
 202:	6f 91       	pop	r22
 204:	5f 91       	pop	r21
 206:	4f 91       	pop	r20
 208:	3f 91       	pop	r19
 20a:	2f 91       	pop	r18
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <read_2Nib>:


char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
 216:	da 9a       	sbi	0x1b, 2	; 27
	DDR_DATA=0x0F;
 218:	8f e0       	ldi	r24, 0x0F	; 15
 21a:	8a bb       	out	0x1a, r24	; 26
	HNib=DATA_input&0xF0;
 21c:	89 b3       	in	r24, 0x19	; 25
	clearbit(CTRL,EN);
 21e:	da 98       	cbi	0x1b, 2	; 27
	
	setbit(CTRL,EN);
 220:	da 9a       	sbi	0x1b, 2	; 27
	LNib=DATA_input&0xF0;
 222:	99 b3       	in	r25, 0x19	; 25
	clearbit(CTRL,EN);
 224:	da 98       	cbi	0x1b, 2	; 27
	LNib>>=4;
 226:	92 95       	swap	r25
 228:	9f 70       	andi	r25, 0x0F	; 15
char read_2Nib(void){
    unsigned char HNib,LNib;
	
	setbit(CTRL,EN);
	DDR_DATA=0x0F;
	HNib=DATA_input&0xF0;
 22a:	80 7f       	andi	r24, 0xF0	; 240
	LNib=DATA_input&0xF0;
	clearbit(CTRL,EN);
	LNib>>=4;
	
	return (HNib|LNib);
}
 22c:	89 2b       	or	r24, r25
 22e:	08 95       	ret

00000230 <write_2Nib>:
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
 230:	9b b3       	in	r25, 0x1b	; 27
 232:	9f 70       	andi	r25, 0x0F	; 15
	HNib=data&0xF0;
 234:	28 2f       	mov	r18, r24
 236:	20 7f       	andi	r18, 0xF0	; 240
	LNib=(data<<4)&0xF0;
	
	DATA_output=HNib|temp;
 238:	29 2b       	or	r18, r25
 23a:	2b bb       	out	0x1b, r18	; 27
	setbit(CTRL,EN);
 23c:	da 9a       	sbi	0x1b, 2	; 27
	clearbit(CTRL,EN);
 23e:	da 98       	cbi	0x1b, 2	; 27
}
void write_2Nib(unsigned char data){
	unsigned char HNib, LNib, temp;
	temp=DATA_output&0x0F;
	HNib=data&0xF0;
	LNib=(data<<4)&0xF0;
 240:	82 95       	swap	r24
 242:	80 7f       	andi	r24, 0xF0	; 240
	
	DATA_output=HNib|temp;
	setbit(CTRL,EN);
	clearbit(CTRL,EN);
	
	DATA_output=LNib|temp;
 244:	98 2b       	or	r25, r24
 246:	9b bb       	out	0x1b, r25	; 27
	setbit(CTRL,EN);
 248:	da 9a       	sbi	0x1b, 2	; 27
	clearbit(CTRL,EN);
 24a:	da 98       	cbi	0x1b, 2	; 27
	
}
 24c:	08 95       	ret

0000024e <wait_lcd>:
void wait_lcd(void){
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	df 93       	push	r29
 254:	cf 93       	push	r28
 256:	0f 92       	push	r0
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
	while(1){
     	clearbit(CTRL,RS);
		setbit(CTRL,RW);
		temp=read_2Nib();
		
		if(bit_is_clear(temp,7)) break;
 25c:	8e 01       	movw	r16, r28
 25e:	0f 5f       	subi	r16, 0xFF	; 255
 260:	1f 4f       	sbci	r17, 0xFF	; 255
}
void wait_lcd(void){
	unsigned char temp;
	
	while(1){
     	clearbit(CTRL,RS);
 262:	d8 98       	cbi	0x1b, 0	; 27
		setbit(CTRL,RW);
 264:	d9 9a       	sbi	0x1b, 1	; 27
		temp=read_2Nib();
 266:	0e 94 0b 01 	call	0x216	; 0x216 <read_2Nib>
 26a:	89 83       	std	Y+1, r24	; 0x01
		
		if(bit_is_clear(temp,7)) break;
 26c:	f8 01       	movw	r30, r16
 26e:	80 81       	ld	r24, Z
 270:	88 23       	and	r24, r24
 272:	bc f3       	brlt	.-18     	; 0x262 <wait_lcd+0x14>
	}
	clearbit(CTRL,RW);
 274:	d9 98       	cbi	0x1b, 1	; 27
	DDR_DATA=0xFF;
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	8a bb       	out	0x1a, r24	; 26
	
}
 27a:	0f 90       	pop	r0
 27c:	cf 91       	pop	r28
 27e:	df 91       	pop	r29
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	08 95       	ret

00000286 <init_lcd>:

void init_lcd(){//uses mode 4 bit
	DDR_CTRL=0xFF;
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	8a bb       	out	0x1a, r24	; 26
	DDR_DATA=0xFF;
 28a:	8a bb       	out	0x1a, r24	; 26
	clearbit(CTRL,RS);
 28c:	d8 98       	cbi	0x1b, 0	; 27
	clearbit(CTRL,RW);
 28e:	d9 98       	cbi	0x1b, 1	; 27
	clearbit(CTRL,EN);
 290:	da 98       	cbi	0x1b, 2	; 27
	
//function set	
	setbit(CTRL,EN);
 292:	da 9a       	sbi	0x1b, 2	; 27
	setbit(DATA_output,5);
 294:	dd 9a       	sbi	0x1b, 5	; 27
	clearbit(CTRL,EN);
 296:	da 98       	cbi	0x1b, 2	; 27
	wait_lcd();
 298:	0e 94 27 01 	call	0x24e	; 0x24e <wait_lcd>
	write_2Nib(0x28);
 29c:	88 e2       	ldi	r24, 0x28	; 40
 29e:	0e 94 18 01 	call	0x230	; 0x230 <write_2Nib>
	wait_lcd();
 2a2:	0e 94 27 01 	call	0x24e	; 0x24e <wait_lcd>
//display on/off control
    write_2Nib(0x0E);
 2a6:	8e e0       	ldi	r24, 0x0E	; 14
 2a8:	0e 94 18 01 	call	0x230	; 0x230 <write_2Nib>
	wait_lcd();
 2ac:	0e 94 27 01 	call	0x24e	; 0x24e <wait_lcd>

//entry mode set 
    
    write_2Nib(0x06);
 2b0:	86 e0       	ldi	r24, 0x06	; 6
 2b2:	0e 94 18 01 	call	0x230	; 0x230 <write_2Nib>
    wait_lcd();		
 2b6:	0e 94 27 01 	call	0x24e	; 0x24e <wait_lcd>
}
 2ba:	08 95       	ret

000002bc <putchar_lcd>:
void putchar_lcd(unsigned char data){
	
	setbit(CTRL,RS);
 2bc:	d8 9a       	sbi	0x1b, 0	; 27
	write_2Nib(data);
 2be:	0e 94 18 01 	call	0x230	; 0x230 <write_2Nib>
	wait_lcd();
 2c2:	0e 94 27 01 	call	0x24e	; 0x24e <wait_lcd>
}
 2c6:	08 95       	ret

000002c8 <cursor_home>:
void cursor_home(){
	clearbit(CTRL,RS);
 2c8:	d8 98       	cbi	0x1b, 0	; 27
	write_2Nib(0x03);
 2ca:	83 e0       	ldi	r24, 0x03	; 3
 2cc:	0e 94 18 01 	call	0x230	; 0x230 <write_2Nib>
	wait_lcd();
 2d0:	0e 94 27 01 	call	0x24e	; 0x24e <wait_lcd>
}
 2d4:	08 95       	ret

000002d6 <clear_lcd>:
void clear_lcd(){
	clearbit(CTRL,RS);
 2d6:	d8 98       	cbi	0x1b, 0	; 27
	write_2Nib(0x01);
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 18 01 	call	0x230	; 0x230 <write_2Nib>
	wait_lcd();
 2de:	0e 94 27 01 	call	0x24e	; 0x24e <wait_lcd>
}
 2e2:	08 95       	ret

000002e4 <movecursor>:
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
	clearbit(CTRL,RS);
 2e4:	d8 98       	cbi	0x1b, 0	; 27
	write_2Nib(0x01);
	wait_lcd();
}
void movecursor(uint8_t dong,uint8_t cot){
	uint8_t x;
	x=64*(dong-1)+(cot-1)+0x80;
 2e6:	82 95       	swap	r24
 2e8:	88 0f       	add	r24, r24
 2ea:	88 0f       	add	r24, r24
 2ec:	80 7c       	andi	r24, 0xC0	; 192
 2ee:	86 0f       	add	r24, r22
	clearbit(CTRL,RS);
	write_2Nib(x);
 2f0:	81 5c       	subi	r24, 0xC1	; 193
 2f2:	0e 94 18 01 	call	0x230	; 0x230 <write_2Nib>
	wait_lcd();
 2f6:	0e 94 27 01 	call	0x24e	; 0x24e <wait_lcd>
}
 2fa:	08 95       	ret

000002fc <count_number>:
int count_number(unsigned int number){
 2fc:	bc 01       	movw	r22, r24
	int dem=0;
	while(number){
 2fe:	00 97       	sbiw	r24, 0x00	; 0
 300:	71 f0       	breq	.+28     	; 0x31e <count_number+0x22>
	clearbit(CTRL,RS);
	write_2Nib(x);
	wait_lcd();
}
int count_number(unsigned int number){
	int dem=0;
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	30 e0       	ldi	r19, 0x00	; 0
	while(number){
		number=number/10;
 306:	ea e0       	ldi	r30, 0x0A	; 10
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	cb 01       	movw	r24, r22
 30c:	bf 01       	movw	r22, r30
 30e:	0e 94 c9 06 	call	0xd92	; 0xd92 <__udivmodhi4>
		dem++;
 312:	2f 5f       	subi	r18, 0xFF	; 255
 314:	3f 4f       	sbci	r19, 0xFF	; 255
	write_2Nib(x);
	wait_lcd();
}
int count_number(unsigned int number){
	int dem=0;
	while(number){
 316:	61 15       	cp	r22, r1
 318:	71 05       	cpc	r23, r1
 31a:	b9 f7       	brne	.-18     	; 0x30a <count_number+0xe>
 31c:	02 c0       	rjmp	.+4      	; 0x322 <count_number+0x26>
	clearbit(CTRL,RS);
	write_2Nib(x);
	wait_lcd();
}
int count_number(unsigned int number){
	int dem=0;
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
	while(number){
		number=number/10;
		dem++;
	}
	return dem;
}
 322:	82 2f       	mov	r24, r18
 324:	93 2f       	mov	r25, r19
 326:	08 95       	ret

00000328 <printnumber_lcd>:
void printnumber_lcd(unsigned int number){
 328:	af 92       	push	r10
 32a:	bf 92       	push	r11
 32c:	cf 92       	push	r12
 32e:	df 92       	push	r13
 330:	ef 92       	push	r14
 332:	ff 92       	push	r15
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	e8 2e       	mov	r14, r24
 33e:	f9 2e       	mov	r15, r25
	int a,n,i,temp;
	n= count_number(number);
 340:	0e 94 7e 01 	call	0x2fc	; 0x2fc <count_number>
 344:	6c 01       	movw	r12, r24
	temp=pow(10,n-1);
 346:	bc 01       	movw	r22, r24
 348:	61 50       	subi	r22, 0x01	; 1
 34a:	70 40       	sbci	r23, 0x00	; 0
 34c:	88 27       	eor	r24, r24
 34e:	77 fd       	sbrc	r23, 7
 350:	80 95       	com	r24
 352:	98 2f       	mov	r25, r24
 354:	0e 94 a8 03 	call	0x750	; 0x750 <__floatsisf>
 358:	9b 01       	movw	r18, r22
 35a:	ac 01       	movw	r20, r24
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	80 e2       	ldi	r24, 0x20	; 32
 362:	91 e4       	ldi	r25, 0x41	; 65
 364:	0e 94 0c 04 	call	0x818	; 0x818 <pow>
	for(i=0;i<n;i++){
 368:	1c 14       	cp	r1, r12
 36a:	1d 04       	cpc	r1, r13
 36c:	04 f5       	brge	.+64     	; 0x3ae <printnumber_lcd+0x86>
	return dem;
}
void printnumber_lcd(unsigned int number){
	int a,n,i,temp;
	n= count_number(number);
	temp=pow(10,n-1);
 36e:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fixsfsi>
 372:	eb 01       	movw	r28, r22
	for(i=0;i<n;i++){
 374:	00 e0       	ldi	r16, 0x00	; 0
 376:	10 e0       	ldi	r17, 0x00	; 0
		a=number/temp;
		number=number%temp;
		temp=temp/10;
 378:	0f 2e       	mov	r0, r31
 37a:	fa e0       	ldi	r31, 0x0A	; 10
 37c:	af 2e       	mov	r10, r31
 37e:	bb 24       	eor	r11, r11
 380:	f0 2d       	mov	r31, r0
void printnumber_lcd(unsigned int number){
	int a,n,i,temp;
	n= count_number(number);
	temp=pow(10,n-1);
	for(i=0;i<n;i++){
		a=number/temp;
 382:	8e 2d       	mov	r24, r14
 384:	9f 2d       	mov	r25, r15
 386:	be 01       	movw	r22, r28
 388:	0e 94 c9 06 	call	0xd92	; 0xd92 <__udivmodhi4>
 38c:	26 2f       	mov	r18, r22
		number=number%temp;
 38e:	e8 2e       	mov	r14, r24
 390:	f9 2e       	mov	r15, r25
		temp=temp/10;
 392:	ce 01       	movw	r24, r28
 394:	b5 01       	movw	r22, r10
 396:	0e 94 dd 06 	call	0xdba	; 0xdba <__divmodhi4>
 39a:	eb 01       	movw	r28, r22
		putchar_lcd(a+48);
 39c:	82 2f       	mov	r24, r18
 39e:	80 5d       	subi	r24, 0xD0	; 208
 3a0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <putchar_lcd>
}
void printnumber_lcd(unsigned int number){
	int a,n,i,temp;
	n= count_number(number);
	temp=pow(10,n-1);
	for(i=0;i<n;i++){
 3a4:	0f 5f       	subi	r16, 0xFF	; 255
 3a6:	1f 4f       	sbci	r17, 0xFF	; 255
 3a8:	0c 15       	cp	r16, r12
 3aa:	1d 05       	cpc	r17, r13
 3ac:	54 f3       	brlt	.-44     	; 0x382 <printnumber_lcd+0x5a>
		a=number/temp;
		number=number%temp;
		temp=temp/10;
		putchar_lcd(a+48);
	}
}
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	0f 91       	pop	r16
 3b6:	ff 90       	pop	r15
 3b8:	ef 90       	pop	r14
 3ba:	df 90       	pop	r13
 3bc:	cf 90       	pop	r12
 3be:	bf 90       	pop	r11
 3c0:	af 90       	pop	r10
 3c2:	08 95       	ret

000003c4 <putstr_lcd>:
putstr_lcd(unsigned char *str, unsigned int lenght){
 3c4:	ef 92       	push	r14
 3c6:	ff 92       	push	r15
 3c8:	0f 93       	push	r16
 3ca:	1f 93       	push	r17
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	7b 01       	movw	r14, r22
	unsigned int i;
	for(i=0;i<lenght;i++){
 3d2:	61 15       	cp	r22, r1
 3d4:	71 05       	cpc	r23, r1
 3d6:	99 f0       	breq	.+38     	; 0x3fe <putstr_lcd+0x3a>
 3d8:	08 2f       	mov	r16, r24
 3da:	19 2f       	mov	r17, r25
 3dc:	c0 e0       	ldi	r28, 0x00	; 0
 3de:	d0 e0       	ldi	r29, 0x00	; 0
		if(*(str+i)>0){ 
 3e0:	f8 01       	movw	r30, r16
 3e2:	81 91       	ld	r24, Z+
 3e4:	8f 01       	movw	r16, r30
 3e6:	88 23       	and	r24, r24
 3e8:	19 f0       	breq	.+6      	; 0x3f0 <putstr_lcd+0x2c>
			putchar_lcd(*(str+i));
 3ea:	0e 94 5e 01 	call	0x2bc	; 0x2bc <putchar_lcd>
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <putstr_lcd+0x32>
			}
		else putchar_lcd(0);	
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <putchar_lcd>
		putchar_lcd(a+48);
	}
}
putstr_lcd(unsigned char *str, unsigned int lenght){
	unsigned int i;
	for(i=0;i<lenght;i++){
 3f6:	21 96       	adiw	r28, 0x01	; 1
 3f8:	ce 15       	cp	r28, r14
 3fa:	df 05       	cpc	r29, r15
 3fc:	88 f3       	brcs	.-30     	; 0x3e0 <putstr_lcd+0x1c>
		if(*(str+i)>0){ 
			putchar_lcd(*(str+i));
			}
		else putchar_lcd(0);	
}
}
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	1f 91       	pop	r17
 404:	0f 91       	pop	r16
 406:	ff 90       	pop	r15
 408:	ef 90       	pop	r14
 40a:	08 95       	ret

0000040c <Init_TWI>:
//volatile uint8_t R_byte_num =0;
//volatile uint8_t Tr_byte_num =0;

void Init_TWI(void){
	//initLization for SCL
	TWBR=32;
 40c:	80 e2       	ldi	r24, 0x20	; 32
 40e:	80 b9       	out	0x00, r24	; 0
	TWSR=0x00;
 410:	11 b8       	out	0x01, r1	; 1
	//-----------------
	
	TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWIE);
 412:	85 e4       	ldi	r24, 0x45	; 69
 414:	86 bf       	out	0x36, r24	; 54
	TWAR=(Device_Addr<<1)+GENERAL_CALL_ENABLE;
 416:	80 91 d2 00 	lds	r24, 0x00D2
 41a:	88 0f       	add	r24, r24
 41c:	8f 5f       	subi	r24, 0xFF	; 255
 41e:	82 b9       	out	0x02, r24	; 2
}
 420:	08 95       	ret

00000422 <MASTER_Trans>:

//code for master-----------------------------------------------------------
//----master transmitter mode--------
uint8_t MASTER_Trans(uint8_t addr, uint8_t data[], uint8_t lenght){
	clearbit(TWCR,TWIE);
 422:	96 b7       	in	r25, 0x36	; 54
 424:	9e 7f       	andi	r25, 0xFE	; 254
 426:	96 bf       	out	0x36, r25	; 54
	//sent start condition for slave
	TWCR=TWI_START;
 428:	94 ea       	ldi	r25, 0xA4	; 164
 42a:	96 bf       	out	0x36, r25	; 54
	while((TWCR&0x80)==0x00){};
 42c:	06 b6       	in	r0, 0x36	; 54
 42e:	07 fe       	sbrs	r0, 7
 430:	fd cf       	rjmp	.-6      	; 0x42c <MASTER_Trans+0xa>
	if((TWSR&0xF8)!=MASTER_GIVE_STA){
 432:	91 b1       	in	r25, 0x01	; 1
 434:	98 7f       	andi	r25, 0xF8	; 248
 436:	98 30       	cpi	r25, 0x08	; 8
 438:	29 f0       	breq	.+10     	; 0x444 <MASTER_Trans+0x22>
		Init_TWI();
 43a:	0e 94 06 02 	call	0x40c	; 0x40c <Init_TWI>
		return (TWSR&0xF8);
 43e:	81 b1       	in	r24, 0x01	; 1
 440:	88 7f       	andi	r24, 0xF8	; 248
 442:	08 95       	ret
	}
	//sent device's address
	TWDR=(addr<<1)+TWI_W;
 444:	88 0f       	add	r24, r24
 446:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_CLEAR_TWINT;
 448:	84 e8       	ldi	r24, 0x84	; 132
 44a:	86 bf       	out	0x36, r24	; 54
	while((TWSR&0x80)==0x00){};
 44c:	0f 9b       	sbis	0x01, 7	; 1
 44e:	fe cf       	rjmp	.-4      	; 0x44c <MASTER_Trans+0x2a>
	if((TWSR&0xF8)!=MASTER_TRANS_SLA_W_REACK){
 450:	81 b1       	in	r24, 0x01	; 1
 452:	88 7f       	andi	r24, 0xF8	; 248
 454:	88 31       	cpi	r24, 0x18	; 24
 456:	31 f4       	brne	.+12     	; 0x464 <MASTER_Trans+0x42>
		Init_TWI();
		return (TWSR&0xF8);
	}		
	//sent DATA
	for(int i=0;i<lenght;i++){
 458:	24 2f       	mov	r18, r20
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	12 16       	cp	r1, r18
 45e:	13 06       	cpc	r1, r19
 460:	34 f0       	brlt	.+12     	; 0x46e <MASTER_Trans+0x4c>
 462:	1d c0       	rjmp	.+58     	; 0x49e <MASTER_Trans+0x7c>
	//sent device's address
	TWDR=(addr<<1)+TWI_W;
	TWCR=TWI_CLEAR_TWINT;
	while((TWSR&0x80)==0x00){};
	if((TWSR&0xF8)!=MASTER_TRANS_SLA_W_REACK){
		Init_TWI();
 464:	0e 94 06 02 	call	0x40c	; 0x40c <Init_TWI>
		return (TWSR&0xF8);
 468:	81 b1       	in	r24, 0x01	; 1
 46a:	88 7f       	andi	r24, 0xF8	; 248
 46c:	08 95       	ret
 46e:	e6 2f       	mov	r30, r22
 470:	f7 2f       	mov	r31, r23
	}		
	//sent DATA
	for(int i=0;i<lenght;i++){
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	90 e0       	ldi	r25, 0x00	; 0
		TWDR=data[i];
		TWCR=TWI_CLEAR_TWINT;
 476:	54 e8       	ldi	r21, 0x84	; 132
		Init_TWI();
		return (TWSR&0xF8);
	}		
	//sent DATA
	for(int i=0;i<lenght;i++){
		TWDR=data[i];
 478:	41 91       	ld	r20, Z+
 47a:	43 b9       	out	0x03, r20	; 3
		TWCR=TWI_CLEAR_TWINT;
 47c:	56 bf       	out	0x36, r21	; 54
		while((TWCR&0x80)==0x00){};
 47e:	06 b6       	in	r0, 0x36	; 54
 480:	07 fe       	sbrs	r0, 7
 482:	fd cf       	rjmp	.-6      	; 0x47e <MASTER_Trans+0x5c>
		if((TWSR&0xF8)!=MASTER_TRANS_DATA_REACK){
 484:	41 b1       	in	r20, 0x01	; 1
 486:	48 7f       	andi	r20, 0xF8	; 248
 488:	48 32       	cpi	r20, 0x28	; 40
 48a:	29 f0       	breq	.+10     	; 0x496 <MASTER_Trans+0x74>
			Init_TWI();
 48c:	0e 94 06 02 	call	0x40c	; 0x40c <Init_TWI>
			return (TWSR&0xF8);
 490:	81 b1       	in	r24, 0x01	; 1
 492:	88 7f       	andi	r24, 0xF8	; 248
 494:	08 95       	ret
	if((TWSR&0xF8)!=MASTER_TRANS_SLA_W_REACK){
		Init_TWI();
		return (TWSR&0xF8);
	}		
	//sent DATA
	for(int i=0;i<lenght;i++){
 496:	01 96       	adiw	r24, 0x01	; 1
 498:	82 17       	cp	r24, r18
 49a:	93 07       	cpc	r25, r19
 49c:	6c f3       	brlt	.-38     	; 0x478 <MASTER_Trans+0x56>
			Init_TWI();
			return (TWSR&0xF8);
		}	
	}
	//sent stop condition
	TWCR=TWI_STOP;
 49e:	84 e9       	ldi	r24, 0x94	; 148
 4a0:	86 bf       	out	0x36, r24	; 54
	Init_TWI();
 4a2:	0e 94 06 02 	call	0x40c	; 0x40c <Init_TWI>
	return 0;
 4a6:	80 e0       	ldi	r24, 0x00	; 0
}
 4a8:	08 95       	ret

000004aa <MASTER_Receiver>:
//-----master receiver mode-----------
uint8_t MASTER_Receiver(uint8_t addr, uint8_t data[], uint8_t lenght){
 4aa:	1f 93       	push	r17
	uint8_t status;
	clearbit(TWCR,TWIE);
 4ac:	96 b7       	in	r25, 0x36	; 54
 4ae:	9e 7f       	andi	r25, 0xFE	; 254
 4b0:	96 bf       	out	0x36, r25	; 54
	//sent start condition
	TWCR=TWI_START;
 4b2:	94 ea       	ldi	r25, 0xA4	; 164
 4b4:	96 bf       	out	0x36, r25	; 54
	while((TWCR&0x80)==0x00){};
 4b6:	06 b6       	in	r0, 0x36	; 54
 4b8:	07 fe       	sbrs	r0, 7
 4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <MASTER_Receiver+0xc>
	status=TWSR&0xF8;
 4bc:	11 b1       	in	r17, 0x01	; 1
 4be:	18 7f       	andi	r17, 0xF8	; 248
	if(status!=MASTER_GIVE_STA){
 4c0:	18 30       	cpi	r17, 0x08	; 8
 4c2:	29 f0       	breq	.+10     	; 0x4ce <MASTER_Receiver+0x24>
		TWCR=TWI_STOP;
 4c4:	84 e9       	ldi	r24, 0x94	; 148
 4c6:	86 bf       	out	0x36, r24	; 54
		Init_TWI();
 4c8:	0e 94 06 02 	call	0x40c	; 0x40c <Init_TWI>
		return status;
 4cc:	45 c0       	rjmp	.+138    	; 0x558 <MASTER_Receiver+0xae>
	}
	
	//sent device's address
	TWDR=(addr<<1)+TWI_R;
 4ce:	88 0f       	add	r24, r24
 4d0:	8f 5f       	subi	r24, 0xFF	; 255
 4d2:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_CLEAR_TWINT;
 4d4:	84 e8       	ldi	r24, 0x84	; 132
 4d6:	86 bf       	out	0x36, r24	; 54
	while((TWSR&0x80)==0x00){};
 4d8:	0f 9b       	sbis	0x01, 7	; 1
 4da:	fe cf       	rjmp	.-4      	; 0x4d8 <MASTER_Receiver+0x2e>
	status=TWSR&0xF8;
 4dc:	11 b1       	in	r17, 0x01	; 1
 4de:	18 7f       	andi	r17, 0xF8	; 248
	if(status!=MASTER_TRANS_SLA_R_REACK){
 4e0:	10 34       	cpi	r17, 0x40	; 64
 4e2:	31 f4       	brne	.+12     	; 0x4f0 <MASTER_Receiver+0x46>
		TWCR=TWI_STOP;
		Init_TWI();
		return status;
	}
	//receiver bytes data
	for(int i=0;i<lenght;i++){
 4e4:	24 2f       	mov	r18, r20
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	12 16       	cp	r1, r18
 4ea:	13 06       	cpc	r1, r19
 4ec:	34 f0       	brlt	.+12     	; 0x4fa <MASTER_Receiver+0x50>
 4ee:	1c c0       	rjmp	.+56     	; 0x528 <MASTER_Receiver+0x7e>
	TWDR=(addr<<1)+TWI_R;
	TWCR=TWI_CLEAR_TWINT;
	while((TWSR&0x80)==0x00){};
	status=TWSR&0xF8;
	if(status!=MASTER_TRANS_SLA_R_REACK){
		TWCR=TWI_STOP;
 4f0:	84 e9       	ldi	r24, 0x94	; 148
 4f2:	86 bf       	out	0x36, r24	; 54
		Init_TWI();
 4f4:	0e 94 06 02 	call	0x40c	; 0x40c <Init_TWI>
		return status;
 4f8:	2f c0       	rjmp	.+94     	; 0x558 <MASTER_Receiver+0xae>
 4fa:	fb 01       	movw	r30, r22
	}
	//receiver bytes data
	for(int i=0;i<lenght;i++){
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	90 e0       	ldi	r25, 0x00	; 0
		TWCR= TWI_READ_ACK;
 500:	a4 ec       	ldi	r26, 0xC4	; 196
 502:	a6 bf       	out	0x36, r26	; 54
		while((TWCR&0x80)==0x00){};
 504:	06 b6       	in	r0, 0x36	; 54
 506:	07 fe       	sbrs	r0, 7
 508:	fd cf       	rjmp	.-6      	; 0x504 <MASTER_Receiver+0x5a>
		status=TWSR&0xF8;
 50a:	11 b1       	in	r17, 0x01	; 1
 50c:	18 7f       	andi	r17, 0xF8	; 248
	    if(status!=MASTER_RECEIVER_DATA_TRACK){
 50e:	10 35       	cpi	r17, 0x50	; 80
 510:	29 f0       	breq	.+10     	; 0x51c <MASTER_Receiver+0x72>
			TWCR=TWI_STOP;
 512:	84 e9       	ldi	r24, 0x94	; 148
 514:	86 bf       	out	0x36, r24	; 54
			Init_TWI();
 516:	0e 94 06 02 	call	0x40c	; 0x40c <Init_TWI>
			return status;
 51a:	1e c0       	rjmp	.+60     	; 0x558 <MASTER_Receiver+0xae>
		}	
		data[i]=TWDR;
 51c:	53 b1       	in	r21, 0x03	; 3
 51e:	51 93       	st	Z+, r21
		TWCR=TWI_STOP;
		Init_TWI();
		return status;
	}
	//receiver bytes data
	for(int i=0;i<lenght;i++){
 520:	01 96       	adiw	r24, 0x01	; 1
 522:	82 17       	cp	r24, r18
 524:	93 07       	cpc	r25, r19
 526:	6c f3       	brlt	.-38     	; 0x502 <MASTER_Receiver+0x58>
			return status;
		}	
		data[i]=TWDR;
	}
	//receiver last data
	TWCR=TWI_CLEAR_TWINT;
 528:	84 e8       	ldi	r24, 0x84	; 132
 52a:	86 bf       	out	0x36, r24	; 54
	while((TWSR&0x80)==0x00){};
 52c:	0f 9b       	sbis	0x01, 7	; 1
 52e:	fe cf       	rjmp	.-4      	; 0x52c <MASTER_Receiver+0x82>
	status=TWSR&0xF8;
 530:	11 b1       	in	r17, 0x01	; 1
 532:	18 7f       	andi	r17, 0xF8	; 248
	if(status!=MASTER_RECEIVER_DATA_TRNACK){
 534:	18 35       	cpi	r17, 0x58	; 88
 536:	29 f0       	breq	.+10     	; 0x542 <MASTER_Receiver+0x98>
		TWCR=TWI_STOP;
 538:	84 e9       	ldi	r24, 0x94	; 148
 53a:	86 bf       	out	0x36, r24	; 54
		Init_TWI();
 53c:	0e 94 06 02 	call	0x40c	; 0x40c <Init_TWI>
		return status;
 540:	0b c0       	rjmp	.+22     	; 0x558 <MASTER_Receiver+0xae>
	}
	data[lenght-1]=TWDR;
 542:	83 b1       	in	r24, 0x03	; 3
 544:	64 0f       	add	r22, r20
 546:	71 1d       	adc	r23, r1
 548:	fb 01       	movw	r30, r22
 54a:	31 97       	sbiw	r30, 0x01	; 1
 54c:	80 83       	st	Z, r24
	//sent stop condition 
	TWCR=TWI_STOP;
 54e:	84 e9       	ldi	r24, 0x94	; 148
 550:	86 bf       	out	0x36, r24	; 54
	Init_TWI();
 552:	0e 94 06 02 	call	0x40c	; 0x40c <Init_TWI>
	return 0;
 556:	10 e0       	ldi	r17, 0x00	; 0
}
 558:	81 2f       	mov	r24, r17
 55a:	1f 91       	pop	r17
 55c:	08 95       	ret

0000055e <__vector_19>:
//-------------------------------------------------------------------------

//code for slave------------------------------------------------------------
ISR(TWI_vect){
 55e:	1f 92       	push	r1
 560:	0f 92       	push	r0
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	0f 92       	push	r0
 566:	11 24       	eor	r1, r1
 568:	8f 93       	push	r24
 56a:	9f 93       	push	r25
 56c:	ef 93       	push	r30
 56e:	ff 93       	push	r31
	R_byte_num=0;
 570:	10 92 6d 00 	sts	0x006D, r1
	Tr_byte_num=0;
 574:	10 92 3a 01 	sts	0x013A, r1
	uint8_t status;
	status=TWSR;
 578:	81 b1       	in	r24, 0x01	; 1
//----------code for slave receiver-------------
    switch(status){
 57a:	88 39       	cpi	r24, 0x98	; 152
 57c:	09 f4       	brne	.+2      	; 0x580 <__vector_19+0x22>
 57e:	61 c0       	rjmp	.+194    	; 0x642 <__vector_19+0xe4>
 580:	89 39       	cpi	r24, 0x99	; 153
 582:	80 f4       	brcc	.+32     	; 0x5a4 <__vector_19+0x46>
 584:	80 38       	cpi	r24, 0x80	; 128
 586:	51 f1       	breq	.+84     	; 0x5dc <__vector_19+0x7e>
 588:	81 38       	cpi	r24, 0x81	; 129
 58a:	30 f4       	brcc	.+12     	; 0x598 <__vector_19+0x3a>
 58c:	80 36       	cpi	r24, 0x60	; 96
 58e:	01 f1       	breq	.+64     	; 0x5d0 <__vector_19+0x72>
 590:	80 37       	cpi	r24, 0x70	; 112
 592:	09 f0       	breq	.+2      	; 0x596 <__vector_19+0x38>
 594:	a1 c0       	rjmp	.+322    	; 0x6d8 <__vector_19+0x17a>
 596:	40 c0       	rjmp	.+128    	; 0x618 <__vector_19+0xba>
 598:	88 38       	cpi	r24, 0x88	; 136
 59a:	79 f1       	breq	.+94     	; 0x5fa <__vector_19+0x9c>
 59c:	80 39       	cpi	r24, 0x90	; 144
 59e:	09 f0       	breq	.+2      	; 0x5a2 <__vector_19+0x44>
 5a0:	9b c0       	rjmp	.+310    	; 0x6d8 <__vector_19+0x17a>
 5a2:	40 c0       	rjmp	.+128    	; 0x624 <__vector_19+0xc6>
 5a4:	80 3b       	cpi	r24, 0xB0	; 176
 5a6:	09 f4       	brne	.+2      	; 0x5aa <__vector_19+0x4c>
 5a8:	70 c0       	rjmp	.+224    	; 0x68a <__vector_19+0x12c>
 5aa:	81 3b       	cpi	r24, 0xB1	; 177
 5ac:	38 f4       	brcc	.+14     	; 0x5bc <__vector_19+0x5e>
 5ae:	80 3a       	cpi	r24, 0xA0	; 160
 5b0:	09 f4       	brne	.+2      	; 0x5b4 <__vector_19+0x56>
 5b2:	56 c0       	rjmp	.+172    	; 0x660 <__vector_19+0x102>
 5b4:	88 3a       	cpi	r24, 0xA8	; 168
 5b6:	09 f0       	breq	.+2      	; 0x5ba <__vector_19+0x5c>
 5b8:	8f c0       	rjmp	.+286    	; 0x6d8 <__vector_19+0x17a>
 5ba:	56 c0       	rjmp	.+172    	; 0x668 <__vector_19+0x10a>
 5bc:	80 3c       	cpi	r24, 0xC0	; 192
 5be:	09 f4       	brne	.+2      	; 0x5c2 <__vector_19+0x64>
 5c0:	7c c0       	rjmp	.+248    	; 0x6ba <__vector_19+0x15c>
 5c2:	88 3c       	cpi	r24, 0xC8	; 200
 5c4:	09 f4       	brne	.+2      	; 0x5c8 <__vector_19+0x6a>
 5c6:	7d c0       	rjmp	.+250    	; 0x6c2 <__vector_19+0x164>
 5c8:	88 3b       	cpi	r24, 0xB8	; 184
 5ca:	09 f0       	breq	.+2      	; 0x5ce <__vector_19+0x70>
 5cc:	85 c0       	rjmp	.+266    	; 0x6d8 <__vector_19+0x17a>
 5ce:	69 c0       	rjmp	.+210    	; 0x6a2 <__vector_19+0x144>
	case ADDRESS_SLAVE_RECEIVER_MATCH :
		R_byte_num=0;
 5d0:	10 92 6d 00 	sts	0x006D, r1
		TWCR|=(1<<TWINT)|(1<<TWEA);
 5d4:	86 b7       	in	r24, 0x36	; 54
 5d6:	80 6c       	ori	r24, 0xC0	; 192
 5d8:	86 bf       	out	0x36, r24	; 54
	    break;
 5da:	7e c0       	rjmp	.+252    	; 0x6d8 <__vector_19+0x17a>
		
	case SLAVE_RECEIVER_DATA_TRACK :
		slave_reciver_data[R_byte_num++]=TWDR;
 5dc:	80 91 6d 00 	lds	r24, 0x006D
 5e0:	93 b1       	in	r25, 0x03	; 3
 5e2:	e4 ed       	ldi	r30, 0xD4	; 212
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	e8 0f       	add	r30, r24
 5e8:	f1 1d       	adc	r31, r1
 5ea:	90 83       	st	Z, r25
 5ec:	8f 5f       	subi	r24, 0xFF	; 255
 5ee:	80 93 6d 00 	sts	0x006D, r24
		TWCR|=(1<<TWINT)|(1<<TWEA);
 5f2:	86 b7       	in	r24, 0x36	; 54
 5f4:	80 6c       	ori	r24, 0xC0	; 192
 5f6:	86 bf       	out	0x36, r24	; 54
		break;	
 5f8:	6f c0       	rjmp	.+222    	; 0x6d8 <__vector_19+0x17a>
	case SLAVE_RECEIVER_DATA_TRNACK :
		slave_reciver_data[R_byte_num++]=TWDR;
 5fa:	80 91 6d 00 	lds	r24, 0x006D
 5fe:	93 b1       	in	r25, 0x03	; 3
 600:	e4 ed       	ldi	r30, 0xD4	; 212
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	e8 0f       	add	r30, r24
 606:	f1 1d       	adc	r31, r1
 608:	90 83       	st	Z, r25
 60a:	8f 5f       	subi	r24, 0xFF	; 255
 60c:	80 93 6d 00 	sts	0x006D, r24
		TWCR|=(1<<TWINT)|(1<<TWEA);
 610:	86 b7       	in	r24, 0x36	; 54
 612:	80 6c       	ori	r24, 0xC0	; 192
 614:	86 bf       	out	0x36, r24	; 54
	    break;
 616:	60 c0       	rjmp	.+192    	; 0x6d8 <__vector_19+0x17a>
	case SLAVE_GENERAL_CALL :
	    R_byte_num=0;
 618:	10 92 6d 00 	sts	0x006D, r1
		TWCR|=(1<<TWINT)|(1<<TWEA);
 61c:	86 b7       	in	r24, 0x36	; 54
 61e:	80 6c       	ori	r24, 0xC0	; 192
 620:	86 bf       	out	0x36, r24	; 54
	    break;
 622:	5a c0       	rjmp	.+180    	; 0x6d8 <__vector_19+0x17a>
	case SLAVE_GENERAL_CALL_TRACK :
		slave_reciver_data[R_byte_num++]=TWDR;
 624:	80 91 6d 00 	lds	r24, 0x006D
 628:	93 b1       	in	r25, 0x03	; 3
 62a:	e4 ed       	ldi	r30, 0xD4	; 212
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	e8 0f       	add	r30, r24
 630:	f1 1d       	adc	r31, r1
 632:	90 83       	st	Z, r25
 634:	8f 5f       	subi	r24, 0xFF	; 255
 636:	80 93 6d 00 	sts	0x006D, r24
		TWCR|=(1<<TWINT)|(1<<TWEA);
 63a:	86 b7       	in	r24, 0x36	; 54
 63c:	80 6c       	ori	r24, 0xC0	; 192
 63e:	86 bf       	out	0x36, r24	; 54
	    break;
 640:	4b c0       	rjmp	.+150    	; 0x6d8 <__vector_19+0x17a>
	case SLAVE_GENERAL_CALL_TRNACK :
		slave_reciver_data[R_byte_num++]=TWDR;
 642:	80 91 6d 00 	lds	r24, 0x006D
 646:	93 b1       	in	r25, 0x03	; 3
 648:	e4 ed       	ldi	r30, 0xD4	; 212
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	e8 0f       	add	r30, r24
 64e:	f1 1d       	adc	r31, r1
 650:	90 83       	st	Z, r25
 652:	8f 5f       	subi	r24, 0xFF	; 255
 654:	80 93 6d 00 	sts	0x006D, r24
		TWCR|=(1<<TWINT)|(1<<TWEA);
 658:	86 b7       	in	r24, 0x36	; 54
 65a:	80 6c       	ori	r24, 0xC0	; 192
 65c:	86 bf       	out	0x36, r24	; 54
		break;
 65e:	3c c0       	rjmp	.+120    	; 0x6d8 <__vector_19+0x17a>
	case STOP_CALL_SLAVE :
		TWCR|=(1<<TWINT)|(1<<TWEA);
 660:	86 b7       	in	r24, 0x36	; 54
 662:	80 6c       	ori	r24, 0xC0	; 192
 664:	86 bf       	out	0x36, r24	; 54
	    break;	
 666:	38 c0       	rjmp	.+112    	; 0x6d8 <__vector_19+0x17a>
//----------code for slave transmitter----------
    case ADDRESS_SLAVE_TRANS_MATCH :
	    Tr_byte_num++;
 668:	80 91 3a 01 	lds	r24, 0x013A
 66c:	8f 5f       	subi	r24, 0xFF	; 255
 66e:	80 93 3a 01 	sts	0x013A, r24
		TWDR=slave_trans_data[Tr_byte_num];
 672:	80 91 3a 01 	lds	r24, 0x013A
 676:	ee e6       	ldi	r30, 0x6E	; 110
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	e8 0f       	add	r30, r24
 67c:	f1 1d       	adc	r31, r1
 67e:	80 81       	ld	r24, Z
 680:	83 b9       	out	0x03, r24	; 3
		TWCR|=(1<<TWINT)|(1<<TWEA);
 682:	86 b7       	in	r24, 0x36	; 54
 684:	80 6c       	ori	r24, 0xC0	; 192
 686:	86 bf       	out	0x36, r24	; 54
	    break;
 688:	27 c0       	rjmp	.+78     	; 0x6d8 <__vector_19+0x17a>
	case MASTER_LOST_SLA_TRANS_MATCH :
		TWDR=slave_trans_data[Tr_byte_num];
 68a:	80 91 3a 01 	lds	r24, 0x013A
 68e:	ee e6       	ldi	r30, 0x6E	; 110
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	e8 0f       	add	r30, r24
 694:	f1 1d       	adc	r31, r1
 696:	80 81       	ld	r24, Z
 698:	83 b9       	out	0x03, r24	; 3
		TWCR|=(1<<TWINT)|(1<<TWEA);
 69a:	86 b7       	in	r24, 0x36	; 54
 69c:	80 6c       	ori	r24, 0xC0	; 192
 69e:	86 bf       	out	0x36, r24	; 54
		break;	
 6a0:	1b c0       	rjmp	.+54     	; 0x6d8 <__vector_19+0x17a>
	case SLAVE_TRANS_DATA_REACK :
		TWDR=slave_trans_data[Tr_byte_num];
 6a2:	80 91 3a 01 	lds	r24, 0x013A
 6a6:	ee e6       	ldi	r30, 0x6E	; 110
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	e8 0f       	add	r30, r24
 6ac:	f1 1d       	adc	r31, r1
 6ae:	80 81       	ld	r24, Z
 6b0:	83 b9       	out	0x03, r24	; 3
		TWCR|=(1<<TWINT)|(1<<TWEA);
 6b2:	86 b7       	in	r24, 0x36	; 54
 6b4:	80 6c       	ori	r24, 0xC0	; 192
 6b6:	86 bf       	out	0x36, r24	; 54
		break;
 6b8:	0f c0       	rjmp	.+30     	; 0x6d8 <__vector_19+0x17a>
	case SLAVE_TRANS_DATA_RENACK :
		TWCR|=(1<<TWINT)|(1<<TWEA);
 6ba:	86 b7       	in	r24, 0x36	; 54
 6bc:	80 6c       	ori	r24, 0xC0	; 192
 6be:	86 bf       	out	0x36, r24	; 54
		break;
 6c0:	0b c0       	rjmp	.+22     	; 0x6d8 <__vector_19+0x17a>
	case SLAVE_TRANS_DATA_LAST :
		TWDR=slave_trans_data[Tr_byte_num];
 6c2:	80 91 3a 01 	lds	r24, 0x013A
 6c6:	ee e6       	ldi	r30, 0x6E	; 110
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	e8 0f       	add	r30, r24
 6cc:	f1 1d       	adc	r31, r1
 6ce:	80 81       	ld	r24, Z
 6d0:	83 b9       	out	0x03, r24	; 3
		TWCR|=(1<<TWINT)|(1<<TWEA);
 6d2:	86 b7       	in	r24, 0x36	; 54
 6d4:	80 6c       	ori	r24, 0xC0	; 192
 6d6:	86 bf       	out	0x36, r24	; 54
	    break;	
	default:
	break;			
}
 6d8:	ff 91       	pop	r31
 6da:	ef 91       	pop	r30
 6dc:	9f 91       	pop	r25
 6de:	8f 91       	pop	r24
 6e0:	0f 90       	pop	r0
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	0f 90       	pop	r0
 6e6:	1f 90       	pop	r1
 6e8:	18 95       	reti

000006ea <__fixsfsi>:
 6ea:	04 d0       	rcall	.+8      	; 0x6f4 <__fixunssfsi>
 6ec:	68 94       	set
 6ee:	b1 11       	cpse	r27, r1
 6f0:	8d c0       	rjmp	.+282    	; 0x80c <__fp_szero>
 6f2:	08 95       	ret

000006f4 <__fixunssfsi>:
 6f4:	70 d0       	rcall	.+224    	; 0x7d6 <__fp_splitA>
 6f6:	88 f0       	brcs	.+34     	; 0x71a <__fixunssfsi+0x26>
 6f8:	9f 57       	subi	r25, 0x7F	; 127
 6fa:	90 f0       	brcs	.+36     	; 0x720 <__fixunssfsi+0x2c>
 6fc:	b9 2f       	mov	r27, r25
 6fe:	99 27       	eor	r25, r25
 700:	b7 51       	subi	r27, 0x17	; 23
 702:	a0 f0       	brcs	.+40     	; 0x72c <__fixunssfsi+0x38>
 704:	d1 f0       	breq	.+52     	; 0x73a <__fixunssfsi+0x46>
 706:	66 0f       	add	r22, r22
 708:	77 1f       	adc	r23, r23
 70a:	88 1f       	adc	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	1a f0       	brmi	.+6      	; 0x716 <__fixunssfsi+0x22>
 710:	ba 95       	dec	r27
 712:	c9 f7       	brne	.-14     	; 0x706 <__fixunssfsi+0x12>
 714:	12 c0       	rjmp	.+36     	; 0x73a <__fixunssfsi+0x46>
 716:	b1 30       	cpi	r27, 0x01	; 1
 718:	81 f0       	breq	.+32     	; 0x73a <__fixunssfsi+0x46>
 71a:	77 d0       	rcall	.+238    	; 0x80a <__fp_zero>
 71c:	b1 e0       	ldi	r27, 0x01	; 1
 71e:	08 95       	ret
 720:	74 c0       	rjmp	.+232    	; 0x80a <__fp_zero>
 722:	67 2f       	mov	r22, r23
 724:	78 2f       	mov	r23, r24
 726:	88 27       	eor	r24, r24
 728:	b8 5f       	subi	r27, 0xF8	; 248
 72a:	39 f0       	breq	.+14     	; 0x73a <__fixunssfsi+0x46>
 72c:	b9 3f       	cpi	r27, 0xF9	; 249
 72e:	cc f3       	brlt	.-14     	; 0x722 <__fixunssfsi+0x2e>
 730:	86 95       	lsr	r24
 732:	77 95       	ror	r23
 734:	67 95       	ror	r22
 736:	b3 95       	inc	r27
 738:	d9 f7       	brne	.-10     	; 0x730 <__fixunssfsi+0x3c>
 73a:	3e f4       	brtc	.+14     	; 0x74a <__fixunssfsi+0x56>
 73c:	90 95       	com	r25
 73e:	80 95       	com	r24
 740:	70 95       	com	r23
 742:	61 95       	neg	r22
 744:	7f 4f       	sbci	r23, 0xFF	; 255
 746:	8f 4f       	sbci	r24, 0xFF	; 255
 748:	9f 4f       	sbci	r25, 0xFF	; 255
 74a:	08 95       	ret

0000074c <__floatunsisf>:
 74c:	e8 94       	clt
 74e:	09 c0       	rjmp	.+18     	; 0x762 <__floatsisf+0x12>

00000750 <__floatsisf>:
 750:	97 fb       	bst	r25, 7
 752:	3e f4       	brtc	.+14     	; 0x762 <__floatsisf+0x12>
 754:	90 95       	com	r25
 756:	80 95       	com	r24
 758:	70 95       	com	r23
 75a:	61 95       	neg	r22
 75c:	7f 4f       	sbci	r23, 0xFF	; 255
 75e:	8f 4f       	sbci	r24, 0xFF	; 255
 760:	9f 4f       	sbci	r25, 0xFF	; 255
 762:	99 23       	and	r25, r25
 764:	a9 f0       	breq	.+42     	; 0x790 <__floatsisf+0x40>
 766:	f9 2f       	mov	r31, r25
 768:	96 e9       	ldi	r25, 0x96	; 150
 76a:	bb 27       	eor	r27, r27
 76c:	93 95       	inc	r25
 76e:	f6 95       	lsr	r31
 770:	87 95       	ror	r24
 772:	77 95       	ror	r23
 774:	67 95       	ror	r22
 776:	b7 95       	ror	r27
 778:	f1 11       	cpse	r31, r1
 77a:	f8 cf       	rjmp	.-16     	; 0x76c <__floatsisf+0x1c>
 77c:	fa f4       	brpl	.+62     	; 0x7bc <__floatsisf+0x6c>
 77e:	bb 0f       	add	r27, r27
 780:	11 f4       	brne	.+4      	; 0x786 <__floatsisf+0x36>
 782:	60 ff       	sbrs	r22, 0
 784:	1b c0       	rjmp	.+54     	; 0x7bc <__floatsisf+0x6c>
 786:	6f 5f       	subi	r22, 0xFF	; 255
 788:	7f 4f       	sbci	r23, 0xFF	; 255
 78a:	8f 4f       	sbci	r24, 0xFF	; 255
 78c:	9f 4f       	sbci	r25, 0xFF	; 255
 78e:	16 c0       	rjmp	.+44     	; 0x7bc <__floatsisf+0x6c>
 790:	88 23       	and	r24, r24
 792:	11 f0       	breq	.+4      	; 0x798 <__floatsisf+0x48>
 794:	96 e9       	ldi	r25, 0x96	; 150
 796:	11 c0       	rjmp	.+34     	; 0x7ba <__floatsisf+0x6a>
 798:	77 23       	and	r23, r23
 79a:	21 f0       	breq	.+8      	; 0x7a4 <__floatsisf+0x54>
 79c:	9e e8       	ldi	r25, 0x8E	; 142
 79e:	87 2f       	mov	r24, r23
 7a0:	76 2f       	mov	r23, r22
 7a2:	05 c0       	rjmp	.+10     	; 0x7ae <__floatsisf+0x5e>
 7a4:	66 23       	and	r22, r22
 7a6:	71 f0       	breq	.+28     	; 0x7c4 <__floatsisf+0x74>
 7a8:	96 e8       	ldi	r25, 0x86	; 134
 7aa:	86 2f       	mov	r24, r22
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	2a f0       	brmi	.+10     	; 0x7bc <__floatsisf+0x6c>
 7b2:	9a 95       	dec	r25
 7b4:	66 0f       	add	r22, r22
 7b6:	77 1f       	adc	r23, r23
 7b8:	88 1f       	adc	r24, r24
 7ba:	da f7       	brpl	.-10     	; 0x7b2 <__floatsisf+0x62>
 7bc:	88 0f       	add	r24, r24
 7be:	96 95       	lsr	r25
 7c0:	87 95       	ror	r24
 7c2:	97 f9       	bld	r25, 7
 7c4:	08 95       	ret

000007c6 <__fp_split3>:
 7c6:	57 fd       	sbrc	r21, 7
 7c8:	90 58       	subi	r25, 0x80	; 128
 7ca:	44 0f       	add	r20, r20
 7cc:	55 1f       	adc	r21, r21
 7ce:	59 f0       	breq	.+22     	; 0x7e6 <__fp_splitA+0x10>
 7d0:	5f 3f       	cpi	r21, 0xFF	; 255
 7d2:	71 f0       	breq	.+28     	; 0x7f0 <__fp_splitA+0x1a>
 7d4:	47 95       	ror	r20

000007d6 <__fp_splitA>:
 7d6:	88 0f       	add	r24, r24
 7d8:	97 fb       	bst	r25, 7
 7da:	99 1f       	adc	r25, r25
 7dc:	61 f0       	breq	.+24     	; 0x7f6 <__fp_splitA+0x20>
 7de:	9f 3f       	cpi	r25, 0xFF	; 255
 7e0:	79 f0       	breq	.+30     	; 0x800 <__fp_splitA+0x2a>
 7e2:	87 95       	ror	r24
 7e4:	08 95       	ret
 7e6:	12 16       	cp	r1, r18
 7e8:	13 06       	cpc	r1, r19
 7ea:	14 06       	cpc	r1, r20
 7ec:	55 1f       	adc	r21, r21
 7ee:	f2 cf       	rjmp	.-28     	; 0x7d4 <__fp_split3+0xe>
 7f0:	46 95       	lsr	r20
 7f2:	f1 df       	rcall	.-30     	; 0x7d6 <__fp_splitA>
 7f4:	08 c0       	rjmp	.+16     	; 0x806 <__fp_splitA+0x30>
 7f6:	16 16       	cp	r1, r22
 7f8:	17 06       	cpc	r1, r23
 7fa:	18 06       	cpc	r1, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	f1 cf       	rjmp	.-30     	; 0x7e2 <__fp_splitA+0xc>
 800:	86 95       	lsr	r24
 802:	71 05       	cpc	r23, r1
 804:	61 05       	cpc	r22, r1
 806:	08 94       	sec
 808:	08 95       	ret

0000080a <__fp_zero>:
 80a:	e8 94       	clt

0000080c <__fp_szero>:
 80c:	bb 27       	eor	r27, r27
 80e:	66 27       	eor	r22, r22
 810:	77 27       	eor	r23, r23
 812:	cb 01       	movw	r24, r22
 814:	97 f9       	bld	r25, 7
 816:	08 95       	ret

00000818 <pow>:
 818:	fa 01       	movw	r30, r20
 81a:	ee 0f       	add	r30, r30
 81c:	ff 1f       	adc	r31, r31
 81e:	30 96       	adiw	r30, 0x00	; 0
 820:	21 05       	cpc	r18, r1
 822:	31 05       	cpc	r19, r1
 824:	99 f1       	breq	.+102    	; 0x88c <__stack+0x2d>
 826:	61 15       	cp	r22, r1
 828:	71 05       	cpc	r23, r1
 82a:	61 f4       	brne	.+24     	; 0x844 <pow+0x2c>
 82c:	80 38       	cpi	r24, 0x80	; 128
 82e:	bf e3       	ldi	r27, 0x3F	; 63
 830:	9b 07       	cpc	r25, r27
 832:	49 f1       	breq	.+82     	; 0x886 <__stack+0x27>
 834:	68 94       	set
 836:	90 38       	cpi	r25, 0x80	; 128
 838:	81 05       	cpc	r24, r1
 83a:	61 f0       	breq	.+24     	; 0x854 <pow+0x3c>
 83c:	80 38       	cpi	r24, 0x80	; 128
 83e:	bf ef       	ldi	r27, 0xFF	; 255
 840:	9b 07       	cpc	r25, r27
 842:	41 f0       	breq	.+16     	; 0x854 <pow+0x3c>
 844:	99 23       	and	r25, r25
 846:	42 f5       	brpl	.+80     	; 0x898 <__stack+0x39>
 848:	ff 3f       	cpi	r31, 0xFF	; 255
 84a:	e1 05       	cpc	r30, r1
 84c:	31 05       	cpc	r19, r1
 84e:	21 05       	cpc	r18, r1
 850:	11 f1       	breq	.+68     	; 0x896 <__stack+0x37>
 852:	e8 94       	clt
 854:	08 94       	sec
 856:	e7 95       	ror	r30
 858:	d9 01       	movw	r26, r18
 85a:	aa 23       	and	r26, r26
 85c:	29 f4       	brne	.+10     	; 0x868 <__stack+0x9>
 85e:	ab 2f       	mov	r26, r27
 860:	be 2f       	mov	r27, r30
 862:	f8 5f       	subi	r31, 0xF8	; 248
 864:	d0 f3       	brcs	.-12     	; 0x85a <pow+0x42>
 866:	10 c0       	rjmp	.+32     	; 0x888 <__stack+0x29>
 868:	ff 5f       	subi	r31, 0xFF	; 255
 86a:	70 f4       	brcc	.+28     	; 0x888 <__stack+0x29>
 86c:	a6 95       	lsr	r26
 86e:	e0 f7       	brcc	.-8      	; 0x868 <__stack+0x9>
 870:	f7 39       	cpi	r31, 0x97	; 151
 872:	50 f0       	brcs	.+20     	; 0x888 <__stack+0x29>
 874:	19 f0       	breq	.+6      	; 0x87c <__stack+0x1d>
 876:	ff 3a       	cpi	r31, 0xAF	; 175
 878:	38 f4       	brcc	.+14     	; 0x888 <__stack+0x29>
 87a:	9f 77       	andi	r25, 0x7F	; 127
 87c:	9f 93       	push	r25
 87e:	0c d0       	rcall	.+24     	; 0x898 <__stack+0x39>
 880:	0f 90       	pop	r0
 882:	07 fc       	sbrc	r0, 7
 884:	90 58       	subi	r25, 0x80	; 128
 886:	08 95       	ret
 888:	3e f0       	brts	.+14     	; 0x898 <__stack+0x39>
 88a:	49 c0       	rjmp	.+146    	; 0x91e <__fp_nan>
 88c:	60 e0       	ldi	r22, 0x00	; 0
 88e:	70 e0       	ldi	r23, 0x00	; 0
 890:	80 e8       	ldi	r24, 0x80	; 128
 892:	9f e3       	ldi	r25, 0x3F	; 63
 894:	08 95       	ret
 896:	4f e7       	ldi	r20, 0x7F	; 127
 898:	9f 77       	andi	r25, 0x7F	; 127
 89a:	5f 93       	push	r21
 89c:	4f 93       	push	r20
 89e:	3f 93       	push	r19
 8a0:	2f 93       	push	r18
 8a2:	a7 d0       	rcall	.+334    	; 0x9f2 <log>
 8a4:	2f 91       	pop	r18
 8a6:	3f 91       	pop	r19
 8a8:	4f 91       	pop	r20
 8aa:	5f 91       	pop	r21
 8ac:	15 d1       	rcall	.+554    	; 0xad8 <__mulsf3>
 8ae:	05 c0       	rjmp	.+10     	; 0x8ba <exp>
 8b0:	19 f4       	brne	.+6      	; 0x8b8 <__stack+0x59>
 8b2:	0e f0       	brts	.+2      	; 0x8b6 <__stack+0x57>
 8b4:	2e c0       	rjmp	.+92     	; 0x912 <__fp_inf>
 8b6:	a9 cf       	rjmp	.-174    	; 0x80a <__fp_zero>
 8b8:	32 c0       	rjmp	.+100    	; 0x91e <__fp_nan>

000008ba <exp>:
 8ba:	8d df       	rcall	.-230    	; 0x7d6 <__fp_splitA>
 8bc:	c8 f3       	brcs	.-14     	; 0x8b0 <__stack+0x51>
 8be:	96 38       	cpi	r25, 0x86	; 134
 8c0:	c0 f7       	brcc	.-16     	; 0x8b2 <__stack+0x53>
 8c2:	07 f8       	bld	r0, 7
 8c4:	0f 92       	push	r0
 8c6:	e8 94       	clt
 8c8:	2b e3       	ldi	r18, 0x3B	; 59
 8ca:	3a ea       	ldi	r19, 0xAA	; 170
 8cc:	48 eb       	ldi	r20, 0xB8	; 184
 8ce:	5f e7       	ldi	r21, 0x7F	; 127
 8d0:	11 d1       	rcall	.+546    	; 0xaf4 <__mulsf3_pse>
 8d2:	0f 92       	push	r0
 8d4:	0f 92       	push	r0
 8d6:	0f 92       	push	r0
 8d8:	4d b7       	in	r20, 0x3d	; 61
 8da:	5e b7       	in	r21, 0x3e	; 62
 8dc:	0f 92       	push	r0
 8de:	c9 d0       	rcall	.+402    	; 0xa72 <modf>
 8e0:	e4 e5       	ldi	r30, 0x54	; 84
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	1f d0       	rcall	.+62     	; 0x924 <__fp_powser>
 8e6:	4f 91       	pop	r20
 8e8:	5f 91       	pop	r21
 8ea:	ef 91       	pop	r30
 8ec:	ff 91       	pop	r31
 8ee:	e5 95       	asr	r30
 8f0:	ee 1f       	adc	r30, r30
 8f2:	ff 1f       	adc	r31, r31
 8f4:	49 f0       	breq	.+18     	; 0x908 <exp+0x4e>
 8f6:	fe 57       	subi	r31, 0x7E	; 126
 8f8:	e0 68       	ori	r30, 0x80	; 128
 8fa:	44 27       	eor	r20, r20
 8fc:	ee 0f       	add	r30, r30
 8fe:	44 1f       	adc	r20, r20
 900:	fa 95       	dec	r31
 902:	e1 f7       	brne	.-8      	; 0x8fc <exp+0x42>
 904:	41 95       	neg	r20
 906:	55 0b       	sbc	r21, r21
 908:	3b d0       	rcall	.+118    	; 0x980 <ldexp>
 90a:	0f 90       	pop	r0
 90c:	07 fe       	sbrs	r0, 7
 90e:	2f c0       	rjmp	.+94     	; 0x96e <inverse>
 910:	08 95       	ret

00000912 <__fp_inf>:
 912:	97 f9       	bld	r25, 7
 914:	9f 67       	ori	r25, 0x7F	; 127
 916:	80 e8       	ldi	r24, 0x80	; 128
 918:	70 e0       	ldi	r23, 0x00	; 0
 91a:	60 e0       	ldi	r22, 0x00	; 0
 91c:	08 95       	ret

0000091e <__fp_nan>:
 91e:	9f ef       	ldi	r25, 0xFF	; 255
 920:	80 ec       	ldi	r24, 0xC0	; 192
 922:	08 95       	ret

00000924 <__fp_powser>:
 924:	df 93       	push	r29
 926:	cf 93       	push	r28
 928:	1f 93       	push	r17
 92a:	0f 93       	push	r16
 92c:	ff 92       	push	r15
 92e:	ef 92       	push	r14
 930:	df 92       	push	r13
 932:	7b 01       	movw	r14, r22
 934:	8c 01       	movw	r16, r24
 936:	68 94       	set
 938:	05 c0       	rjmp	.+10     	; 0x944 <__fp_powser+0x20>
 93a:	da 2e       	mov	r13, r26
 93c:	ef 01       	movw	r28, r30
 93e:	d8 d0       	rcall	.+432    	; 0xaf0 <__mulsf3x>
 940:	fe 01       	movw	r30, r28
 942:	e8 94       	clt
 944:	a5 91       	lpm	r26, Z+
 946:	25 91       	lpm	r18, Z+
 948:	35 91       	lpm	r19, Z+
 94a:	45 91       	lpm	r20, Z+
 94c:	55 91       	lpm	r21, Z+
 94e:	ae f3       	brts	.-22     	; 0x93a <__fp_powser+0x16>
 950:	ef 01       	movw	r28, r30
 952:	37 d1       	rcall	.+622    	; 0xbc2 <__addsf3x>
 954:	fe 01       	movw	r30, r28
 956:	97 01       	movw	r18, r14
 958:	a8 01       	movw	r20, r16
 95a:	da 94       	dec	r13
 95c:	79 f7       	brne	.-34     	; 0x93c <__fp_powser+0x18>
 95e:	df 90       	pop	r13
 960:	ef 90       	pop	r14
 962:	ff 90       	pop	r15
 964:	0f 91       	pop	r16
 966:	1f 91       	pop	r17
 968:	cf 91       	pop	r28
 96a:	df 91       	pop	r29
 96c:	08 95       	ret

0000096e <inverse>:
 96e:	9b 01       	movw	r18, r22
 970:	ac 01       	movw	r20, r24
 972:	60 e0       	ldi	r22, 0x00	; 0
 974:	70 e0       	ldi	r23, 0x00	; 0
 976:	80 e8       	ldi	r24, 0x80	; 128
 978:	9f e3       	ldi	r25, 0x3F	; 63
 97a:	76 c1       	rjmp	.+748    	; 0xc68 <__divsf3>
 97c:	ca cf       	rjmp	.-108    	; 0x912 <__fp_inf>
 97e:	dc c1       	rjmp	.+952    	; 0xd38 <__fp_mpack>

00000980 <ldexp>:
 980:	2a df       	rcall	.-428    	; 0x7d6 <__fp_splitA>
 982:	e8 f3       	brcs	.-6      	; 0x97e <inverse+0x10>
 984:	99 23       	and	r25, r25
 986:	d9 f3       	breq	.-10     	; 0x97e <inverse+0x10>
 988:	94 0f       	add	r25, r20
 98a:	51 1d       	adc	r21, r1
 98c:	bb f3       	brvs	.-18     	; 0x97c <inverse+0xe>
 98e:	91 50       	subi	r25, 0x01	; 1
 990:	50 40       	sbci	r21, 0x00	; 0
 992:	94 f0       	brlt	.+36     	; 0x9b8 <ldexp+0x38>
 994:	59 f0       	breq	.+22     	; 0x9ac <ldexp+0x2c>
 996:	88 23       	and	r24, r24
 998:	32 f0       	brmi	.+12     	; 0x9a6 <ldexp+0x26>
 99a:	66 0f       	add	r22, r22
 99c:	77 1f       	adc	r23, r23
 99e:	88 1f       	adc	r24, r24
 9a0:	91 50       	subi	r25, 0x01	; 1
 9a2:	50 40       	sbci	r21, 0x00	; 0
 9a4:	c1 f7       	brne	.-16     	; 0x996 <ldexp+0x16>
 9a6:	9e 3f       	cpi	r25, 0xFE	; 254
 9a8:	51 05       	cpc	r21, r1
 9aa:	44 f7       	brge	.-48     	; 0x97c <inverse+0xe>
 9ac:	88 0f       	add	r24, r24
 9ae:	91 1d       	adc	r25, r1
 9b0:	96 95       	lsr	r25
 9b2:	87 95       	ror	r24
 9b4:	97 f9       	bld	r25, 7
 9b6:	08 95       	ret
 9b8:	5f 3f       	cpi	r21, 0xFF	; 255
 9ba:	ac f0       	brlt	.+42     	; 0x9e6 <ldexp+0x66>
 9bc:	98 3e       	cpi	r25, 0xE8	; 232
 9be:	9c f0       	brlt	.+38     	; 0x9e6 <ldexp+0x66>
 9c0:	bb 27       	eor	r27, r27
 9c2:	86 95       	lsr	r24
 9c4:	77 95       	ror	r23
 9c6:	67 95       	ror	r22
 9c8:	b7 95       	ror	r27
 9ca:	08 f4       	brcc	.+2      	; 0x9ce <ldexp+0x4e>
 9cc:	b1 60       	ori	r27, 0x01	; 1
 9ce:	93 95       	inc	r25
 9d0:	c1 f7       	brne	.-16     	; 0x9c2 <ldexp+0x42>
 9d2:	bb 0f       	add	r27, r27
 9d4:	58 f7       	brcc	.-42     	; 0x9ac <ldexp+0x2c>
 9d6:	11 f4       	brne	.+4      	; 0x9dc <ldexp+0x5c>
 9d8:	60 ff       	sbrs	r22, 0
 9da:	e8 cf       	rjmp	.-48     	; 0x9ac <ldexp+0x2c>
 9dc:	6f 5f       	subi	r22, 0xFF	; 255
 9de:	7f 4f       	sbci	r23, 0xFF	; 255
 9e0:	8f 4f       	sbci	r24, 0xFF	; 255
 9e2:	9f 4f       	sbci	r25, 0xFF	; 255
 9e4:	e3 cf       	rjmp	.-58     	; 0x9ac <ldexp+0x2c>
 9e6:	12 cf       	rjmp	.-476    	; 0x80c <__fp_szero>
 9e8:	0e f0       	brts	.+2      	; 0x9ec <ldexp+0x6c>
 9ea:	a6 c1       	rjmp	.+844    	; 0xd38 <__fp_mpack>
 9ec:	98 cf       	rjmp	.-208    	; 0x91e <__fp_nan>
 9ee:	68 94       	set
 9f0:	90 cf       	rjmp	.-224    	; 0x912 <__fp_inf>

000009f2 <log>:
 9f2:	f1 de       	rcall	.-542    	; 0x7d6 <__fp_splitA>
 9f4:	c8 f3       	brcs	.-14     	; 0x9e8 <ldexp+0x68>
 9f6:	99 23       	and	r25, r25
 9f8:	d1 f3       	breq	.-12     	; 0x9ee <ldexp+0x6e>
 9fa:	c6 f3       	brts	.-16     	; 0x9ec <ldexp+0x6c>
 9fc:	df 93       	push	r29
 9fe:	cf 93       	push	r28
 a00:	1f 93       	push	r17
 a02:	0f 93       	push	r16
 a04:	ff 92       	push	r15
 a06:	c9 2f       	mov	r28, r25
 a08:	dd 27       	eor	r29, r29
 a0a:	88 23       	and	r24, r24
 a0c:	2a f0       	brmi	.+10     	; 0xa18 <log+0x26>
 a0e:	21 97       	sbiw	r28, 0x01	; 1
 a10:	66 0f       	add	r22, r22
 a12:	77 1f       	adc	r23, r23
 a14:	88 1f       	adc	r24, r24
 a16:	da f7       	brpl	.-10     	; 0xa0e <log+0x1c>
 a18:	20 e0       	ldi	r18, 0x00	; 0
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	40 e8       	ldi	r20, 0x80	; 128
 a1e:	5f eb       	ldi	r21, 0xBF	; 191
 a20:	9f e3       	ldi	r25, 0x3F	; 63
 a22:	88 39       	cpi	r24, 0x98	; 152
 a24:	20 f0       	brcs	.+8      	; 0xa2e <log+0x3c>
 a26:	80 3e       	cpi	r24, 0xE0	; 224
 a28:	30 f0       	brcs	.+12     	; 0xa36 <log+0x44>
 a2a:	21 96       	adiw	r28, 0x01	; 1
 a2c:	8f 77       	andi	r24, 0x7F	; 127
 a2e:	b8 d0       	rcall	.+368    	; 0xba0 <__addsf3>
 a30:	ec e7       	ldi	r30, 0x7C	; 124
 a32:	f0 e0       	ldi	r31, 0x00	; 0
 a34:	03 c0       	rjmp	.+6      	; 0xa3c <log+0x4a>
 a36:	b4 d0       	rcall	.+360    	; 0xba0 <__addsf3>
 a38:	e9 ea       	ldi	r30, 0xA9	; 169
 a3a:	f0 e0       	ldi	r31, 0x00	; 0
 a3c:	73 df       	rcall	.-282    	; 0x924 <__fp_powser>
 a3e:	8b 01       	movw	r16, r22
 a40:	be 01       	movw	r22, r28
 a42:	ec 01       	movw	r28, r24
 a44:	fb 2e       	mov	r15, r27
 a46:	6f 57       	subi	r22, 0x7F	; 127
 a48:	71 09       	sbc	r23, r1
 a4a:	75 95       	asr	r23
 a4c:	77 1f       	adc	r23, r23
 a4e:	88 0b       	sbc	r24, r24
 a50:	99 0b       	sbc	r25, r25
 a52:	7e de       	rcall	.-772    	; 0x750 <__floatsisf>
 a54:	28 e1       	ldi	r18, 0x18	; 24
 a56:	32 e7       	ldi	r19, 0x72	; 114
 a58:	41 e3       	ldi	r20, 0x31	; 49
 a5a:	5f e3       	ldi	r21, 0x3F	; 63
 a5c:	49 d0       	rcall	.+146    	; 0xaf0 <__mulsf3x>
 a5e:	af 2d       	mov	r26, r15
 a60:	98 01       	movw	r18, r16
 a62:	ae 01       	movw	r20, r28
 a64:	ff 90       	pop	r15
 a66:	0f 91       	pop	r16
 a68:	1f 91       	pop	r17
 a6a:	cf 91       	pop	r28
 a6c:	df 91       	pop	r29
 a6e:	a9 d0       	rcall	.+338    	; 0xbc2 <__addsf3x>
 a70:	7f c1       	rjmp	.+766    	; 0xd70 <__fp_round>

00000a72 <modf>:
 a72:	fa 01       	movw	r30, r20
 a74:	dc 01       	movw	r26, r24
 a76:	aa 0f       	add	r26, r26
 a78:	bb 1f       	adc	r27, r27
 a7a:	9b 01       	movw	r18, r22
 a7c:	ac 01       	movw	r20, r24
 a7e:	bf 57       	subi	r27, 0x7F	; 127
 a80:	28 f4       	brcc	.+10     	; 0xa8c <modf+0x1a>
 a82:	22 27       	eor	r18, r18
 a84:	33 27       	eor	r19, r19
 a86:	44 27       	eor	r20, r20
 a88:	50 78       	andi	r21, 0x80	; 128
 a8a:	1f c0       	rjmp	.+62     	; 0xaca <modf+0x58>
 a8c:	b7 51       	subi	r27, 0x17	; 23
 a8e:	88 f4       	brcc	.+34     	; 0xab2 <modf+0x40>
 a90:	ab 2f       	mov	r26, r27
 a92:	00 24       	eor	r0, r0
 a94:	46 95       	lsr	r20
 a96:	37 95       	ror	r19
 a98:	27 95       	ror	r18
 a9a:	01 1c       	adc	r0, r1
 a9c:	a3 95       	inc	r26
 a9e:	d2 f3       	brmi	.-12     	; 0xa94 <modf+0x22>
 aa0:	00 20       	and	r0, r0
 aa2:	69 f0       	breq	.+26     	; 0xabe <modf+0x4c>
 aa4:	22 0f       	add	r18, r18
 aa6:	33 1f       	adc	r19, r19
 aa8:	44 1f       	adc	r20, r20
 aaa:	b3 95       	inc	r27
 aac:	da f3       	brmi	.-10     	; 0xaa4 <modf+0x32>
 aae:	0d d0       	rcall	.+26     	; 0xaca <modf+0x58>
 ab0:	76 c0       	rjmp	.+236    	; 0xb9e <__subsf3>
 ab2:	61 30       	cpi	r22, 0x01	; 1
 ab4:	71 05       	cpc	r23, r1
 ab6:	a0 e8       	ldi	r26, 0x80	; 128
 ab8:	8a 07       	cpc	r24, r26
 aba:	b9 46       	sbci	r27, 0x69	; 105
 abc:	30 f4       	brcc	.+12     	; 0xaca <modf+0x58>
 abe:	9b 01       	movw	r18, r22
 ac0:	ac 01       	movw	r20, r24
 ac2:	66 27       	eor	r22, r22
 ac4:	77 27       	eor	r23, r23
 ac6:	88 27       	eor	r24, r24
 ac8:	90 78       	andi	r25, 0x80	; 128
 aca:	30 96       	adiw	r30, 0x00	; 0
 acc:	21 f0       	breq	.+8      	; 0xad6 <modf+0x64>
 ace:	20 83       	st	Z, r18
 ad0:	31 83       	std	Z+1, r19	; 0x01
 ad2:	42 83       	std	Z+2, r20	; 0x02
 ad4:	53 83       	std	Z+3, r21	; 0x03
 ad6:	08 95       	ret

00000ad8 <__mulsf3>:
 ad8:	0b d0       	rcall	.+22     	; 0xaf0 <__mulsf3x>
 ada:	4a c1       	rjmp	.+660    	; 0xd70 <__fp_round>
 adc:	3b d1       	rcall	.+630    	; 0xd54 <__fp_pscA>
 ade:	28 f0       	brcs	.+10     	; 0xaea <__mulsf3+0x12>
 ae0:	40 d1       	rcall	.+640    	; 0xd62 <__fp_pscB>
 ae2:	18 f0       	brcs	.+6      	; 0xaea <__mulsf3+0x12>
 ae4:	95 23       	and	r25, r21
 ae6:	09 f0       	breq	.+2      	; 0xaea <__mulsf3+0x12>
 ae8:	14 cf       	rjmp	.-472    	; 0x912 <__fp_inf>
 aea:	19 cf       	rjmp	.-462    	; 0x91e <__fp_nan>
 aec:	11 24       	eor	r1, r1
 aee:	8e ce       	rjmp	.-740    	; 0x80c <__fp_szero>

00000af0 <__mulsf3x>:
 af0:	6a de       	rcall	.-812    	; 0x7c6 <__fp_split3>
 af2:	a0 f3       	brcs	.-24     	; 0xadc <__mulsf3+0x4>

00000af4 <__mulsf3_pse>:
 af4:	95 9f       	mul	r25, r21
 af6:	d1 f3       	breq	.-12     	; 0xaec <__mulsf3+0x14>
 af8:	95 0f       	add	r25, r21
 afa:	50 e0       	ldi	r21, 0x00	; 0
 afc:	55 1f       	adc	r21, r21
 afe:	62 9f       	mul	r22, r18
 b00:	f0 01       	movw	r30, r0
 b02:	72 9f       	mul	r23, r18
 b04:	bb 27       	eor	r27, r27
 b06:	f0 0d       	add	r31, r0
 b08:	b1 1d       	adc	r27, r1
 b0a:	63 9f       	mul	r22, r19
 b0c:	aa 27       	eor	r26, r26
 b0e:	f0 0d       	add	r31, r0
 b10:	b1 1d       	adc	r27, r1
 b12:	aa 1f       	adc	r26, r26
 b14:	64 9f       	mul	r22, r20
 b16:	66 27       	eor	r22, r22
 b18:	b0 0d       	add	r27, r0
 b1a:	a1 1d       	adc	r26, r1
 b1c:	66 1f       	adc	r22, r22
 b1e:	82 9f       	mul	r24, r18
 b20:	22 27       	eor	r18, r18
 b22:	b0 0d       	add	r27, r0
 b24:	a1 1d       	adc	r26, r1
 b26:	62 1f       	adc	r22, r18
 b28:	73 9f       	mul	r23, r19
 b2a:	b0 0d       	add	r27, r0
 b2c:	a1 1d       	adc	r26, r1
 b2e:	62 1f       	adc	r22, r18
 b30:	83 9f       	mul	r24, r19
 b32:	a0 0d       	add	r26, r0
 b34:	61 1d       	adc	r22, r1
 b36:	22 1f       	adc	r18, r18
 b38:	74 9f       	mul	r23, r20
 b3a:	33 27       	eor	r19, r19
 b3c:	a0 0d       	add	r26, r0
 b3e:	61 1d       	adc	r22, r1
 b40:	23 1f       	adc	r18, r19
 b42:	84 9f       	mul	r24, r20
 b44:	60 0d       	add	r22, r0
 b46:	21 1d       	adc	r18, r1
 b48:	82 2f       	mov	r24, r18
 b4a:	76 2f       	mov	r23, r22
 b4c:	6a 2f       	mov	r22, r26
 b4e:	11 24       	eor	r1, r1
 b50:	9f 57       	subi	r25, 0x7F	; 127
 b52:	50 40       	sbci	r21, 0x00	; 0
 b54:	8a f0       	brmi	.+34     	; 0xb78 <__mulsf3_pse+0x84>
 b56:	e1 f0       	breq	.+56     	; 0xb90 <__mulsf3_pse+0x9c>
 b58:	88 23       	and	r24, r24
 b5a:	4a f0       	brmi	.+18     	; 0xb6e <__mulsf3_pse+0x7a>
 b5c:	ee 0f       	add	r30, r30
 b5e:	ff 1f       	adc	r31, r31
 b60:	bb 1f       	adc	r27, r27
 b62:	66 1f       	adc	r22, r22
 b64:	77 1f       	adc	r23, r23
 b66:	88 1f       	adc	r24, r24
 b68:	91 50       	subi	r25, 0x01	; 1
 b6a:	50 40       	sbci	r21, 0x00	; 0
 b6c:	a9 f7       	brne	.-22     	; 0xb58 <__mulsf3_pse+0x64>
 b6e:	9e 3f       	cpi	r25, 0xFE	; 254
 b70:	51 05       	cpc	r21, r1
 b72:	70 f0       	brcs	.+28     	; 0xb90 <__mulsf3_pse+0x9c>
 b74:	ce ce       	rjmp	.-612    	; 0x912 <__fp_inf>
 b76:	4a ce       	rjmp	.-876    	; 0x80c <__fp_szero>
 b78:	5f 3f       	cpi	r21, 0xFF	; 255
 b7a:	ec f3       	brlt	.-6      	; 0xb76 <__mulsf3_pse+0x82>
 b7c:	98 3e       	cpi	r25, 0xE8	; 232
 b7e:	dc f3       	brlt	.-10     	; 0xb76 <__mulsf3_pse+0x82>
 b80:	86 95       	lsr	r24
 b82:	77 95       	ror	r23
 b84:	67 95       	ror	r22
 b86:	b7 95       	ror	r27
 b88:	f7 95       	ror	r31
 b8a:	e7 95       	ror	r30
 b8c:	9f 5f       	subi	r25, 0xFF	; 255
 b8e:	c1 f7       	brne	.-16     	; 0xb80 <__mulsf3_pse+0x8c>
 b90:	fe 2b       	or	r31, r30
 b92:	88 0f       	add	r24, r24
 b94:	91 1d       	adc	r25, r1
 b96:	96 95       	lsr	r25
 b98:	87 95       	ror	r24
 b9a:	97 f9       	bld	r25, 7
 b9c:	08 95       	ret

00000b9e <__subsf3>:
 b9e:	50 58       	subi	r21, 0x80	; 128

00000ba0 <__addsf3>:
 ba0:	bb 27       	eor	r27, r27
 ba2:	aa 27       	eor	r26, r26
 ba4:	0e d0       	rcall	.+28     	; 0xbc2 <__addsf3x>
 ba6:	e4 c0       	rjmp	.+456    	; 0xd70 <__fp_round>
 ba8:	d5 d0       	rcall	.+426    	; 0xd54 <__fp_pscA>
 baa:	30 f0       	brcs	.+12     	; 0xbb8 <__addsf3+0x18>
 bac:	da d0       	rcall	.+436    	; 0xd62 <__fp_pscB>
 bae:	20 f0       	brcs	.+8      	; 0xbb8 <__addsf3+0x18>
 bb0:	31 f4       	brne	.+12     	; 0xbbe <__addsf3+0x1e>
 bb2:	9f 3f       	cpi	r25, 0xFF	; 255
 bb4:	11 f4       	brne	.+4      	; 0xbba <__addsf3+0x1a>
 bb6:	1e f4       	brtc	.+6      	; 0xbbe <__addsf3+0x1e>
 bb8:	b2 ce       	rjmp	.-668    	; 0x91e <__fp_nan>
 bba:	0e f4       	brtc	.+2      	; 0xbbe <__addsf3+0x1e>
 bbc:	e0 95       	com	r30
 bbe:	e7 fb       	bst	r30, 7
 bc0:	a8 ce       	rjmp	.-688    	; 0x912 <__fp_inf>

00000bc2 <__addsf3x>:
 bc2:	e9 2f       	mov	r30, r25
 bc4:	00 de       	rcall	.-1024   	; 0x7c6 <__fp_split3>
 bc6:	80 f3       	brcs	.-32     	; 0xba8 <__addsf3+0x8>
 bc8:	ba 17       	cp	r27, r26
 bca:	62 07       	cpc	r22, r18
 bcc:	73 07       	cpc	r23, r19
 bce:	84 07       	cpc	r24, r20
 bd0:	95 07       	cpc	r25, r21
 bd2:	18 f0       	brcs	.+6      	; 0xbda <__addsf3x+0x18>
 bd4:	71 f4       	brne	.+28     	; 0xbf2 <__addsf3x+0x30>
 bd6:	9e f5       	brtc	.+102    	; 0xc3e <__addsf3x+0x7c>
 bd8:	18 ce       	rjmp	.-976    	; 0x80a <__fp_zero>
 bda:	0e f4       	brtc	.+2      	; 0xbde <__addsf3x+0x1c>
 bdc:	e0 95       	com	r30
 bde:	0b 2e       	mov	r0, r27
 be0:	ba 2f       	mov	r27, r26
 be2:	a0 2d       	mov	r26, r0
 be4:	0b 01       	movw	r0, r22
 be6:	b9 01       	movw	r22, r18
 be8:	90 01       	movw	r18, r0
 bea:	0c 01       	movw	r0, r24
 bec:	ca 01       	movw	r24, r20
 bee:	a0 01       	movw	r20, r0
 bf0:	11 24       	eor	r1, r1
 bf2:	ff 27       	eor	r31, r31
 bf4:	59 1b       	sub	r21, r25
 bf6:	99 f0       	breq	.+38     	; 0xc1e <__addsf3x+0x5c>
 bf8:	59 3f       	cpi	r21, 0xF9	; 249
 bfa:	50 f4       	brcc	.+20     	; 0xc10 <__addsf3x+0x4e>
 bfc:	50 3e       	cpi	r21, 0xE0	; 224
 bfe:	68 f1       	brcs	.+90     	; 0xc5a <__addsf3x+0x98>
 c00:	1a 16       	cp	r1, r26
 c02:	f0 40       	sbci	r31, 0x00	; 0
 c04:	a2 2f       	mov	r26, r18
 c06:	23 2f       	mov	r18, r19
 c08:	34 2f       	mov	r19, r20
 c0a:	44 27       	eor	r20, r20
 c0c:	58 5f       	subi	r21, 0xF8	; 248
 c0e:	f3 cf       	rjmp	.-26     	; 0xbf6 <__addsf3x+0x34>
 c10:	46 95       	lsr	r20
 c12:	37 95       	ror	r19
 c14:	27 95       	ror	r18
 c16:	a7 95       	ror	r26
 c18:	f0 40       	sbci	r31, 0x00	; 0
 c1a:	53 95       	inc	r21
 c1c:	c9 f7       	brne	.-14     	; 0xc10 <__addsf3x+0x4e>
 c1e:	7e f4       	brtc	.+30     	; 0xc3e <__addsf3x+0x7c>
 c20:	1f 16       	cp	r1, r31
 c22:	ba 0b       	sbc	r27, r26
 c24:	62 0b       	sbc	r22, r18
 c26:	73 0b       	sbc	r23, r19
 c28:	84 0b       	sbc	r24, r20
 c2a:	ba f0       	brmi	.+46     	; 0xc5a <__addsf3x+0x98>
 c2c:	91 50       	subi	r25, 0x01	; 1
 c2e:	a1 f0       	breq	.+40     	; 0xc58 <__addsf3x+0x96>
 c30:	ff 0f       	add	r31, r31
 c32:	bb 1f       	adc	r27, r27
 c34:	66 1f       	adc	r22, r22
 c36:	77 1f       	adc	r23, r23
 c38:	88 1f       	adc	r24, r24
 c3a:	c2 f7       	brpl	.-16     	; 0xc2c <__addsf3x+0x6a>
 c3c:	0e c0       	rjmp	.+28     	; 0xc5a <__addsf3x+0x98>
 c3e:	ba 0f       	add	r27, r26
 c40:	62 1f       	adc	r22, r18
 c42:	73 1f       	adc	r23, r19
 c44:	84 1f       	adc	r24, r20
 c46:	48 f4       	brcc	.+18     	; 0xc5a <__addsf3x+0x98>
 c48:	87 95       	ror	r24
 c4a:	77 95       	ror	r23
 c4c:	67 95       	ror	r22
 c4e:	b7 95       	ror	r27
 c50:	f7 95       	ror	r31
 c52:	9e 3f       	cpi	r25, 0xFE	; 254
 c54:	08 f0       	brcs	.+2      	; 0xc58 <__addsf3x+0x96>
 c56:	b3 cf       	rjmp	.-154    	; 0xbbe <__addsf3+0x1e>
 c58:	93 95       	inc	r25
 c5a:	88 0f       	add	r24, r24
 c5c:	08 f0       	brcs	.+2      	; 0xc60 <__addsf3x+0x9e>
 c5e:	99 27       	eor	r25, r25
 c60:	ee 0f       	add	r30, r30
 c62:	97 95       	ror	r25
 c64:	87 95       	ror	r24
 c66:	08 95       	ret

00000c68 <__divsf3>:
 c68:	0c d0       	rcall	.+24     	; 0xc82 <__divsf3x>
 c6a:	82 c0       	rjmp	.+260    	; 0xd70 <__fp_round>
 c6c:	7a d0       	rcall	.+244    	; 0xd62 <__fp_pscB>
 c6e:	40 f0       	brcs	.+16     	; 0xc80 <__divsf3+0x18>
 c70:	71 d0       	rcall	.+226    	; 0xd54 <__fp_pscA>
 c72:	30 f0       	brcs	.+12     	; 0xc80 <__divsf3+0x18>
 c74:	21 f4       	brne	.+8      	; 0xc7e <__divsf3+0x16>
 c76:	5f 3f       	cpi	r21, 0xFF	; 255
 c78:	19 f0       	breq	.+6      	; 0xc80 <__divsf3+0x18>
 c7a:	4b ce       	rjmp	.-874    	; 0x912 <__fp_inf>
 c7c:	51 11       	cpse	r21, r1
 c7e:	c6 cd       	rjmp	.-1140   	; 0x80c <__fp_szero>
 c80:	4e ce       	rjmp	.-868    	; 0x91e <__fp_nan>

00000c82 <__divsf3x>:
 c82:	a1 dd       	rcall	.-1214   	; 0x7c6 <__fp_split3>
 c84:	98 f3       	brcs	.-26     	; 0xc6c <__divsf3+0x4>

00000c86 <__divsf3_pse>:
 c86:	99 23       	and	r25, r25
 c88:	c9 f3       	breq	.-14     	; 0xc7c <__divsf3+0x14>
 c8a:	55 23       	and	r21, r21
 c8c:	b1 f3       	breq	.-20     	; 0xc7a <__divsf3+0x12>
 c8e:	95 1b       	sub	r25, r21
 c90:	55 0b       	sbc	r21, r21
 c92:	bb 27       	eor	r27, r27
 c94:	aa 27       	eor	r26, r26
 c96:	62 17       	cp	r22, r18
 c98:	73 07       	cpc	r23, r19
 c9a:	84 07       	cpc	r24, r20
 c9c:	38 f0       	brcs	.+14     	; 0xcac <__divsf3_pse+0x26>
 c9e:	9f 5f       	subi	r25, 0xFF	; 255
 ca0:	5f 4f       	sbci	r21, 0xFF	; 255
 ca2:	22 0f       	add	r18, r18
 ca4:	33 1f       	adc	r19, r19
 ca6:	44 1f       	adc	r20, r20
 ca8:	aa 1f       	adc	r26, r26
 caa:	a9 f3       	breq	.-22     	; 0xc96 <__divsf3_pse+0x10>
 cac:	33 d0       	rcall	.+102    	; 0xd14 <__divsf3_pse+0x8e>
 cae:	0e 2e       	mov	r0, r30
 cb0:	3a f0       	brmi	.+14     	; 0xcc0 <__divsf3_pse+0x3a>
 cb2:	e0 e8       	ldi	r30, 0x80	; 128
 cb4:	30 d0       	rcall	.+96     	; 0xd16 <__divsf3_pse+0x90>
 cb6:	91 50       	subi	r25, 0x01	; 1
 cb8:	50 40       	sbci	r21, 0x00	; 0
 cba:	e6 95       	lsr	r30
 cbc:	00 1c       	adc	r0, r0
 cbe:	ca f7       	brpl	.-14     	; 0xcb2 <__divsf3_pse+0x2c>
 cc0:	29 d0       	rcall	.+82     	; 0xd14 <__divsf3_pse+0x8e>
 cc2:	fe 2f       	mov	r31, r30
 cc4:	27 d0       	rcall	.+78     	; 0xd14 <__divsf3_pse+0x8e>
 cc6:	66 0f       	add	r22, r22
 cc8:	77 1f       	adc	r23, r23
 cca:	88 1f       	adc	r24, r24
 ccc:	bb 1f       	adc	r27, r27
 cce:	26 17       	cp	r18, r22
 cd0:	37 07       	cpc	r19, r23
 cd2:	48 07       	cpc	r20, r24
 cd4:	ab 07       	cpc	r26, r27
 cd6:	b0 e8       	ldi	r27, 0x80	; 128
 cd8:	09 f0       	breq	.+2      	; 0xcdc <__divsf3_pse+0x56>
 cda:	bb 0b       	sbc	r27, r27
 cdc:	80 2d       	mov	r24, r0
 cde:	bf 01       	movw	r22, r30
 ce0:	ff 27       	eor	r31, r31
 ce2:	93 58       	subi	r25, 0x83	; 131
 ce4:	5f 4f       	sbci	r21, 0xFF	; 255
 ce6:	2a f0       	brmi	.+10     	; 0xcf2 <__divsf3_pse+0x6c>
 ce8:	9e 3f       	cpi	r25, 0xFE	; 254
 cea:	51 05       	cpc	r21, r1
 cec:	68 f0       	brcs	.+26     	; 0xd08 <__divsf3_pse+0x82>
 cee:	11 ce       	rjmp	.-990    	; 0x912 <__fp_inf>
 cf0:	8d cd       	rjmp	.-1254   	; 0x80c <__fp_szero>
 cf2:	5f 3f       	cpi	r21, 0xFF	; 255
 cf4:	ec f3       	brlt	.-6      	; 0xcf0 <__divsf3_pse+0x6a>
 cf6:	98 3e       	cpi	r25, 0xE8	; 232
 cf8:	dc f3       	brlt	.-10     	; 0xcf0 <__divsf3_pse+0x6a>
 cfa:	86 95       	lsr	r24
 cfc:	77 95       	ror	r23
 cfe:	67 95       	ror	r22
 d00:	b7 95       	ror	r27
 d02:	f7 95       	ror	r31
 d04:	9f 5f       	subi	r25, 0xFF	; 255
 d06:	c9 f7       	brne	.-14     	; 0xcfa <__divsf3_pse+0x74>
 d08:	88 0f       	add	r24, r24
 d0a:	91 1d       	adc	r25, r1
 d0c:	96 95       	lsr	r25
 d0e:	87 95       	ror	r24
 d10:	97 f9       	bld	r25, 7
 d12:	08 95       	ret
 d14:	e1 e0       	ldi	r30, 0x01	; 1
 d16:	66 0f       	add	r22, r22
 d18:	77 1f       	adc	r23, r23
 d1a:	88 1f       	adc	r24, r24
 d1c:	bb 1f       	adc	r27, r27
 d1e:	62 17       	cp	r22, r18
 d20:	73 07       	cpc	r23, r19
 d22:	84 07       	cpc	r24, r20
 d24:	ba 07       	cpc	r27, r26
 d26:	20 f0       	brcs	.+8      	; 0xd30 <__divsf3_pse+0xaa>
 d28:	62 1b       	sub	r22, r18
 d2a:	73 0b       	sbc	r23, r19
 d2c:	84 0b       	sbc	r24, r20
 d2e:	ba 0b       	sbc	r27, r26
 d30:	ee 1f       	adc	r30, r30
 d32:	88 f7       	brcc	.-30     	; 0xd16 <__divsf3_pse+0x90>
 d34:	e0 95       	com	r30
 d36:	08 95       	ret

00000d38 <__fp_mpack>:
 d38:	9f 3f       	cpi	r25, 0xFF	; 255
 d3a:	31 f0       	breq	.+12     	; 0xd48 <__fp_mpack_finite+0xc>

00000d3c <__fp_mpack_finite>:
 d3c:	91 50       	subi	r25, 0x01	; 1
 d3e:	20 f4       	brcc	.+8      	; 0xd48 <__fp_mpack_finite+0xc>
 d40:	87 95       	ror	r24
 d42:	77 95       	ror	r23
 d44:	67 95       	ror	r22
 d46:	b7 95       	ror	r27
 d48:	88 0f       	add	r24, r24
 d4a:	91 1d       	adc	r25, r1
 d4c:	96 95       	lsr	r25
 d4e:	87 95       	ror	r24
 d50:	97 f9       	bld	r25, 7
 d52:	08 95       	ret

00000d54 <__fp_pscA>:
 d54:	00 24       	eor	r0, r0
 d56:	0a 94       	dec	r0
 d58:	16 16       	cp	r1, r22
 d5a:	17 06       	cpc	r1, r23
 d5c:	18 06       	cpc	r1, r24
 d5e:	09 06       	cpc	r0, r25
 d60:	08 95       	ret

00000d62 <__fp_pscB>:
 d62:	00 24       	eor	r0, r0
 d64:	0a 94       	dec	r0
 d66:	12 16       	cp	r1, r18
 d68:	13 06       	cpc	r1, r19
 d6a:	14 06       	cpc	r1, r20
 d6c:	05 06       	cpc	r0, r21
 d6e:	08 95       	ret

00000d70 <__fp_round>:
 d70:	09 2e       	mov	r0, r25
 d72:	03 94       	inc	r0
 d74:	00 0c       	add	r0, r0
 d76:	11 f4       	brne	.+4      	; 0xd7c <__fp_round+0xc>
 d78:	88 23       	and	r24, r24
 d7a:	52 f0       	brmi	.+20     	; 0xd90 <__fp_round+0x20>
 d7c:	bb 0f       	add	r27, r27
 d7e:	40 f4       	brcc	.+16     	; 0xd90 <__fp_round+0x20>
 d80:	bf 2b       	or	r27, r31
 d82:	11 f4       	brne	.+4      	; 0xd88 <__fp_round+0x18>
 d84:	60 ff       	sbrs	r22, 0
 d86:	04 c0       	rjmp	.+8      	; 0xd90 <__fp_round+0x20>
 d88:	6f 5f       	subi	r22, 0xFF	; 255
 d8a:	7f 4f       	sbci	r23, 0xFF	; 255
 d8c:	8f 4f       	sbci	r24, 0xFF	; 255
 d8e:	9f 4f       	sbci	r25, 0xFF	; 255
 d90:	08 95       	ret

00000d92 <__udivmodhi4>:
 d92:	aa 1b       	sub	r26, r26
 d94:	bb 1b       	sub	r27, r27
 d96:	51 e1       	ldi	r21, 0x11	; 17
 d98:	07 c0       	rjmp	.+14     	; 0xda8 <__udivmodhi4_ep>

00000d9a <__udivmodhi4_loop>:
 d9a:	aa 1f       	adc	r26, r26
 d9c:	bb 1f       	adc	r27, r27
 d9e:	a6 17       	cp	r26, r22
 da0:	b7 07       	cpc	r27, r23
 da2:	10 f0       	brcs	.+4      	; 0xda8 <__udivmodhi4_ep>
 da4:	a6 1b       	sub	r26, r22
 da6:	b7 0b       	sbc	r27, r23

00000da8 <__udivmodhi4_ep>:
 da8:	88 1f       	adc	r24, r24
 daa:	99 1f       	adc	r25, r25
 dac:	5a 95       	dec	r21
 dae:	a9 f7       	brne	.-22     	; 0xd9a <__udivmodhi4_loop>
 db0:	80 95       	com	r24
 db2:	90 95       	com	r25
 db4:	bc 01       	movw	r22, r24
 db6:	cd 01       	movw	r24, r26
 db8:	08 95       	ret

00000dba <__divmodhi4>:
 dba:	97 fb       	bst	r25, 7
 dbc:	09 2e       	mov	r0, r25
 dbe:	07 26       	eor	r0, r23
 dc0:	0a d0       	rcall	.+20     	; 0xdd6 <__divmodhi4_neg1>
 dc2:	77 fd       	sbrc	r23, 7
 dc4:	04 d0       	rcall	.+8      	; 0xdce <__divmodhi4_neg2>
 dc6:	e5 df       	rcall	.-54     	; 0xd92 <__udivmodhi4>
 dc8:	06 d0       	rcall	.+12     	; 0xdd6 <__divmodhi4_neg1>
 dca:	00 20       	and	r0, r0
 dcc:	1a f4       	brpl	.+6      	; 0xdd4 <__divmodhi4_exit>

00000dce <__divmodhi4_neg2>:
 dce:	70 95       	com	r23
 dd0:	61 95       	neg	r22
 dd2:	7f 4f       	sbci	r23, 0xFF	; 255

00000dd4 <__divmodhi4_exit>:
 dd4:	08 95       	ret

00000dd6 <__divmodhi4_neg1>:
 dd6:	f6 f7       	brtc	.-4      	; 0xdd4 <__divmodhi4_exit>
 dd8:	90 95       	com	r25
 dda:	81 95       	neg	r24
 ddc:	9f 4f       	sbci	r25, 0xFF	; 255
 dde:	08 95       	ret

00000de0 <_exit>:
 de0:	f8 94       	cli

00000de2 <__stop_program>:
 de2:	ff cf       	rjmp	.-2      	; 0xde2 <__stop_program>
