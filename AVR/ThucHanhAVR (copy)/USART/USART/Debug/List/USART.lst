
AVRASM ver. 2.1.30  F:\ThucHanhAVR\USART\Debug\List\USART.asm Tue Dec 01 22:39:50 2015

F:\ThucHanhAVR\USART\Debug\List\USART.asm(1088): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _ADC_data=R5
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 002a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 00a5 	JMP  _ADC_ISR
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 __RESET:
00002a 94f8      	CLI
00002b 27ee      	CLR  R30
00002c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00002d e0f1      	LDI  R31,1
00002e bffb      	OUT  GICR,R31
00002f bfeb      	OUT  GICR,R30
000030 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000031 e08d      	LDI  R24,(14-2)+1
000032 e0a2      	LDI  R26,2
000033 27bb      	CLR  R27
                 __CLEAR_REG:
000034 93ed      	ST   X+,R30
000035 958a      	DEC  R24
000036 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000037 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000038 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000039 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003a 93ed      	ST   X+,R30
00003b 9701      	SBIW R24,1
00003c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00003d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00003e bfed      	OUT  SPL,R30
00003f e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000040 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000041 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000042 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000043 940c 00b3 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * USART.c
                 ; *
                 ; * Created: 11/20/2015 9:07:43 PM
                 ; * Author: Le Ngoc An
                 ; * Group : D13CQDT02-N
                 ; */
                 ;    //Clock 8Mhz
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;    // Dien ap tham chieu AVCC, du lieu dich trai
                 ;#define VREF_TYPE ((0<<REFS1)|(1<<REFS0)|(1<<ADLAR))
                 ;
                 ;// Khai bao ket noi LCD
                 ;#define RS PORTD.2
                 ;#define EN PORTD.3
                 ;#define LCD_data PORTC
                 ;
                 ;unsigned char ADC_data;
                 ;
                 ;    // Ghi lenh len LCD
                 ;void LCD_instruction(unsigned char x)
                 ; 0000 0018 {
                 
                 	.CSEG
                 _LCD_instruction:
                 ; .FSTART _LCD_instruction
                 ; 0000 0019     RS = 0;
000045 93aa      	ST   -Y,R26
                 ;	x -> Y+0
000046 9892      	CBI  0x12,2
                 ; 0000 001A     LCD_data = x;
000047 d092      	RCALL SUBOPT_0x0
                 ; 0000 001B     EN = 0;
                 ; 0000 001C     EN = 1;
                 ; 0000 001D     delay_ms(2);
                 ; 0000 001E }
000048 c064      	RJMP _0x2000001
                 ; .FEND
                 ;    // Ghi ky tu len LCD
                 ;void LCD_write(unsigned char c)
                 ; 0000 0021 {
                 _LCD_write:
                 ; .FSTART _LCD_write
                 ; 0000 0022     RS = 1;
000049 93aa      	ST   -Y,R26
                 ;	c -> Y+0
00004a 9a92      	SBI  0x12,2
                 ; 0000 0023     LCD_data = c;
00004b d08e      	RCALL SUBOPT_0x0
                 ; 0000 0024     EN = 0;
                 ; 0000 0025     EN = 1;
                 ; 0000 0026     delay_ms(2);
                 ; 0000 0027 }
00004c c060      	RJMP _0x2000001
                 ; .FEND
                 ;void LCD_init()
                 ; 0000 0029 {
                 _LCD_init:
                 ; .FSTART _LCD_init
                 ; 0000 002A     LCD_instruction(0x30);
00004d e3a0      	LDI  R26,LOW(48)
00004e dff6      	RCALL _LCD_instruction
                 ; 0000 002B 	LCD_instruction(0x38); // 2 dong, font 5x7
00004f e3a8      	LDI  R26,LOW(56)
000050 dff4      	RCALL _LCD_instruction
                 ; 0000 002C 	LCD_instruction(0x01); // Xoa man hinh
000051 e0a1      	LDI  R26,LOW(1)
000052 dff2      	RCALL _LCD_instruction
                 ; 0000 002D 	LCD_instruction(0x0C); // Bat hien thi, xoa con tro
000053 e0ac      	LDI  R26,LOW(12)
000054 dff0      	RCALL _LCD_instruction
                 ; 0000 002E }
000055 9508      	RET
                 ; .FEND
                 ;
                 ;// Ghi gia tri dang thap phan
                 ;void Decimal_Convert(unsigned char d)
                 ; 0000 0032 {
                 _Decimal_Convert:
                 ; .FSTART _Decimal_Convert
                 ; 0000 0033       LCD_write(d/100+0x30);
000056 93aa      	ST   -Y,R26
                 ;	d -> Y+0
000057 81a8      	LD   R26,Y
000058 e0b0      	LDI  R27,0
000059 e6e4      	LDI  R30,LOW(100)
00005a e0f0      	LDI  R31,HIGH(100)
00005b d086      	RCALL SUBOPT_0x1
                 ; 0000 0034       LCD_write(d%100/10+0x30);
00005c e6e4      	LDI  R30,LOW(100)
00005d e0f0      	LDI  R31,HIGH(100)
00005e 940e 0205 	CALL __MODW21
000060 01df      	MOVW R26,R30
000061 e0ea      	LDI  R30,LOW(10)
000062 e0f0      	LDI  R31,HIGH(10)
000063 d07e      	RCALL SUBOPT_0x1
                 ; 0000 0035       LCD_write(d%10+0x30);
000064 e0ea      	LDI  R30,LOW(10)
000065 e0f0      	LDI  R31,HIGH(10)
000066 940e 0205 	CALL __MODW21
000068 d081      	RCALL SUBOPT_0x2
                 ; 0000 0036 }
000069 c043      	RJMP _0x2000001
                 ; .FEND
                 ;
                 ; // Hien thi dien ap
                 ;void Voltage_Convert(unsigned char v)
                 ; 0000 003A {
                 _Voltage_Convert:
                 ; .FSTART _Voltage_Convert
                 ; 0000 003B     unsigned int voltage;
                 ; 0000 003C     voltage = v * 1.953125f;
00006a 93aa      	ST   -Y,R26
00006b 931a      	ST   -Y,R17
00006c 930a      	ST   -Y,R16
                 ;	v -> Y+2
                 ;	voltage -> R16,R17
00006d 81ea      	LDD  R30,Y+2
00006e e0f0      	LDI  R31,0
00006f 940e 01e5 	CALL __CWD1
000071 940e 015d 	CALL __CDF1
                +
000073 e0a0     +LDI R26 , LOW ( 0x3FFA0000 )
000074 e0b0     +LDI R27 , HIGH ( 0x3FFA0000 )
000075 ef8a     +LDI R24 , BYTE3 ( 0x3FFA0000 )
000076 e39f     +LDI R25 , BYTE4 ( 0x3FFA0000 )
                 	__GETD2N 0x3FFA0000
000077 940e 018b 	CALL __MULF12
000079 940e 0124 	CALL __CFD1U
00007b 018f      	MOVW R16,R30
                 ; 0000 003D     LCD_write(voltage/100+0x30);
00007c 01d8      	MOVW R26,R16
00007d e6e4      	LDI  R30,LOW(100)
00007e e0f0      	LDI  R31,HIGH(100)
00007f 940e 01ea 	CALL __DIVW21U
000081 d068      	RCALL SUBOPT_0x2
                 ; 0000 003E     LCD_write('.');
000082 e2ae      	LDI  R26,LOW(46)
000083 dfc5      	RCALL _LCD_write
                 ; 0000 003F     LCD_write(voltage%100/10+0x30);
000084 01d8      	MOVW R26,R16
000085 e6e4      	LDI  R30,LOW(100)
000086 e0f0      	LDI  R31,HIGH(100)
000087 940e 0202 	CALL __MODW21U
000089 01df      	MOVW R26,R30
00008a e0ea      	LDI  R30,LOW(10)
00008b e0f0      	LDI  R31,HIGH(10)
00008c 940e 01ea 	CALL __DIVW21U
00008e d05b      	RCALL SUBOPT_0x2
                 ; 0000 0040     LCD_write(voltage%10+0x30);
00008f 01d8      	MOVW R26,R16
000090 e0ea      	LDI  R30,LOW(10)
000091 e0f0      	LDI  R31,HIGH(10)
000092 940e 0202 	CALL __MODW21U
000094 d055      	RCALL SUBOPT_0x2
                 ; 0000 0041     LCD_write('V');
000095 e5a6      	LDI  R26,LOW(86)
000096 dfb2      	RCALL _LCD_write
                 ; 0000 0042 }
000097 8119      	LDD  R17,Y+1
000098 8108      	LDD  R16,Y+0
000099 9623      	ADIW R28,3
00009a 9508      	RET
                 ; .FEND
                 ;    // Chuyen doi ADC
                 ;unsigned char Read_ADC(unsigned char ADC_Input)
                 ; 0000 0045 {
                 _Read_ADC:
                 ; .FSTART _Read_ADC
                 ; 0000 0046     ADMUX |= ADC_Input|VREF_TYPE;
00009b 93aa      	ST   -Y,R26
                 ;	ADC_Input -> Y+0
00009c b1e7      	IN   R30,0x7
00009d 2fae      	MOV  R26,R30
00009e 81e8      	LD   R30,Y
00009f 66e0      	ORI  R30,LOW(0x60)
0000a0 2bea      	OR   R30,R26
0000a1 b9e7      	OUT  0x7,R30
                 ; 0000 0047     ADCSRA |= (1<<ADSC);
0000a2 9a36      	SBI  0x6,6
                 ; 0000 0048     return ADCH;
0000a3 b1e5      	IN   R30,0x5
0000a4 c008      	RJMP _0x2000001
                 ; 0000 0049 }
                 ; .FEND
                 ;    //Ngat ADC
                 ;interrupt[ADC_INT]void ADC_ISR(void)
                 ; 0000 004C {
                 _ADC_ISR:
                 ; .FSTART _ADC_ISR
                 ; 0000 004D     ADC_data = ADCH;
0000a5 b055      	IN   R5,5
                 ; 0000 004E     ADCSRA |= (1<<ADSC);
0000a6 9a36      	SBI  0x6,6
                 ; 0000 004F }
0000a7 9518      	RETI
                 ; .FEND
                 ;void USART_Transmit(unsigned char data)
                 ; 0000 0051 {
                 _USART_Transmit:
                 ; .FSTART _USART_Transmit
                 ; 0000 0052     while(!(UCSRA&(1<<UDRE)));
0000a8 93aa      	ST   -Y,R26
                 ;	data -> Y+0
                 _0xF:
0000a9 9b5d      	SBIS 0xB,5
0000aa cffe      	RJMP _0xF
                 ; 0000 0053     UDR = data;
0000ab 81e8      	LD   R30,Y
0000ac b9ec      	OUT  0xC,R30
                 ; 0000 0054 }
                 _0x2000001:
0000ad 9621      	ADIW R28,1
0000ae 9508      	RET
                 ; .FEND
                 ;unsigned char USART_Receive(void)
                 ; 0000 0056 {
                 _USART_Receive:
                 ; .FSTART _USART_Receive
                 ; 0000 0057     while(!(UCSRA&(1<<RXC)));
                 _0x12:
0000af 9b5f      	SBIS 0xB,7
0000b0 cffe      	RJMP _0x12
                 ; 0000 0058     return UDR;
0000b1 b1ec      	IN   R30,0xC
0000b2 9508      	RET
                 ; 0000 0059 }
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 005E {
                 _main:
                 ; .FSTART _main
                 ; 0000 005F     unsigned char x;
                 ; 0000 0060     DDRC = 0xFF; // PORTC out
                 ;	x -> R17
0000b3 efef      	LDI  R30,LOW(255)
0000b4 bbe4      	OUT  0x14,R30
                 ; 0000 0061     DDRD = (1<<DDD3)|(1<<DDD2)|(1<<DDD1)|(0<<DDD0); // RxD: in; TxD: out
0000b5 e0ee      	LDI  R30,LOW(14)
0000b6 bbe1      	OUT  0x11,R30
                 ; 0000 0062     DDRA = (0<<DDA0);
0000b7 e0e0      	LDI  R30,LOW(0)
0000b8 bbea      	OUT  0x1A,R30
                 ; 0000 0063 
                 ; 0000 0064     // ADC initialization
                 ; 0000 0065     ADMUX = VREF_TYPE;
0000b9 e6e0      	LDI  R30,LOW(96)
0000ba b9e7      	OUT  0x7,R30
                 ; 0000 0066     ADCSRA = (1<<ADEN)|(0<<ADSC)|(1<<ADATE)|(0<<ADIF)|(1<<ADIE)|(0<<ADPS2)|(0<<ADPS1)|(0<<ADPS0);
0000bb eae8      	LDI  R30,LOW(168)
0000bc b9e6      	OUT  0x6,R30
                 ; 0000 0067     SFIOR = (0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0);
0000bd e0e0      	LDI  R30,LOW(0)
0000be bfe0      	OUT  0x30,R30
                 ; 0000 0068 
                 ; 0000 0069     // USART initalization
                 ; 0000 006A     // Communication parameter : 8 Data, 1 Stop bit, Even Parity bit
                 ; 0000 006B     // Mode : Asyschronous
                 ; 0000 006C     // Baud rate: 9600
                 ; 0000 006D     UCSRA = (0<<RXC)|(0<<TXC)|(0<<UDRE)|(0<<FE)|(0<<DOR)|(0<<PE)|(0<<U2X)|(0<<MPCM);
0000bf b9eb      	OUT  0xB,R30
                 ; 0000 006E     UCSRB = (0<<RXCIE)|(0<<TXCIE)|(0<<UDRIE)|(1<<RXEN)|(1<<TXEN)|(0<<UCSZ2)|(0<<RXB8)|(0<<TXB8);
0000c0 e1e8      	LDI  R30,LOW(24)
0000c1 b9ea      	OUT  0xA,R30
                 ; 0000 006F     UCSRC = (1<<URSEL)|(0<<UMSEL)|(1<<UPM1)|(0<<UPM0)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0)|(0<<UCPOL);
0000c2 eae6      	LDI  R30,LOW(166)
0000c3 bde0      	OUT  0x20,R30
                 ; 0000 0070     UBRRH=0x00;
0000c4 e0e0      	LDI  R30,LOW(0)
0000c5 bde0      	OUT  0x20,R30
                 ; 0000 0071     UBRRL=0x33;
0000c6 e3e3      	LDI  R30,LOW(51)
0000c7 b9e9      	OUT  0x9,R30
                 ; 0000 0072 
                 ; 0000 0073     #asm("sei"); // Cho phep ngat toan cuc
0000c8 9478      	sei
                 ; 0000 0074 
                 ; 0000 0075     Read_ADC(0);
0000c9 e0a0      	LDI  R26,LOW(0)
0000ca dfd0      	RCALL _Read_ADC
                 ; 0000 0076     LCD_init();
0000cb df81      	RCALL _LCD_init
                 ; 0000 0077 while (1)
                 _0x15:
                 ; 0000 0078     {
                 ; 0000 0079         USART_Transmit(ADC_data);
0000cc 2da5      	MOV  R26,R5
0000cd dfda      	RCALL _USART_Transmit
                 ; 0000 007A         x = USART_Receive();
0000ce dfe0      	RCALL _USART_Receive
0000cf 2f1e      	MOV  R17,R30
                 ; 0000 007B         LCD_instruction(0x82);
0000d0 e8a2      	LDI  R26,LOW(130)
0000d1 df73      	RCALL _LCD_instruction
                 ; 0000 007C         Decimal_Convert(x);
0000d2 2fa1      	MOV  R26,R17
0000d3 df82      	RCALL _Decimal_Convert
                 ; 0000 007D         LCD_instruction(0xC2);
0000d4 eca2      	LDI  R26,LOW(194)
0000d5 df6f      	RCALL _LCD_instruction
                 ; 0000 007E         Voltage_Convert(x);
0000d6 2fa1      	MOV  R26,R17
0000d7 df92      	RCALL _Voltage_Convert
                 ; 0000 007F     }
0000d8 cff3      	RJMP _0x15
                 ; 0000 0080 }
                 _0x18:
0000d9 cfff      	RJMP _0x18
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0000da 81e8      	LD   R30,Y
0000db bbe5      	OUT  0x15,R30
0000dc 9893      	CBI  0x12,3
0000dd 9a93      	SBI  0x12,3
0000de e0a2      	LDI  R26,LOW(2)
0000df e0b0      	LDI  R27,0
0000e0 940c 00ed 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0000e2 940e 01fd 	CALL __DIVW21
0000e4 5de0      	SUBI R30,-LOW(48)
0000e5 2fae      	MOV  R26,R30
0000e6 df62      	RCALL _LCD_write
0000e7 81a8      	LD   R26,Y
0000e8 27bb      	CLR  R27
0000e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0000ea 5de0      	SUBI R30,-LOW(48)
0000eb 2fae      	MOV  R26,R30
0000ec cf5c      	RJMP _LCD_write
                 
                 
                 	.CSEG
                 _delay_ms:
0000ed 9610      	adiw r26,0
0000ee f039      	breq __delay_ms1
                 __delay_ms0:
                +
0000ef ed80     +LDI R24 , LOW ( 0x7D0 )
0000f0 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0000f1 9701     +SBIW R24 , 1
0000f2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0000f3 95a8      	wdr
0000f4 9711      	sbiw r26,1
0000f5 f7c9      	brne __delay_ms0
                 __delay_ms1:
0000f6 9508      	ret
                 
                 __ROUND_REPACK:
0000f7 2355      	TST  R21
0000f8 f442      	BRPL __REPACK
0000f9 3850      	CPI  R21,0x80
0000fa f411      	BRNE __ROUND_REPACK0
0000fb ffe0      	SBRS R30,0
0000fc c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0000fd 9631      	ADIW R30,1
0000fe 1f69      	ADC  R22,R25
0000ff 1f79      	ADC  R23,R25
000100 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000101 e850      	LDI  R21,0x80
000102 2757      	EOR  R21,R23
000103 f411      	BRNE __REPACK0
000104 935f      	PUSH R21
000105 c073      	RJMP __ZERORES
                 __REPACK0:
000106 3f5f      	CPI  R21,0xFF
000107 f031      	BREQ __REPACK1
000108 0f66      	LSL  R22
000109 0c00      	LSL  R0
00010a 9557      	ROR  R21
00010b 9567      	ROR  R22
00010c 2f75      	MOV  R23,R21
00010d 9508      	RET
                 __REPACK1:
00010e 935f      	PUSH R21
00010f 2000      	TST  R0
000110 f00a      	BRMI __REPACK2
000111 c073      	RJMP __MAXRES
                 __REPACK2:
000112 c06c      	RJMP __MINRES
                 
                 __UNPACK:
000113 e850      	LDI  R21,0x80
000114 2e19      	MOV  R1,R25
000115 2215      	AND  R1,R21
000116 0f88      	LSL  R24
000117 1f99      	ROL  R25
000118 2795      	EOR  R25,R21
000119 0f55      	LSL  R21
00011a 9587      	ROR  R24
                 
                 __UNPACK1:
00011b e850      	LDI  R21,0x80
00011c 2e07      	MOV  R0,R23
00011d 2205      	AND  R0,R21
00011e 0f66      	LSL  R22
00011f 1f77      	ROL  R23
000120 2775      	EOR  R23,R21
000121 0f55      	LSL  R21
000122 9567      	ROR  R22
000123 9508      	RET
                 
                 __CFD1U:
000124 9468      	SET
000125 c001      	RJMP __CFD1U0
                 __CFD1:
000126 94e8      	CLT
                 __CFD1U0:
000127 935f      	PUSH R21
000128 dff2      	RCALL __UNPACK1
000129 3870      	CPI  R23,0x80
00012a f018      	BRLO __CFD10
00012b 3f7f      	CPI  R23,0xFF
00012c f408      	BRCC __CFD10
00012d c04b      	RJMP __ZERORES
                 __CFD10:
00012e e156      	LDI  R21,22
00012f 1b57      	SUB  R21,R23
000130 f4aa      	BRPL __CFD11
000131 9551      	NEG  R21
000132 3058      	CPI  R21,8
000133 f40e      	BRTC __CFD19
000134 3059      	CPI  R21,9
                 __CFD19:
000135 f030      	BRLO __CFD17
000136 efef      	SER  R30
000137 efff      	SER  R31
000138 ef6f      	SER  R22
000139 e77f      	LDI  R23,0x7F
00013a f977      	BLD  R23,7
00013b c01a      	RJMP __CFD15
                 __CFD17:
00013c 2777      	CLR  R23
00013d 2355      	TST  R21
00013e f0b9      	BREQ __CFD15
                 __CFD18:
00013f 0fee      	LSL  R30
000140 1fff      	ROL  R31
000141 1f66      	ROL  R22
000142 1f77      	ROL  R23
000143 955a      	DEC  R21
000144 f7d1      	BRNE __CFD18
000145 c010      	RJMP __CFD15
                 __CFD11:
000146 2777      	CLR  R23
                 __CFD12:
000147 3058      	CPI  R21,8
000148 f028      	BRLO __CFD13
000149 2fef      	MOV  R30,R31
00014a 2ff6      	MOV  R31,R22
00014b 2f67      	MOV  R22,R23
00014c 5058      	SUBI R21,8
00014d cff9      	RJMP __CFD12
                 __CFD13:
00014e 2355      	TST  R21
00014f f031      	BREQ __CFD15
                 __CFD14:
000150 9576      	LSR  R23
000151 9567      	ROR  R22
000152 95f7      	ROR  R31
000153 95e7      	ROR  R30
000154 955a      	DEC  R21
000155 f7d1      	BRNE __CFD14
                 __CFD15:
000156 2000      	TST  R0
000157 f40a      	BRPL __CFD16
000158 d084      	RCALL __ANEGD1
                 __CFD16:
000159 915f      	POP  R21
00015a 9508      	RET
                 
                 __CDF1U:
00015b 9468      	SET
00015c c001      	RJMP __CDF1U0
                 __CDF1:
00015d 94e8      	CLT
                 __CDF1U0:
00015e 9730      	SBIW R30,0
00015f 4060      	SBCI R22,0
000160 4070      	SBCI R23,0
000161 f0b1      	BREQ __CDF10
000162 2400      	CLR  R0
000163 f026      	BRTS __CDF11
000164 2377      	TST  R23
000165 f412      	BRPL __CDF11
000166 9400      	COM  R0
000167 d075      	RCALL __ANEGD1
                 __CDF11:
000168 2e17      	MOV  R1,R23
000169 e17e      	LDI  R23,30
00016a 2011      	TST  R1
                 __CDF12:
00016b f032      	BRMI __CDF13
00016c 957a      	DEC  R23
00016d 0fee      	LSL  R30
00016e 1fff      	ROL  R31
00016f 1f66      	ROL  R22
000170 1c11      	ROL  R1
000171 cff9      	RJMP __CDF12
                 __CDF13:
000172 2fef      	MOV  R30,R31
000173 2ff6      	MOV  R31,R22
000174 2d61      	MOV  R22,R1
000175 935f      	PUSH R21
000176 df8a      	RCALL __REPACK
000177 915f      	POP  R21
                 __CDF10:
000178 9508      	RET
                 
                 __ZERORES:
000179 27ee      	CLR  R30
00017a 27ff      	CLR  R31
00017b 2766      	CLR  R22
00017c 2777      	CLR  R23
00017d 915f      	POP  R21
00017e 9508      	RET
                 
                 __MINRES:
00017f efef      	SER  R30
000180 efff      	SER  R31
000181 e76f      	LDI  R22,0x7F
000182 ef7f      	SER  R23
000183 915f      	POP  R21
000184 9508      	RET
                 
                 __MAXRES:
000185 efef      	SER  R30
000186 efff      	SER  R31
000187 e76f      	LDI  R22,0x7F
000188 e77f      	LDI  R23,0x7F
000189 915f      	POP  R21
00018a 9508      	RET
                 
                 __MULF12:
00018b 935f      	PUSH R21
00018c df86      	RCALL __UNPACK
00018d 3870      	CPI  R23,0x80
00018e f351      	BREQ __ZERORES
00018f 3890      	CPI  R25,0x80
000190 f341      	BREQ __ZERORES
000191 2401      	EOR  R0,R1
000192 9408      	SEC
000193 1f79      	ADC  R23,R25
000194 f423      	BRVC __MULF124
000195 f31c      	BRLT __ZERORES
                 __MULF125:
000196 2000      	TST  R0
000197 f33a      	BRMI __MINRES
000198 cfec      	RJMP __MAXRES
                 __MULF124:
000199 920f      	PUSH R0
00019a 931f      	PUSH R17
00019b 932f      	PUSH R18
00019c 933f      	PUSH R19
00019d 934f      	PUSH R20
00019e 2711      	CLR  R17
00019f 2722      	CLR  R18
0001a0 2799      	CLR  R25
0001a1 9f68      	MUL  R22,R24
0001a2 01a0      	MOVW R20,R0
0001a3 9f8f      	MUL  R24,R31
0001a4 2d30      	MOV  R19,R0
0001a5 0d41      	ADD  R20,R1
0001a6 1f59      	ADC  R21,R25
0001a7 9f6b      	MUL  R22,R27
0001a8 0d30      	ADD  R19,R0
0001a9 1d41      	ADC  R20,R1
0001aa 1f59      	ADC  R21,R25
0001ab 9f8e      	MUL  R24,R30
0001ac d027      	RCALL __MULF126
0001ad 9fbf      	MUL  R27,R31
0001ae d025      	RCALL __MULF126
0001af 9f6a      	MUL  R22,R26
0001b0 d023      	RCALL __MULF126
0001b1 9fbe      	MUL  R27,R30
0001b2 d01d      	RCALL __MULF127
0001b3 9faf      	MUL  R26,R31
0001b4 d01b      	RCALL __MULF127
0001b5 9fae      	MUL  R26,R30
0001b6 0d11      	ADD  R17,R1
0001b7 1f29      	ADC  R18,R25
0001b8 1f39      	ADC  R19,R25
0001b9 1f49      	ADC  R20,R25
0001ba 1f59      	ADC  R21,R25
0001bb 2fe3      	MOV  R30,R19
0001bc 2ff4      	MOV  R31,R20
0001bd 2f65      	MOV  R22,R21
0001be 2f52      	MOV  R21,R18
0001bf 914f      	POP  R20
0001c0 913f      	POP  R19
0001c1 912f      	POP  R18
0001c2 911f      	POP  R17
0001c3 900f      	POP  R0
0001c4 2366      	TST  R22
0001c5 f02a      	BRMI __MULF122
0001c6 0f55      	LSL  R21
0001c7 1fee      	ROL  R30
0001c8 1fff      	ROL  R31
0001c9 1f66      	ROL  R22
0001ca c002      	RJMP __MULF123
                 __MULF122:
0001cb 9573      	INC  R23
0001cc f24b      	BRVS __MULF125
                 __MULF123:
0001cd df29      	RCALL __ROUND_REPACK
0001ce 915f      	POP  R21
0001cf 9508      	RET
                 
                 __MULF127:
0001d0 0d10      	ADD  R17,R0
0001d1 1d21      	ADC  R18,R1
0001d2 1f39      	ADC  R19,R25
0001d3 c002      	RJMP __MULF128
                 __MULF126:
0001d4 0d20      	ADD  R18,R0
0001d5 1d31      	ADC  R19,R1
                 __MULF128:
0001d6 1f49      	ADC  R20,R25
0001d7 1f59      	ADC  R21,R25
0001d8 9508      	RET
                 
                 __ANEGW1:
0001d9 95f1      	NEG  R31
0001da 95e1      	NEG  R30
0001db 40f0      	SBCI R31,0
0001dc 9508      	RET
                 
                 __ANEGD1:
0001dd 95f0      	COM  R31
0001de 9560      	COM  R22
0001df 9570      	COM  R23
0001e0 95e1      	NEG  R30
0001e1 4fff      	SBCI R31,-1
0001e2 4f6f      	SBCI R22,-1
0001e3 4f7f      	SBCI R23,-1
0001e4 9508      	RET
                 
                 __CWD1:
0001e5 2f6f      	MOV  R22,R31
0001e6 0f66      	ADD  R22,R22
0001e7 0b66      	SBC  R22,R22
0001e8 2f76      	MOV  R23,R22
0001e9 9508      	RET
                 
                 __DIVW21U:
0001ea 2400      	CLR  R0
0001eb 2411      	CLR  R1
0001ec e190      	LDI  R25,16
                 __DIVW21U1:
0001ed 0faa      	LSL  R26
0001ee 1fbb      	ROL  R27
0001ef 1c00      	ROL  R0
0001f0 1c11      	ROL  R1
0001f1 1a0e      	SUB  R0,R30
0001f2 0a1f      	SBC  R1,R31
0001f3 f418      	BRCC __DIVW21U2
0001f4 0e0e      	ADD  R0,R30
0001f5 1e1f      	ADC  R1,R31
0001f6 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001f7 60a1      	SBR  R26,1
                 __DIVW21U3:
0001f8 959a      	DEC  R25
0001f9 f799      	BRNE __DIVW21U1
0001fa 01fd      	MOVW R30,R26
0001fb 01d0      	MOVW R26,R0
0001fc 9508      	RET
                 
                 __DIVW21:
0001fd d015      	RCALL __CHKSIGNW
0001fe dfeb      	RCALL __DIVW21U
0001ff f40e      	BRTC __DIVW211
000200 dfd8      	RCALL __ANEGW1
                 __DIVW211:
000201 9508      	RET
                 
                 __MODW21U:
000202 dfe7      	RCALL __DIVW21U
000203 01fd      	MOVW R30,R26
000204 9508      	RET
                 
                 __MODW21:
000205 94e8      	CLT
000206 ffb7      	SBRS R27,7
000207 c004      	RJMP __MODW211
000208 95a0      	COM  R26
000209 95b0      	COM  R27
00020a 9611      	ADIW R26,1
00020b 9468      	SET
                 __MODW211:
00020c fdf7      	SBRC R31,7
00020d dfcb      	RCALL __ANEGW1
00020e dfdb      	RCALL __DIVW21U
00020f 01fd      	MOVW R30,R26
000210 f40e      	BRTC __MODW212
000211 dfc7      	RCALL __ANEGW1
                 __MODW212:
000212 9508      	RET
                 
                 __CHKSIGNW:
000213 94e8      	CLT
000214 fff7      	SBRS R31,7
000215 c002      	RJMP __CHKSW1
000216 dfc2      	RCALL __ANEGW1
000217 9468      	SET
                 __CHKSW1:
000218 ffb7      	SBRS R27,7
000219 c006      	RJMP __CHKSW2
00021a 95a0      	COM  R26
00021b 95b0      	COM  R27
00021c 9611      	ADIW R26,1
00021d f800      	BLD  R0,0
00021e 9403      	INC  R0
00021f fa00      	BST  R0,0
                 __CHKSW2:
000220 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  24 r1 :  16 r2 :   0 r3 :   0 r4 :   0 r5 :   2 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   6 r17:  10 r18:   7 r19:   8 r20:   8 r21:  44 r22:  31 r23:  30 
r24:  12 r25:  22 r26:  48 r27:  13 r28:   3 r29:   1 r30:  84 r31:  36 
x  :   2 y  :  16 z  :   0 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  16 add   :   7 
adiw  :   6 and   :   2 andi  :   0 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   7 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   1 brmi  :   4 brne  :   9 brpl  :   4 brsh  :   0 brtc  :   3 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  :  11 
cbi   :   2 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  15 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   8 
cp    :   0 cpc   :   0 cpi   :   9 cpse  :   0 dec   :   5 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   2 jmp   :  23 ld    :   5 ldd   :   3 ldi   :  65 
lds   :   0 lpm   :   0 lsl   :  10 lsr   :   1 mov   :  24 movw  :  11 
mul   :   9 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   1 out   :  20 pop   :  11 push  :  10 rcall :  42 ret   :  23 
reti  :   1 rjmp  :  27 rol   :  14 ror   :   7 sbc   :   2 sbci  :   6 
sbi   :   4 sbic  :   0 sbis  :   2 sbiw  :   4 sbr   :   1 sbrc  :   1 
sbrs  :   4 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  10 std   :   0 sts   :   0 sub   :   2 subi  :   3 swap  :   0 
tst   :   9 wdr   :   1 
Instructions used: 66 out of 116 (56.9%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000442   1090      0   1090   16384   6.7%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 1 warnings
