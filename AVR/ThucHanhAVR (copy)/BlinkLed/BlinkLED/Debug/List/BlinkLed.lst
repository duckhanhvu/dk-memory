
AVRASM ver. 2.1.30  F:\ThucHanhAVR\BlinkLed\Debug\List\BlinkLed.asm Tue Dec 01 09:02:00 2015

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 002a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 __RESET:
00002a 94f8      	CLI
00002b 27ee      	CLR  R30
00002c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00002d e0f1      	LDI  R31,1
00002e bffb      	OUT  GICR,R31
00002f bfeb      	OUT  GICR,R30
000030 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000031 e08d      	LDI  R24,(14-2)+1
000032 e0a2      	LDI  R26,2
000033 27bb      	CLR  R27
                 __CLEAR_REG:
000034 93ed      	ST   X+,R30
000035 958a      	DEC  R24
000036 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000037 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000038 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000039 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003a 93ed      	ST   X+,R30
00003b 9701      	SBIW R24,1
00003c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00003d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00003e bfed      	OUT  SPL,R30
00003f e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000040 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000041 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000042 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000043 940c 0045 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * BlinkLed.c
                 ; *
                 ; * Created: 09/1/2015 8:08:50 AM
                 ; * Author: Le Ngoc An
                 ; */
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;void main(void)
                 ; 0000 000C {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000D     unsigned char Left_val, Right_val;
                 ; 0000 000E     unsigned char Save_val, Move_val; // Save_val: bien luu gia tri, Move_val: bien di chuyen
                 ; 0000 000F     unsigned char i,j;
                 ; 0000 0010     DDRC = 0xFF; // PORTD out
                 ;	Left_val -> R17
                 ;	Right_val -> R16
                 ;	Save_val -> R19
                 ;	Move_val -> R18
                 ;	i -> R21
                 ;	j -> R20
000045 efef      	LDI  R30,LOW(255)
000046 bbe4      	OUT  0x14,R30
                 ; 0000 0011     DDRA = 0x00;    // PORTA in
000047 e0e0      	LDI  R30,LOW(0)
000048 bbea      	OUT  0x1A,R30
                 ; 0000 0012 while (1)
                 _0x3:
                 ; 0000 0013     {
                 ; 0000 0014         switch(PINA)
000049 b3e9      	IN   R30,0x19
                 ; 0000 0015         {
                 ; 0000 0016             // 1 Led sang chay qua lai
                 ; 0000 0017             case 0x01:
00004a 30e1      	CPI  R30,LOW(0x1)
00004b f491      	BRNE _0x9
                 ; 0000 0018                {
                 ; 0000 0019                     PORTC = 0x01;
00004c e0e1      	LDI  R30,LOW(1)
00004d bbe5      	OUT  0x15,R30
                 ; 0000 001A                     for(i=0;i<7;i++)
00004e e050      	LDI  R21,LOW(0)
                 _0xB:
00004f 3057      	CPI  R21,7
000050 f428      	BRSH _0xC
                 ; 0000 001B                     {
                 ; 0000 001C                          delay_ms(50);
000051 d0b5      	RCALL SUBOPT_0x0
                 ; 0000 001D                          PORTC = PORTC << 1;
000052 0fee      	LSL  R30
000053 bbe5      	OUT  0x15,R30
                 ; 0000 001E                     }
000054 5f5f      	SUBI R21,-1
000055 cff9      	RJMP _0xB
                 _0xC:
                 ; 0000 001F                     for(i=0;i<8;i++)
000056 e050      	LDI  R21,LOW(0)
                 _0xE:
000057 3058      	CPI  R21,8
000058 f420      	BRSH _0xF
                 ; 0000 0020                     {
                 ; 0000 0021                          delay_ms(50);
000059 d0ad      	RCALL SUBOPT_0x0
                 ; 0000 0022                          PORTC = PORTC >> 1;
00005a d0b2      	RCALL SUBOPT_0x1
                 ; 0000 0023                     }
00005b 5f5f      	SUBI R21,-1
00005c cffa      	RJMP _0xE
                 _0xF:
                 ; 0000 0024                     break;
00005d c0a7      	RJMP _0x8
                 ; 0000 0025                }
                 ; 0000 0026             // 8 led sang dan sau do tat dan
                 ; 0000 0027             case 0x02:
                 _0x9:
00005e 30e2      	CPI  R30,LOW(0x2)
00005f f499      	BRNE _0x10
                 ; 0000 0028                {
                 ; 0000 0029                     PORTC = 0x01;
000060 e0e1      	LDI  R30,LOW(1)
000061 bbe5      	OUT  0x15,R30
                 ; 0000 002A                     for(i=0;i<7;i++)
000062 e050      	LDI  R21,LOW(0)
                 _0x12:
000063 3057      	CPI  R21,7
000064 f430      	BRSH _0x13
                 ; 0000 002B                     {
                 ; 0000 002C                          delay_ms(50);
000065 d0a1      	RCALL SUBOPT_0x0
                 ; 0000 002D                          PORTC = PORTC << 1;
000066 0fee      	LSL  R30
000067 bbe5      	OUT  0x15,R30
                 ; 0000 002E                          PORTC = PORTC | 0x01;
000068 9aa8      	SBI  0x15,0
                 ; 0000 002F                     }
000069 5f5f      	SUBI R21,-1
00006a cff8      	RJMP _0x12
                 _0x13:
                 ; 0000 0030                     for(i=0;i<8;i++)
00006b e050      	LDI  R21,LOW(0)
                 _0x15:
00006c 3058      	CPI  R21,8
00006d f420      	BRSH _0x16
                 ; 0000 0031                     {
                 ; 0000 0032                          delay_ms(50);
00006e d098      	RCALL SUBOPT_0x0
                 ; 0000 0033                          PORTC = PORTC >> 1;
00006f d09d      	RCALL SUBOPT_0x1
                 ; 0000 0034                     }
000070 5f5f      	SUBI R21,-1
000071 cffa      	RJMP _0x15
                 _0x16:
                 ; 0000 0035                     break;
000072 c092      	RJMP _0x8
                 ; 0000 0036                }
                 ; 0000 0037             // 8 led sang tu hai ben sau do tat tu 2 ben vao
                 ; 0000 0038             case 0x04:
                 _0x10:
000073 30e4      	CPI  R30,LOW(0x4)
000074 f4e9      	BRNE _0x17
                 ; 0000 0039             {
                 ; 0000 003A                 Left_val  = 0x80;
000075 e810      	LDI  R17,LOW(128)
                 ; 0000 003B                 Right_val = 0x01;
000076 e001      	LDI  R16,LOW(1)
                 ; 0000 003C                 for(i=0;i<4;i++)
000077 e050      	LDI  R21,LOW(0)
                 _0x19:
000078 3054      	CPI  R21,4
000079 f458      	BRSH _0x1A
                 ; 0000 003D                 {
                 ; 0000 003E                     PORTC = Left_val|Right_val;
00007a d097      	RCALL SUBOPT_0x2
                 ; 0000 003F                     delay_ms(50);
                 ; 0000 0040                     Left_val = (Left_val >> 1)|0x80;
00007b 2fe1      	MOV  R30,R17
00007c 95e6      	LSR  R30
00007d 68e0      	ORI  R30,0x80
00007e 2f1e      	MOV  R17,R30
                 ; 0000 0041                     Right_val = (Right_val << 1)|0x01;
00007f 2fe0      	MOV  R30,R16
000080 0fee      	LSL  R30
000081 60e1      	ORI  R30,1
000082 2f0e      	MOV  R16,R30
                 ; 0000 0042                 }
000083 5f5f      	SUBI R21,-1
000084 cff3      	RJMP _0x19
                 _0x1A:
                 ; 0000 0043                 Left_val  = 0x7F;
000085 e71f      	LDI  R17,LOW(127)
                 ; 0000 0044                 Right_val = 0xFE;
000086 ef0e      	LDI  R16,LOW(254)
                 ; 0000 0045                 for(i=0;i<4;i++)
000087 e050      	LDI  R21,LOW(0)
                 _0x1C:
000088 3054      	CPI  R21,4
000089 f438      	BRSH _0x1D
                 ; 0000 0046                 {
                 ; 0000 0047                     PORTC = Left_val&Right_val;
00008a 2fe0      	MOV  R30,R16
00008b 23e1      	AND  R30,R17
00008c d08c      	RCALL SUBOPT_0x3
                 ; 0000 0048                     delay_ms(50);
                 ; 0000 0049                     Left_val = Left_val >> 1;
00008d 9516      	LSR  R17
                 ; 0000 004A                     Right_val = Right_val << 1;
00008e 0f00      	LSL  R16
                 ; 0000 004B                 }
00008f 5f5f      	SUBI R21,-1
000090 cff7      	RJMP _0x1C
                 _0x1D:
                 ; 0000 004C                 break;
000091 c073      	RJMP _0x8
                 ; 0000 004D             }
                 ; 0000 004E             // 8 led sang don
                 ; 0000 004F             case 0x08:
                 _0x17:
000092 30e8      	CPI  R30,LOW(0x8)
000093 f491      	BRNE _0x1E
                 ; 0000 0050                {
                 ; 0000 0051                     Save_val = 0;
000094 e030      	LDI  R19,LOW(0)
                 ; 0000 0052                     for(j=8;j>0;j--)
000095 e048      	LDI  R20,LOW(8)
                 _0x20:
000096 3041      	CPI  R20,1
000097 f068      	BRLO _0x21
                 ; 0000 0053                     {
                 ; 0000 0054                          Move_val = 0x80;
000098 e820      	LDI  R18,LOW(128)
                 ; 0000 0055                          for(i=0;i<j;i++)
000099 e050      	LDI  R21,LOW(0)
                 _0x23:
00009a 1754      	CP   R21,R20
00009b f430      	BRSH _0x24
                 ; 0000 0056                          {
                 ; 0000 0057                               PORTC = Save_val | Move_val;
00009c 2fe2      	MOV  R30,R18
00009d 2be3      	OR   R30,R19
00009e d07a      	RCALL SUBOPT_0x3
                 ; 0000 0058                               delay_ms(50);
                 ; 0000 0059                               Move_val = Move_val >> 1;
00009f 9526      	LSR  R18
                 ; 0000 005A                          }
0000a0 5f5f      	SUBI R21,-1
0000a1 cff8      	RJMP _0x23
                 _0x24:
                 ; 0000 005B                          Save_val = PORTC;
0000a2 b335      	IN   R19,21
                 ; 0000 005C                     }
0000a3 5041      	SUBI R20,1
0000a4 cff1      	RJMP _0x20
                 _0x21:
                 ; 0000 005D                     break;
0000a5 c05f      	RJMP _0x8
                 ; 0000 005E                }
                 ; 0000 005F                // 8 led chop tat
                 ; 0000 0060                case 0x10:
                 _0x1E:
0000a6 31e0      	CPI  R30,LOW(0x10)
0000a7 f459      	BRNE _0x25
                 ; 0000 0061                {
                 ; 0000 0062                     PORTC = 0xF0;
0000a8 efe0      	LDI  R30,LOW(240)
0000a9 bbe5      	OUT  0x15,R30
                 ; 0000 0063                     delay_ms(50);
0000aa d05c      	RCALL SUBOPT_0x0
                 ; 0000 0064                     PORTC = ~PORTC;
0000ab 95e0      	COM  R30
0000ac d06c      	RCALL SUBOPT_0x3
                 ; 0000 0065                     delay_ms(50);
                 ; 0000 0066                     PORTC = 0xAA;
0000ad eaea      	LDI  R30,LOW(170)
0000ae bbe5      	OUT  0x15,R30
                 ; 0000 0067                     delay_ms(50);
0000af d057      	RCALL SUBOPT_0x0
                 ; 0000 0068                     PORTC = ~PORTC;
0000b0 95e0      	COM  R30
0000b1 d067      	RCALL SUBOPT_0x3
                 ; 0000 0069                     delay_ms(50);
                 ; 0000 006A                     break;
0000b2 c052      	RJMP _0x8
                 ; 0000 006B                }
                 ; 0000 006C                // So Led chay qua lai tang dan
                 ; 0000 006D                case 0x20:
                 _0x25:
0000b3 32e0      	CPI  R30,LOW(0x20)
0000b4 f4d9      	BRNE _0x26
                 ; 0000 006E                {
                 ; 0000 006F                     Save_val = 0x01;
0000b5 e031      	LDI  R19,LOW(1)
                 ; 0000 0070                     for(j=7;j>0;j--)
0000b6 e047      	LDI  R20,LOW(7)
                 _0x28:
0000b7 3041      	CPI  R20,1
0000b8 f0b0      	BRLO _0x29
                 ; 0000 0071                     {
                 ; 0000 0072                          PORTC = Save_val;
0000b9 bb35      	OUT  0x15,R19
                 ; 0000 0073                          for(i=0;i<j;i++)
0000ba e050      	LDI  R21,LOW(0)
                 _0x2B:
0000bb 1754      	CP   R21,R20
0000bc f428      	BRSH _0x2C
                 ; 0000 0074                          {
                 ; 0000 0075                               delay_ms(50);
0000bd d049      	RCALL SUBOPT_0x0
                 ; 0000 0076                               PORTC = PORTC << 1;
0000be 0fee      	LSL  R30
0000bf bbe5      	OUT  0x15,R30
                 ; 0000 0077                          }
0000c0 5f5f      	SUBI R21,-1
0000c1 cff9      	RJMP _0x2B
                 _0x2C:
                 ; 0000 0078                          for(i=0;i<j;i++)
0000c2 e050      	LDI  R21,LOW(0)
                 _0x2E:
0000c3 1754      	CP   R21,R20
0000c4 f420      	BRSH _0x2F
                 ; 0000 0079                          {
                 ; 0000 007A                               delay_ms(50);
0000c5 d041      	RCALL SUBOPT_0x0
                 ; 0000 007B                               PORTC = PORTC >> 1;
0000c6 d046      	RCALL SUBOPT_0x1
                 ; 0000 007C                          }
0000c7 5f5f      	SUBI R21,-1
0000c8 cffa      	RJMP _0x2E
                 _0x2F:
                 ; 0000 007D                          Save_val = (Save_val<<1)|0x01;
0000c9 2fe3      	MOV  R30,R19
0000ca 0fee      	LSL  R30
0000cb 60e1      	ORI  R30,1
0000cc 2f3e      	MOV  R19,R30
                 ; 0000 007E                     }
0000cd 5041      	SUBI R20,1
0000ce cfe8      	RJMP _0x28
                 _0x29:
                 ; 0000 007F                     break;
0000cf c035      	RJMP _0x8
                 ; 0000 0080                }
                 ; 0000 0081                // LED chay vao tu 2 ben va sang tu giua ra
                 ; 0000 0082                case 0x40:
                 _0x26:
0000d0 34e0      	CPI  R30,LOW(0x40)
0000d1 f4f9      	BRNE _0x30
                 ; 0000 0083                {
                 ; 0000 0084                     Left_val = 0x80;
0000d2 e810      	LDI  R17,LOW(128)
                 ; 0000 0085                     Right_val = 0x01;
0000d3 e001      	LDI  R16,LOW(1)
                 ; 0000 0086                     for(i=0;i<3;i++)
0000d4 e050      	LDI  R21,LOW(0)
                 _0x32:
0000d5 3053      	CPI  R21,3
0000d6 f428      	BRSH _0x33
                 ; 0000 0087                     {
                 ; 0000 0088                         PORTC = Left_val|Right_val;
0000d7 d03a      	RCALL SUBOPT_0x2
                 ; 0000 0089                         delay_ms(50);
                 ; 0000 008A                         Left_val = Left_val >> 1;
0000d8 9516      	LSR  R17
                 ; 0000 008B                         Right_val = Right_val << 1;
0000d9 0f00      	LSL  R16
                 ; 0000 008C                     }
0000da 5f5f      	SUBI R21,-1
0000db cff9      	RJMP _0x32
                 _0x33:
                 ; 0000 008D                     for(i=0;i<4;i++)
0000dc e050      	LDI  R21,LOW(0)
                 _0x35:
0000dd 3054      	CPI  R21,4
0000de f488      	BRSH _0x36
                 ; 0000 008E                     {
                 ; 0000 008F                         PORTC = Left_val|Right_val;
0000df 2fe0      	MOV  R30,R16
0000e0 2be1      	OR   R30,R17
0000e1 bbe5      	OUT  0x15,R30
                 ; 0000 0090                         Left_val = (Left_val<<1)|0x10;
0000e2 2fe1      	MOV  R30,R17
0000e3 0fee      	LSL  R30
0000e4 61e0      	ORI  R30,0x10
0000e5 2f1e      	MOV  R17,R30
                 ; 0000 0091                         Right_val = (Right_val>>1)|0x08;
0000e6 2fe0      	MOV  R30,R16
0000e7 95e6      	LSR  R30
0000e8 60e8      	ORI  R30,8
0000e9 2f0e      	MOV  R16,R30
                 ; 0000 0092                         delay_ms(50);
0000ea e3a2      	LDI  R26,LOW(50)
0000eb e0b0      	LDI  R27,0
0000ec 940e 011e 	CALL _delay_ms
                 ; 0000 0093                     }
0000ee 5f5f      	SUBI R21,-1
0000ef cfed      	RJMP _0x35
                 _0x36:
                 ; 0000 0094                     break;
0000f0 c014      	RJMP _0x8
                 ; 0000 0095                }
                 ; 0000 0096                // 2 LED chay vao tu 2 ben va chay ra 2 ben
                 ; 0000 0097                case 0x80:
                 _0x30:
0000f1 38e0      	CPI  R30,LOW(0x80)
0000f2 f491      	BRNE _0x8
                 ; 0000 0098                {
                 ; 0000 0099                     Left_val = 0x80;
0000f3 e810      	LDI  R17,LOW(128)
                 ; 0000 009A                     Right_val = 0x01;
0000f4 e001      	LDI  R16,LOW(1)
                 ; 0000 009B                     for(i=0;i<3;i++)
0000f5 e050      	LDI  R21,LOW(0)
                 _0x39:
0000f6 3053      	CPI  R21,3
0000f7 f428      	BRSH _0x3A
                 ; 0000 009C                     {
                 ; 0000 009D                          PORTC = Left_val|Right_val;
0000f8 d019      	RCALL SUBOPT_0x2
                 ; 0000 009E                          delay_ms(50);
                 ; 0000 009F                          Left_val = Left_val >> 1;
0000f9 9516      	LSR  R17
                 ; 0000 00A0                          Right_val = Right_val <<1;
0000fa 0f00      	LSL  R16
                 ; 0000 00A1                     }
0000fb 5f5f      	SUBI R21,-1
0000fc cff9      	RJMP _0x39
                 _0x3A:
                 ; 0000 00A2                     for(i=0;i<4;i++)
0000fd e050      	LDI  R21,LOW(0)
                 _0x3C:
0000fe 3054      	CPI  R21,4
0000ff f428      	BRSH _0x3D
                 ; 0000 00A3                     {
                 ; 0000 00A4                          PORTC = Left_val|Right_val;
000100 d011      	RCALL SUBOPT_0x2
                 ; 0000 00A5                          delay_ms(50);
                 ; 0000 00A6                          Left_val = Left_val << 1;
000101 0f11      	LSL  R17
                 ; 0000 00A7                          Right_val = Right_val >> 1;
000102 9506      	LSR  R16
                 ; 0000 00A8                     }
000103 5f5f      	SUBI R21,-1
000104 cff9      	RJMP _0x3C
                 _0x3D:
                 ; 0000 00A9                     break;
                 ; 0000 00AA 
                 ; 0000 00AB                }
                 ; 0000 00AC         }
                 _0x8:
                 ; 0000 00AD 
                 ; 0000 00AE     }
000105 cf43      	RJMP _0x3
                 ; 0000 00AF }
                 _0x3E:
000106 cfff      	RJMP _0x3E
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x0:
000107 e3a2      	LDI  R26,LOW(50)
000108 e0b0      	LDI  R27,0
000109 940e 011e 	CALL _delay_ms
00010b b3e5      	IN   R30,0x15
00010c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00010d e0f0      	LDI  R31,0
00010e 95f5      	ASR  R31
00010f 95e7      	ROR  R30
000110 bbe5      	OUT  0x15,R30
000111 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x2:
000112 2fe0      	MOV  R30,R16
000113 2be1      	OR   R30,R17
000114 bbe5      	OUT  0x15,R30
000115 e3a2      	LDI  R26,LOW(50)
000116 e0b0      	LDI  R27,0
000117 940c 011e 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
000119 bbe5      	OUT  0x15,R30
00011a e3a2      	LDI  R26,LOW(50)
00011b e0b0      	LDI  R27,0
00011c 940c 011e 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
00011e 9610      	adiw r26,0
00011f f039      	breq __delay_ms1
                 __delay_ms0:
                +
000120 ed80     +LDI R24 , LOW ( 0x7D0 )
000121 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000122 9701     +SBIW R24 , 1
000123 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000124 95a8      	wdr
000125 9711      	sbiw r26,1
000126 f7c9      	brne __delay_ms0
                 __delay_ms1:
000127 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  15 r17:  15 r18:   3 r19:   7 r20:   9 r21:  39 r22:   0 r23:   0 
r24:   6 r25:   2 r26:   8 r27:   5 r28:   1 r29:   1 r30:  73 r31:   4 
x  :   2 y  :   0 z  :   0 
Registers used: 15 out of 35 (42.9%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   1 and   :   1 andi  :   0 asr   :   1 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   1 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :  12 brpl  :   0 brsh  :  13 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   2 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   2 
cp    :   3 cpc   :   0 cpi   :  20 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   0 jmp   :  24 ld    :   0 ldd   :   0 ldi   :  53 
lds   :   0 lpm   :   0 lsl   :  10 lsr   :   7 mov   :  14 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   3 
ori   :   5 out   :  20 pop   :   0 push  :   0 rcall :  19 ret   :   3 
reti  :   0 rjmp  :  24 rol   :   0 ror   :   1 sbc   :   0 sbci  :   0 
sbi   :   1 sbic  :   0 sbis  :   0 sbiw  :   3 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   2 std   :   0 sts   :   0 sub   :   0 subi  :  15 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 32 out of 116 (27.6%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000250    592      0    592   16384   3.6%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
