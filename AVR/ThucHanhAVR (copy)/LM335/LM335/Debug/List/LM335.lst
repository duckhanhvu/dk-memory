
AVRASM ver. 2.1.30  F:\CodeVisisonAVR\LM335\Debug\List\LM335.asm Mon Nov 30 21:44:08 2015

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0034 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x2040060:
F:\CodeVisisonAVR\LM335\Debug\List\LM335.asm(1117): warning: .cseg .db misalignment - padding zero byte
00002a 0001      	.DB  0x1
                 _0x2040000:
00002b 4e2d
00002c 4e41
00002d 4900
00002e 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
F:\CodeVisisonAVR\LM335\Debug\List\LM335.asm(1120): warning: .cseg .db misalignment - padding zero byte
00002f 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000030 0001      	.DW  0x01
000031 0160      	.DW  __seed_G102
000032 0054      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000033 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000034 94f8      	CLI
000035 27ee      	CLR  R30
000036 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000037 e0f1      	LDI  R31,1
000038 bffb      	OUT  GICR,R31
000039 bfeb      	OUT  GICR,R30
00003a bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003b e08d      	LDI  R24,(14-2)+1
00003c e0a2      	LDI  R26,2
00003d 27bb      	CLR  R27
                 __CLEAR_REG:
00003e 93ed      	ST   X+,R30
00003f 958a      	DEC  R24
000040 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000041 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000042 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000043 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000044 93ed      	ST   X+,R30
000045 9701      	SBIW R24,1
000046 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000047 e6e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000048 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000049 9185      	LPM  R24,Z+
00004a 9195      	LPM  R25,Z+
00004b 9700      	SBIW R24,0
00004c f061      	BREQ __GLOBAL_INI_END
00004d 91a5      	LPM  R26,Z+
00004e 91b5      	LPM  R27,Z+
00004f 9005      	LPM  R0,Z+
000050 9015      	LPM  R1,Z+
000051 01bf      	MOVW R22,R30
000052 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000053 9005      	LPM  R0,Z+
000054 920d      	ST   X+,R0
000055 9701      	SBIW R24,1
000056 f7e1      	BRNE __GLOBAL_INI_LOOP
000057 01fb      	MOVW R30,R22
000058 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000059 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005a bfed      	OUT  SPL,R30
00005b e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005d e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005e e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005f 940c 00a4 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * LM335.c
                 ; *
                 ; * Created: 11/21/2015 10:28:25 PM
                 ; * Author: Le Ngoc An
                 ; * Group : D13CQDT02-N
                 ; */
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <math.h>
                 ;
                 ;    // Khai bao ket noi LCD
                 ;#define RS PORTC.6
                 ;#define EN PORTC.7
                 ;#define LCD_data PORTD
                 ;
                 ;    // Ghi lenh len LCD
                 ;void LCD_instruction(unsigned char x)
                 ; 0000 0015 {
                 
                 	.CSEG
                 _LCD_instruction:
                 ; .FSTART _LCD_instruction
                 ; 0000 0016     RS = 0;
000061 93aa      	ST   -Y,R26
                 ;	x -> Y+0
000062 98ae      	CBI  0x15,6
                 ; 0000 0017     LCD_data = x;
000063 c002      	RJMP _0x2080004
                 ; 0000 0018     EN = 0;
                 ; 0000 0019     EN = 1;
                 ; 0000 001A     delay_ms(2);
                 ; 0000 001B }
                 ; .FEND
                 ;    // Ghi du ieu len LCD
                 ;void LCD_write(unsigned char c)
                 ; 0000 001E {
                 _LCD_write:
                 ; .FSTART _LCD_write
                 ; 0000 001F     RS = 1;
000064 93aa      	ST   -Y,R26
                 ;	c -> Y+0
000065 9aae      	SBI  0x15,6
                 ; 0000 0020     LCD_data = c;
                 _0x2080004:
000066 81e8      	LD   R30,Y
000067 bbe2      	OUT  0x12,R30
                 ; 0000 0021     EN = 0;
000068 98af      	CBI  0x15,7
                 ; 0000 0022     EN = 1;
000069 9aaf      	SBI  0x15,7
                 ; 0000 0023     delay_ms(2);
00006a e0a2      	LDI  R26,LOW(2)
00006b e0b0      	LDI  R27,0
00006c 940e 0212 	CALL _delay_ms
                 ; 0000 0024 }
00006e 9621      	ADIW R28,1
00006f 9508      	RET
                 ; .FEND
                 ;
                 ;    // Khoi dong LCD
                 ;void LCD_init()
                 ; 0000 0028 {
                 _LCD_init:
                 ; .FSTART _LCD_init
                 ; 0000 0029     LCD_instruction(0x30);
000070 e3a0      	LDI  R26,LOW(48)
000071 dfef      	RCALL _LCD_instruction
                 ; 0000 002A 	LCD_instruction(0x38);
000072 e3a8      	LDI  R26,LOW(56)
000073 dfed      	RCALL _LCD_instruction
                 ; 0000 002B 	LCD_instruction(0x01);
000074 e0a1      	LDI  R26,LOW(1)
000075 dfeb      	RCALL _LCD_instruction
                 ; 0000 002C 	LCD_instruction(0x0C);
000076 e0ac      	LDI  R26,LOW(12)
000077 dfe9      	RCALL _LCD_instruction
                 ; 0000 002D }
000078 9508      	RET
                 ; .FEND
                 ;
                 ;    // Hien thi dien ap
                 ;void Voltage_Display(unsigned int d)
                 ; 0000 0031 {
                 _Voltage_Display:
                 ; .FSTART _Voltage_Display
                 ; 0000 0032       LCD_write(d/100+0x30);
000079 93ba      	ST   -Y,R27
00007a 93aa      	ST   -Y,R26
                 ;	d -> Y+0
00007b 81a8      	LD   R26,Y
00007c 81b9      	LDD  R27,Y+1
00007d e6e4      	LDI  R30,LOW(100)
00007e e0f0      	LDI  R31,HIGH(100)
00007f 940e 01eb 	CALL SUBOPT_0x0
                 ; 0000 0033       LCD_write('.');
000081 e2ae      	LDI  R26,LOW(46)
000082 dfe1      	RCALL _LCD_write
                 ; 0000 0034       LCD_write(d%100/10+0x30);
000083 81a8      	LD   R26,Y
000084 81b9      	LDD  R27,Y+1
000085 e6e4      	LDI  R30,LOW(100)
000086 e0f0      	LDI  R31,HIGH(100)
000087 940e 03f1 	CALL __MODW21U
000089 01df      	MOVW R26,R30
00008a e0ea      	LDI  R30,LOW(10)
00008b e0f0      	LDI  R31,HIGH(10)
00008c 940e 01eb 	CALL SUBOPT_0x0
                 ; 0000 0035       LCD_write(d%10+0x30);
00008e 940e 01f1 	CALL SUBOPT_0x1
000090 940e 01f6 	CALL SUBOPT_0x2
                 ; 0000 0036       LCD_write('V');
000092 e5a6      	LDI  R26,LOW(86)
000093 c00d      	RJMP _0x2080003
                 ; 0000 0037 }
                 ; .FEND
                 ;    // Hien thi nhiet do
                 ;void Temp_Display(unsigned int i)
                 ; 0000 003A {
                 _Temp_Display:
                 ; .FSTART _Temp_Display
                 ; 0000 003B       LCD_write(i/10+0x30);
000094 93ba      	ST   -Y,R27
000095 93aa      	ST   -Y,R26
                 ;	i -> Y+0
000096 940e 01f1 	CALL SUBOPT_0x1
000098 940e 01eb 	CALL SUBOPT_0x0
                 ; 0000 003C       LCD_write(i%10+0x30);
00009a 940e 01f1 	CALL SUBOPT_0x1
00009c 940e 01f6 	CALL SUBOPT_0x2
                 ; 0000 003D       LCD_write(0xDF);
00009e edaf      	LDI  R26,LOW(223)
00009f dfc4      	RCALL _LCD_write
                 ; 0000 003E       LCD_write('C');
0000a0 e4a3      	LDI  R26,LOW(67)
                 _0x2080003:
0000a1 dfc2      	RCALL _LCD_write
                 ; 0000 003F }
0000a2 9622      	ADIW R28,2
0000a3 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0043 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0044     unsigned int i,j;
                 ; 0000 0045         // Port A,C,D out
                 ; 0000 0046     DDRD = 0xFF;
                 ;	i -> R16,R17
                 ;	j -> R18,R19
0000a4 efef      	LDI  R30,LOW(255)
0000a5 bbe1      	OUT  0x11,R30
                 ; 0000 0047     DDRC = 0xFF;
0000a6 bbe4      	OUT  0x14,R30
                 ; 0000 0048     DDRA = 0xFF;
0000a7 bbea      	OUT  0x1A,R30
                 ; 0000 0049     DDRB = 0x00; // PORTB in
0000a8 e0e0      	LDI  R30,LOW(0)
0000a9 bbe7      	OUT  0x17,R30
                 ; 0000 004A 
                 ; 0000 004B     //Timer 1
                 ; 0000 004C     TCCR1A = 0;
0000aa bdef      	OUT  0x2F,R30
                 ; 0000 004D     //Analog Comparator
                 ; 0000 004E     SFIOR = (0<<ACME);
0000ab bfe0      	OUT  0x30,R30
                 ; 0000 004F     ACSR = (0<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000ac b9e8      	OUT  0x8,R30
                 ; 0000 0050 
                 ; 0000 0051     LCD_init();
0000ad dfc2      	RCALL _LCD_init
                 ; 0000 0052 
                 ; 0000 0053 while (1)
                 _0xF:
                 ; 0000 0054     {
                 ; 0000 0055         TCNT1 = 0;
0000ae e0e0      	LDI  R30,LOW(0)
0000af e0f0      	LDI  R31,HIGH(0)
0000b0 bdfd      	OUT  0x2C+1,R31
0000b1 bdec      	OUT  0x2C,R30
                 ; 0000 0056         PORTA.0 = 0; // Xa tu
0000b2 98d8      	CBI  0x1B,0
                 ; 0000 0057         delay_ms(1000);
0000b3 eea8      	LDI  R26,LOW(1000)
0000b4 e0b3      	LDI  R27,HIGH(1000)
0000b5 940e 0212 	CALL _delay_ms
                 ; 0000 0058         PORTA.0 = 1; // Nap tu
0000b7 9ad8      	SBI  0x1B,0
                 ; 0000 0059             // Start Timer1
                 ; 0000 005A         TCCR1B = (1<<CS12)|(0<<CS11)|(1<<CS10);
0000b8 e0e5      	LDI  R30,LOW(5)
0000b9 bdee      	OUT  0x2E,R30
                 ; 0000 005B 
                 ; 0000 005C         while(!(ACSR&0x20));  // Cho nap tu
                 _0x16:
0000ba 9b45      	SBIS 0x8,5
0000bb cffe      	RJMP _0x16
                 ; 0000 005D         TCCR1B = 0; // Stop Timer0
0000bc e0e0      	LDI  R30,LOW(0)
0000bd bdee      	OUT  0x2E,R30
                 ; 0000 005E         PORTA.0 = 0;
0000be 98d8      	CBI  0x1B,0
                 ; 0000 005F         j = TCNT1;
                +
0000bf b52c     +IN R18 , 44
0000c0 b53d     +IN R19 , 44 + 1
                 	__INWR 18,19,44
                 ; 0000 0060         LCD_instruction(0x82);
0000c1 e8a2      	LDI  R26,LOW(130)
0000c2 df9e      	RCALL _LCD_instruction
                 ; 0000 0061         i = 5*(1-exp(-((j/3906.25)/10)))*100;
0000c3 01f9      	MOVW R30,R18
0000c4 2766      	CLR  R22
0000c5 2777      	CLR  R23
0000c6 940e 0294 	CALL __CDF1
0000c8 01df      	MOVW R26,R30
0000c9 01cb      	MOVW R24,R22
                +
0000ca e0e0     +LDI R30 , LOW ( 0x45742400 )
0000cb e2f4     +LDI R31 , HIGH ( 0x45742400 )
0000cc e764     +LDI R22 , BYTE3 ( 0x45742400 )
0000cd e475     +LDI R23 , BYTE4 ( 0x45742400 )
                 	__GETD1N 0x45742400
0000ce 940e 036c 	CALL __DIVF21
0000d0 01df      	MOVW R26,R30
0000d1 01cb      	MOVW R24,R22
                +
0000d2 e0e0     +LDI R30 , LOW ( 0x41200000 )
0000d3 e0f0     +LDI R31 , HIGH ( 0x41200000 )
0000d4 e260     +LDI R22 , BYTE3 ( 0x41200000 )
0000d5 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0000d6 940e 036c 	CALL __DIVF21
0000d8 940e 0228 	CALL __ANEGF1
0000da 01df      	MOVW R26,R30
0000db 01cb      	MOVW R24,R22
0000dc 940e 0145 	CALL _exp
                +
0000de e0a0     +LDI R26 , LOW ( 0x3F800000 )
0000df e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0000e0 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0000e1 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0000e2 940e 01fc 	CALL SUBOPT_0x3
                +
0000e4 e0a0     +LDI R26 , LOW ( 0x40A00000 )
0000e5 e0b0     +LDI R27 , HIGH ( 0x40A00000 )
0000e6 ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
0000e7 e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
0000e8 940e 031e 	CALL __MULF12
                +
0000ea e0a0     +LDI R26 , LOW ( 0x42C80000 )
0000eb e0b0     +LDI R27 , HIGH ( 0x42C80000 )
0000ec ec88     +LDI R24 , BYTE3 ( 0x42C80000 )
0000ed e492     +LDI R25 , BYTE4 ( 0x42C80000 )
                 	__GETD2N 0x42C80000
0000ee 940e 031e 	CALL __MULF12
0000f0 940e 025b 	CALL __CFD1U
0000f2 018f      	MOVW R16,R30
                 ; 0000 0062         Voltage_Display(i);
0000f3 01d8      	MOVW R26,R16
0000f4 df84      	RCALL _Voltage_Display
                 ; 0000 0063         LCD_instruction(0xC2);
0000f5 eca2      	LDI  R26,LOW(194)
0000f6 df6a      	RCALL _LCD_instruction
                 ; 0000 0064         Temp_Display(i-273);
0000f7 01d8      	MOVW R26,R16
0000f8 51a1      	SUBI R26,LOW(273)
0000f9 40b1      	SBCI R27,HIGH(273)
0000fa df99      	RCALL _Temp_Display
                 ; 0000 0065     }
0000fb cfb2      	RJMP _0xF
                 ; 0000 0066 }
                 _0x1B:
0000fc cfff      	RJMP _0x1B
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
0000fd 940e 0408 	CALL __PUTPARD2
0000ff 817b         ldd  r23,y+3
000100 816a         ldd  r22,y+2
000101 81f9         ldd  r31,y+1
000102 81e8         ld   r30,y
000103 fb77         bst  r23,7
000104 0f77         lsl  r23
000105 fd67         sbrc r22,7
000106 6071         sbr  r23,1
000107 2f97         mov  r25,r23
000108 579e         subi r25,0x7e
000109 f081         breq __ftrunc0
00010a f078         brcs __ftrunc0
00010b 3198         cpi  r25,24
00010c f490         brsh __ftrunc1
00010d 27aa         clr  r26
00010e 27bb         clr  r27
00010f 2788         clr  r24
                 __ftrunc2:
000110 9408         sec
000111 9587         ror  r24
000112 95b7         ror  r27
000113 95a7         ror  r26
000114 959a         dec  r25
000115 f7d1         brne __ftrunc2
000116 23ea         and  r30,r26
000117 23fb         and  r31,r27
000118 2368         and  r22,r24
000119 c005         rjmp __ftrunc1
                 __ftrunc0:
00011a 94e8         clt
00011b 2777         clr  r23
00011c 27ee         clr  r30
00011d 27ff         clr  r31
00011e 2766         clr  r22
                 __ftrunc1:
00011f 776f         cbr  r22,0x80
000120 9576         lsr  r23
000121 f408         brcc __ftrunc3
000122 6860         sbr  r22,0x80
                 __ftrunc3:
000123 f977         bld  r23,7
000124 91a9         ld   r26,y+
000125 91b9         ld   r27,y+
000126 9189         ld   r24,y+
000127 9199         ld   r25,y+
000128 17ea         cp   r30,r26
000129 07fb         cpc  r31,r27
00012a 0768         cpc  r22,r24
00012b 0779         cpc  r23,r25
00012c fb97         bst  r25,7
00012d 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
00012e 940e 0408 	CALL __PUTPARD2
000130 940e 03f9 	CALL __GETD2S0
000132 940e 00fd 	CALL _ftrunc
000134 940e 03fe 	CALL __PUTD1S0
000136 f419          brne __floor1
                 __floor0:
000137 940e 03f4 	CALL __GETD1S0
000139 c009      	RJMP _0x2080002
                 __floor1:
00013a f7e6          brtc __floor0
00013b 940e 03f4 	CALL __GETD1S0
                +
00013d e0a0     +LDI R26 , LOW ( 0x3F800000 )
00013e e0b0     +LDI R27 , HIGH ( 0x3F800000 )
00013f e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000140 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000141 940e 02c7 	CALL __SUBF12
                 _0x2080002:
000143 9624      	ADIW R28,4
000144 9508      	RET
                 ; .FEND
                 _exp:
                 ; .FSTART _exp
000145 940e 0408 	CALL __PUTPARD2
000147 9728      	SBIW R28,8
000148 931a      	ST   -Y,R17
000149 930a      	ST   -Y,R16
00014a 940e 0201 	CALL SUBOPT_0x4
                +
00014c e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
00014d eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
00014e ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
00014f ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
000150 940e 03b1 	CALL __CMPF12
000152 f428      	BRSH _0x202000F
                +
000153 e0e0     +LDI R30 , LOW ( 0x0 )
000154 e0f0     +LDI R31 , HIGH ( 0x0 )
000155 e060     +LDI R22 , BYTE3 ( 0x0 )
000156 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000157 c08f      	RJMP _0x2080001
                 _0x202000F:
                +
000158 85ea     +LDD R30 , Y + 10
000159 85fb     +LDD R31 , Y + 10 + 1
00015a 856c     +LDD R22 , Y + 10 + 2
00015b 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
00015c 940e 041a 	CALL __CPD10
00015e f429      	BRNE _0x2020010
                +
00015f e0e0     +LDI R30 , LOW ( 0x3F800000 )
000160 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000161 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000162 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000163 c083      	RJMP _0x2080001
                 _0x2020010:
000164 940e 0201 	CALL SUBOPT_0x4
                +
000166 e1e8     +LDI R30 , LOW ( 0x42B17218 )
000167 e7f2     +LDI R31 , HIGH ( 0x42B17218 )
000168 eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
000169 e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
00016a 940e 03b1 	CALL __CMPF12
00016c f009      	BREQ PC+2
00016d f408      	BRCC PC+2
00016e c005      	RJMP _0x2020011
                +
00016f efef     +LDI R30 , LOW ( 0x7F7FFFFF )
000170 efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
000171 e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
000172 e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
000173 c073      	RJMP _0x2080001
                 _0x2020011:
000174 940e 0201 	CALL SUBOPT_0x4
                +
000176 e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
000177 eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
000178 eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
000179 e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
00017a 940e 031e 	CALL __MULF12
                +
00017c 87ea     +STD Y + 10 , R30
00017d 87fb     +STD Y + 10 + 1 , R31
00017e 876c     +STD Y + 10 + 2 , R22
00017f 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000180 940e 0201 	CALL SUBOPT_0x4
000182 dfab      	RCALL _floor
000183 940e 025d 	CALL __CFD1
000185 018f      	MOVW R16,R30
000186 940e 0201 	CALL SUBOPT_0x4
000188 940e 03d9 	CALL __CWD1
00018a 940e 0294 	CALL __CDF1
00018c 940e 01fc 	CALL SUBOPT_0x3
00018e 01df      	MOVW R26,R30
00018f 01cb      	MOVW R24,R22
                +
000190 e0e0     +LDI R30 , LOW ( 0x3F000000 )
000191 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
000192 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
000193 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
000194 940e 01fc 	CALL SUBOPT_0x3
                +
000196 83ee     +STD Y + 6 , R30
000197 83ff     +STD Y + 6 + 1 , R31
000198 8768     +STD Y + 6 + 2 , R22
000199 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
00019a 940e 0206 	CALL SUBOPT_0x5
                +
00019c 83ea     +STD Y + 2 , R30
00019d 83fb     +STD Y + 2 + 1 , R31
00019e 836c     +STD Y + 2 + 2 , R22
00019f 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0001a0 940e 020d 	CALL SUBOPT_0x6
                +
0001a2 e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
0001a3 e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
0001a4 e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
0001a5 e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
0001a6 940e 031e 	CALL __MULF12
                +
0001a8 eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
0001a9 eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
0001aa ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
0001ab e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
0001ac 940e 02ce 	CALL __ADDF12
0001ae 940e 0206 	CALL SUBOPT_0x5
                +
0001b0 83ee     +STD Y + 6 , R30
0001b1 83ff     +STD Y + 6 + 1 , R31
0001b2 8768     +STD Y + 6 + 2 , R22
0001b3 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
0001b4 940e 020d 	CALL SUBOPT_0x6
                +
0001b6 e2a8     +LDI R26 , LOW ( 0x41A68D28 )
0001b7 e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
0001b8 ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
0001b9 e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
0001ba 940e 02ce 	CALL __ADDF12
                +
0001bc 83ea     +STD Y + 2 , R30
0001bd 83fb     +STD Y + 2 + 1 , R31
0001be 836c     +STD Y + 2 + 2 , R22
0001bf 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                +
0001c0 81ee     +LDD R30 , Y + 6
0001c1 81ff     +LDD R31 , Y + 6 + 1
0001c2 8568     +LDD R22 , Y + 6 + 2
0001c3 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
0001c4 81aa     +LDD R26 , Y + 2
0001c5 81bb     +LDD R27 , Y + 2 + 1
0001c6 818c     +LDD R24 , Y + 2 + 2
0001c7 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
0001c8 940e 02ce 	CALL __ADDF12
                +
0001ca efa3     +LDI R26 , LOW ( 0x3FB504F3 )
0001cb e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
0001cc eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
0001cd e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
0001ce 940e 031e 	CALL __MULF12
0001d0 937f      	PUSH R23
0001d1 936f      	PUSH R22
0001d2 93ff      	PUSH R31
0001d3 93ef      	PUSH R30
                +
0001d4 81ae     +LDD R26 , Y + 6
0001d5 81bf     +LDD R27 , Y + 6 + 1
0001d6 8588     +LDD R24 , Y + 6 + 2
0001d7 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
0001d8 940e 020d 	CALL SUBOPT_0x6
0001da 940e 02c7 	CALL __SUBF12
0001dc 91af      	POP  R26
0001dd 91bf      	POP  R27
0001de 918f      	POP  R24
0001df 919f      	POP  R25
0001e0 940e 036c 	CALL __DIVF21
0001e2 940e 0403 	CALL __PUTPARD1
0001e4 01d8      	MOVW R26,R16
0001e5 940e 021c 	CALL _ldexp
                 _0x2080001:
0001e7 8119      	LDD  R17,Y+1
0001e8 8108      	LDD  R16,Y+0
0001e9 962e      	ADIW R28,14
0001ea 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __seed_G102:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
0001eb 940e 03de 	CALL __DIVW21U
0001ed 5de0      	SUBI R30,-LOW(48)
0001ee 2fae      	MOV  R26,R30
0001ef 940c 0064 	JMP  _LCD_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001f1 81a8      	LD   R26,Y
0001f2 81b9      	LDD  R27,Y+1
0001f3 e0ea      	LDI  R30,LOW(10)
0001f4 e0f0      	LDI  R31,HIGH(10)
0001f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0001f6 940e 03f1 	CALL __MODW21U
0001f8 5de0      	SUBI R30,-LOW(48)
0001f9 2fae      	MOV  R26,R30
0001fa 940c 0064 	JMP  _LCD_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0001fc 940e 040d 	CALL __SWAPD12
0001fe 940e 02c7 	CALL __SUBF12
000200 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
                +
000201 85aa     +LDD R26 , Y + 10
000202 85bb     +LDD R27 , Y + 10 + 1
000203 858c     +LDD R24 , Y + 10 + 2
000204 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000205 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
                +
000206 81ae     +LDD R26 , Y + 6
000207 81bf     +LDD R27 , Y + 6 + 1
000208 8588     +LDD R24 , Y + 6 + 2
000209 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
00020a 940e 031e 	CALL __MULF12
00020c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
                +
00020d 81ea     +LDD R30 , Y + 2
00020e 81fb     +LDD R31 , Y + 2 + 1
00020f 816c     +LDD R22 , Y + 2 + 2
000210 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
000211 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000212 9610      	adiw r26,0
000213 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000214 ed80     +LDI R24 , LOW ( 0x7D0 )
000215 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000216 9701     +SBIW R24 , 1
000217 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000218 95a8      	wdr
000219 9711      	sbiw r26,1
00021a f7c9      	brne __delay_ms0
                 __delay_ms1:
00021b 9508      	ret
                 
                 _ldexp:
00021c 91e9      	LD   R30,Y+
00021d 91f9      	LD   R31,Y+
00021e 9169      	LD   R22,Y+
00021f 9179      	LD   R23,Y+
000220 fb77      	BST  R23,7
000221 0f66      	LSL  R22
000222 1f77      	ROL  R23
000223 0f7a      	ADD  R23,R26
000224 9576      	LSR  R23
000225 9567      	ROR  R22
000226 f00e      	BRTS __ANEGF1
000227 9508      	RET
                 
                 __ANEGF1:
000228 9730      	SBIW R30,0
000229 4060      	SBCI R22,0
00022a 4070      	SBCI R23,0
00022b f009      	BREQ __ANEGF10
00022c 5870      	SUBI R23,0x80
                 __ANEGF10:
00022d 9508      	RET
                 
                 __ROUND_REPACK:
00022e 2355      	TST  R21
00022f f442      	BRPL __REPACK
000230 3850      	CPI  R21,0x80
000231 f411      	BRNE __ROUND_REPACK0
000232 ffe0      	SBRS R30,0
000233 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000234 9631      	ADIW R30,1
000235 1f69      	ADC  R22,R25
000236 1f79      	ADC  R23,R25
000237 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000238 e850      	LDI  R21,0x80
000239 2757      	EOR  R21,R23
00023a f411      	BRNE __REPACK0
00023b 935f      	PUSH R21
00023c c0cf      	RJMP __ZERORES
                 __REPACK0:
00023d 3f5f      	CPI  R21,0xFF
00023e f031      	BREQ __REPACK1
00023f 0f66      	LSL  R22
000240 0c00      	LSL  R0
000241 9557      	ROR  R21
000242 9567      	ROR  R22
000243 2f75      	MOV  R23,R21
000244 9508      	RET
                 __REPACK1:
000245 935f      	PUSH R21
000246 2000      	TST  R0
000247 f00a      	BRMI __REPACK2
000248 c0cf      	RJMP __MAXRES
                 __REPACK2:
000249 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
00024a e850      	LDI  R21,0x80
00024b 2e19      	MOV  R1,R25
00024c 2215      	AND  R1,R21
00024d 0f88      	LSL  R24
00024e 1f99      	ROL  R25
00024f 2795      	EOR  R25,R21
000250 0f55      	LSL  R21
000251 9587      	ROR  R24
                 
                 __UNPACK1:
000252 e850      	LDI  R21,0x80
000253 2e07      	MOV  R0,R23
000254 2205      	AND  R0,R21
000255 0f66      	LSL  R22
000256 1f77      	ROL  R23
000257 2775      	EOR  R23,R21
000258 0f55      	LSL  R21
000259 9567      	ROR  R22
00025a 9508      	RET
                 
                 __CFD1U:
00025b 9468      	SET
00025c c001      	RJMP __CFD1U0
                 __CFD1:
00025d 94e8      	CLT
                 __CFD1U0:
00025e 935f      	PUSH R21
00025f dff2      	RCALL __UNPACK1
000260 3870      	CPI  R23,0x80
000261 f018      	BRLO __CFD10
000262 3f7f      	CPI  R23,0xFF
000263 f408      	BRCC __CFD10
000264 c0a7      	RJMP __ZERORES
                 __CFD10:
000265 e156      	LDI  R21,22
000266 1b57      	SUB  R21,R23
000267 f4aa      	BRPL __CFD11
000268 9551      	NEG  R21
000269 3058      	CPI  R21,8
00026a f40e      	BRTC __CFD19
00026b 3059      	CPI  R21,9
                 __CFD19:
00026c f030      	BRLO __CFD17
00026d efef      	SER  R30
00026e efff      	SER  R31
00026f ef6f      	SER  R22
000270 e77f      	LDI  R23,0x7F
000271 f977      	BLD  R23,7
000272 c01a      	RJMP __CFD15
                 __CFD17:
000273 2777      	CLR  R23
000274 2355      	TST  R21
000275 f0b9      	BREQ __CFD15
                 __CFD18:
000276 0fee      	LSL  R30
000277 1fff      	ROL  R31
000278 1f66      	ROL  R22
000279 1f77      	ROL  R23
00027a 955a      	DEC  R21
00027b f7d1      	BRNE __CFD18
00027c c010      	RJMP __CFD15
                 __CFD11:
00027d 2777      	CLR  R23
                 __CFD12:
00027e 3058      	CPI  R21,8
00027f f028      	BRLO __CFD13
000280 2fef      	MOV  R30,R31
000281 2ff6      	MOV  R31,R22
000282 2f67      	MOV  R22,R23
000283 5058      	SUBI R21,8
000284 cff9      	RJMP __CFD12
                 __CFD13:
000285 2355      	TST  R21
000286 f031      	BREQ __CFD15
                 __CFD14:
000287 9576      	LSR  R23
000288 9567      	ROR  R22
000289 95f7      	ROR  R31
00028a 95e7      	ROR  R30
00028b 955a      	DEC  R21
00028c f7d1      	BRNE __CFD14
                 __CFD15:
00028d 2000      	TST  R0
00028e f40a      	BRPL __CFD16
00028f d141      	RCALL __ANEGD1
                 __CFD16:
000290 915f      	POP  R21
000291 9508      	RET
                 
                 __CDF1U:
000292 9468      	SET
000293 c001      	RJMP __CDF1U0
                 __CDF1:
000294 94e8      	CLT
                 __CDF1U0:
000295 9730      	SBIW R30,0
000296 4060      	SBCI R22,0
000297 4070      	SBCI R23,0
000298 f0b1      	BREQ __CDF10
000299 2400      	CLR  R0
00029a f026      	BRTS __CDF11
00029b 2377      	TST  R23
00029c f412      	BRPL __CDF11
00029d 9400      	COM  R0
00029e d132      	RCALL __ANEGD1
                 __CDF11:
00029f 2e17      	MOV  R1,R23
0002a0 e17e      	LDI  R23,30
0002a1 2011      	TST  R1
                 __CDF12:
0002a2 f032      	BRMI __CDF13
0002a3 957a      	DEC  R23
0002a4 0fee      	LSL  R30
0002a5 1fff      	ROL  R31
0002a6 1f66      	ROL  R22
0002a7 1c11      	ROL  R1
0002a8 cff9      	RJMP __CDF12
                 __CDF13:
0002a9 2fef      	MOV  R30,R31
0002aa 2ff6      	MOV  R31,R22
0002ab 2d61      	MOV  R22,R1
0002ac 935f      	PUSH R21
0002ad df8a      	RCALL __REPACK
0002ae 915f      	POP  R21
                 __CDF10:
0002af 9508      	RET
                 
                 __SWAPACC:
0002b0 934f      	PUSH R20
0002b1 01af      	MOVW R20,R30
0002b2 01fd      	MOVW R30,R26
0002b3 01da      	MOVW R26,R20
0002b4 01ab      	MOVW R20,R22
0002b5 01bc      	MOVW R22,R24
0002b6 01ca      	MOVW R24,R20
0002b7 2d40      	MOV  R20,R0
0002b8 2c01      	MOV  R0,R1
0002b9 2e14      	MOV  R1,R20
0002ba 914f      	POP  R20
0002bb 9508      	RET
                 
                 __UADD12:
0002bc 0fea      	ADD  R30,R26
0002bd 1ffb      	ADC  R31,R27
0002be 1f68      	ADC  R22,R24
0002bf 9508      	RET
                 
                 __NEGMAN1:
0002c0 95e0      	COM  R30
0002c1 95f0      	COM  R31
0002c2 9560      	COM  R22
0002c3 5fef      	SUBI R30,-1
0002c4 4fff      	SBCI R31,-1
0002c5 4f6f      	SBCI R22,-1
0002c6 9508      	RET
                 
                 __SUBF12:
0002c7 935f      	PUSH R21
0002c8 df81      	RCALL __UNPACK
0002c9 3890      	CPI  R25,0x80
0002ca f171      	BREQ __ADDF129
0002cb e850      	LDI  R21,0x80
0002cc 2615      	EOR  R1,R21
                 
0002cd c004      	RJMP __ADDF120
                 
                 __ADDF12:
0002ce 935f      	PUSH R21
0002cf df7a      	RCALL __UNPACK
0002d0 3890      	CPI  R25,0x80
0002d1 f139      	BREQ __ADDF129
                 
                 __ADDF120:
0002d2 3870      	CPI  R23,0x80
0002d3 f121      	BREQ __ADDF128
                 __ADDF121:
0002d4 2f57      	MOV  R21,R23
0002d5 1b59      	SUB  R21,R25
0002d6 f12b      	BRVS __ADDF1211
0002d7 f412      	BRPL __ADDF122
0002d8 dfd7      	RCALL __SWAPACC
0002d9 cffa      	RJMP __ADDF121
                 __ADDF122:
0002da 3158      	CPI  R21,24
0002db f018      	BRLO __ADDF123
0002dc 27aa      	CLR  R26
0002dd 27bb      	CLR  R27
0002de 2788      	CLR  R24
                 __ADDF123:
0002df 3058      	CPI  R21,8
0002e0 f028      	BRLO __ADDF124
0002e1 2fab      	MOV  R26,R27
0002e2 2fb8      	MOV  R27,R24
0002e3 2788      	CLR  R24
0002e4 5058      	SUBI R21,8
0002e5 cff9      	RJMP __ADDF123
                 __ADDF124:
0002e6 2355      	TST  R21
0002e7 f029      	BREQ __ADDF126
                 __ADDF125:
0002e8 9586      	LSR  R24
0002e9 95b7      	ROR  R27
0002ea 95a7      	ROR  R26
0002eb 955a      	DEC  R21
0002ec f7d9      	BRNE __ADDF125
                 __ADDF126:
0002ed 2d50      	MOV  R21,R0
0002ee 2551      	EOR  R21,R1
0002ef f072      	BRMI __ADDF127
0002f0 dfcb      	RCALL __UADD12
0002f1 f438      	BRCC __ADDF129
0002f2 9567      	ROR  R22
0002f3 95f7      	ROR  R31
0002f4 95e7      	ROR  R30
0002f5 9573      	INC  R23
0002f6 f413      	BRVC __ADDF129
0002f7 c020      	RJMP __MAXRES
                 __ADDF128:
0002f8 dfb7      	RCALL __SWAPACC
                 __ADDF129:
0002f9 df3e      	RCALL __REPACK
0002fa 915f      	POP  R21
0002fb 9508      	RET
                 __ADDF1211:
0002fc f7d8      	BRCC __ADDF128
0002fd cffb      	RJMP __ADDF129
                 __ADDF127:
0002fe 1bea      	SUB  R30,R26
0002ff 0bfb      	SBC  R31,R27
000300 0b68      	SBC  R22,R24
000301 f051      	BREQ __ZERORES
000302 f410      	BRCC __ADDF1210
000303 9400      	COM  R0
000304 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000305 2366      	TST  R22
000306 f392      	BRMI __ADDF129
000307 0fee      	LSL  R30
000308 1fff      	ROL  R31
000309 1f66      	ROL  R22
00030a 957a      	DEC  R23
00030b f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
00030c 27ee      	CLR  R30
00030d 27ff      	CLR  R31
00030e 2766      	CLR  R22
00030f 2777      	CLR  R23
000310 915f      	POP  R21
000311 9508      	RET
                 
                 __MINRES:
000312 efef      	SER  R30
000313 efff      	SER  R31
000314 e76f      	LDI  R22,0x7F
000315 ef7f      	SER  R23
000316 915f      	POP  R21
000317 9508      	RET
                 
                 __MAXRES:
000318 efef      	SER  R30
000319 efff      	SER  R31
00031a e76f      	LDI  R22,0x7F
00031b e77f      	LDI  R23,0x7F
00031c 915f      	POP  R21
00031d 9508      	RET
                 
                 __MULF12:
00031e 935f      	PUSH R21
00031f df2a      	RCALL __UNPACK
000320 3870      	CPI  R23,0x80
000321 f351      	BREQ __ZERORES
000322 3890      	CPI  R25,0x80
000323 f341      	BREQ __ZERORES
000324 2401      	EOR  R0,R1
000325 9408      	SEC
000326 1f79      	ADC  R23,R25
000327 f423      	BRVC __MULF124
000328 f31c      	BRLT __ZERORES
                 __MULF125:
000329 2000      	TST  R0
00032a f33a      	BRMI __MINRES
00032b cfec      	RJMP __MAXRES
                 __MULF124:
00032c 920f      	PUSH R0
00032d 931f      	PUSH R17
00032e 932f      	PUSH R18
00032f 933f      	PUSH R19
000330 934f      	PUSH R20
000331 2711      	CLR  R17
000332 2722      	CLR  R18
000333 2799      	CLR  R25
000334 9f68      	MUL  R22,R24
000335 01a0      	MOVW R20,R0
000336 9f8f      	MUL  R24,R31
000337 2d30      	MOV  R19,R0
000338 0d41      	ADD  R20,R1
000339 1f59      	ADC  R21,R25
00033a 9f6b      	MUL  R22,R27
00033b 0d30      	ADD  R19,R0
00033c 1d41      	ADC  R20,R1
00033d 1f59      	ADC  R21,R25
00033e 9f8e      	MUL  R24,R30
00033f d027      	RCALL __MULF126
000340 9fbf      	MUL  R27,R31
000341 d025      	RCALL __MULF126
000342 9f6a      	MUL  R22,R26
000343 d023      	RCALL __MULF126
000344 9fbe      	MUL  R27,R30
000345 d01d      	RCALL __MULF127
000346 9faf      	MUL  R26,R31
000347 d01b      	RCALL __MULF127
000348 9fae      	MUL  R26,R30
000349 0d11      	ADD  R17,R1
00034a 1f29      	ADC  R18,R25
00034b 1f39      	ADC  R19,R25
00034c 1f49      	ADC  R20,R25
00034d 1f59      	ADC  R21,R25
00034e 2fe3      	MOV  R30,R19
00034f 2ff4      	MOV  R31,R20
000350 2f65      	MOV  R22,R21
000351 2f52      	MOV  R21,R18
000352 914f      	POP  R20
000353 913f      	POP  R19
000354 912f      	POP  R18
000355 911f      	POP  R17
000356 900f      	POP  R0
000357 2366      	TST  R22
000358 f02a      	BRMI __MULF122
000359 0f55      	LSL  R21
00035a 1fee      	ROL  R30
00035b 1fff      	ROL  R31
00035c 1f66      	ROL  R22
00035d c002      	RJMP __MULF123
                 __MULF122:
00035e 9573      	INC  R23
00035f f24b      	BRVS __MULF125
                 __MULF123:
000360 decd      	RCALL __ROUND_REPACK
000361 915f      	POP  R21
000362 9508      	RET
                 
                 __MULF127:
000363 0d10      	ADD  R17,R0
000364 1d21      	ADC  R18,R1
000365 1f39      	ADC  R19,R25
000366 c002      	RJMP __MULF128
                 __MULF126:
000367 0d20      	ADD  R18,R0
000368 1d31      	ADC  R19,R1
                 __MULF128:
000369 1f49      	ADC  R20,R25
00036a 1f59      	ADC  R21,R25
00036b 9508      	RET
                 
                 __DIVF21:
00036c 935f      	PUSH R21
00036d dedc      	RCALL __UNPACK
00036e 3870      	CPI  R23,0x80
00036f f421      	BRNE __DIVF210
000370 2011      	TST  R1
                 __DIVF211:
000371 f40a      	BRPL __DIVF219
000372 cf9f      	RJMP __MINRES
                 __DIVF219:
000373 cfa4      	RJMP __MAXRES
                 __DIVF210:
000374 3890      	CPI  R25,0x80
000375 f409      	BRNE __DIVF218
                 __DIVF217:
000376 cf95      	RJMP __ZERORES
                 __DIVF218:
000377 2401      	EOR  R0,R1
000378 9408      	SEC
000379 0b97      	SBC  R25,R23
00037a f41b      	BRVC __DIVF216
00037b f3d4      	BRLT __DIVF217
00037c 2000      	TST  R0
00037d cff3      	RJMP __DIVF211
                 __DIVF216:
00037e 2f79      	MOV  R23,R25
00037f 931f      	PUSH R17
000380 932f      	PUSH R18
000381 933f      	PUSH R19
000382 934f      	PUSH R20
000383 2411      	CLR  R1
000384 2711      	CLR  R17
000385 2722      	CLR  R18
000386 2733      	CLR  R19
000387 2744      	CLR  R20
000388 2755      	CLR  R21
000389 e290      	LDI  R25,32
                 __DIVF212:
00038a 17ae      	CP   R26,R30
00038b 07bf      	CPC  R27,R31
00038c 0786      	CPC  R24,R22
00038d 0741      	CPC  R20,R17
00038e f030      	BRLO __DIVF213
00038f 1bae      	SUB  R26,R30
000390 0bbf      	SBC  R27,R31
000391 0b86      	SBC  R24,R22
000392 0b41      	SBC  R20,R17
000393 9408      	SEC
000394 c001      	RJMP __DIVF214
                 __DIVF213:
000395 9488      	CLC
                 __DIVF214:
000396 1f55      	ROL  R21
000397 1f22      	ROL  R18
000398 1f33      	ROL  R19
000399 1c11      	ROL  R1
00039a 1faa      	ROL  R26
00039b 1fbb      	ROL  R27
00039c 1f88      	ROL  R24
00039d 1f44      	ROL  R20
00039e 959a      	DEC  R25
00039f f751      	BRNE __DIVF212
0003a0 01f9      	MOVW R30,R18
0003a1 2d61      	MOV  R22,R1
0003a2 914f      	POP  R20
0003a3 913f      	POP  R19
0003a4 912f      	POP  R18
0003a5 911f      	POP  R17
0003a6 2366      	TST  R22
0003a7 f032      	BRMI __DIVF215
0003a8 0f55      	LSL  R21
0003a9 1fee      	ROL  R30
0003aa 1fff      	ROL  R31
0003ab 1f66      	ROL  R22
0003ac 957a      	DEC  R23
0003ad f243      	BRVS __DIVF217
                 __DIVF215:
0003ae de7f      	RCALL __ROUND_REPACK
0003af 915f      	POP  R21
0003b0 9508      	RET
                 
                 __CMPF12:
0003b1 2399      	TST  R25
0003b2 f09a      	BRMI __CMPF120
0003b3 2377      	TST  R23
0003b4 f042      	BRMI __CMPF121
0003b5 1797      	CP   R25,R23
0003b6 f048      	BRLO __CMPF122
0003b7 f429      	BRNE __CMPF121
0003b8 17ae      	CP   R26,R30
0003b9 07bf      	CPC  R27,R31
0003ba 0786      	CPC  R24,R22
0003bb f020      	BRLO __CMPF122
0003bc f031      	BREQ __CMPF123
                 __CMPF121:
0003bd 9498      	CLZ
0003be 9488      	CLC
0003bf 9508      	RET
                 __CMPF122:
0003c0 9498      	CLZ
0003c1 9408      	SEC
0003c2 9508      	RET
                 __CMPF123:
0003c3 9418      	SEZ
0003c4 9488      	CLC
0003c5 9508      	RET
                 __CMPF120:
0003c6 2377      	TST  R23
0003c7 f7c2      	BRPL __CMPF122
0003c8 1797      	CP   R25,R23
0003c9 f398      	BRLO __CMPF121
0003ca f7a9      	BRNE __CMPF122
0003cb 17ea      	CP   R30,R26
0003cc 07fb      	CPC  R31,R27
0003cd 0768      	CPC  R22,R24
0003ce f388      	BRLO __CMPF122
0003cf f399      	BREQ __CMPF123
0003d0 cfec      	RJMP __CMPF121
                 
                 __ANEGD1:
0003d1 95f0      	COM  R31
0003d2 9560      	COM  R22
0003d3 9570      	COM  R23
0003d4 95e1      	NEG  R30
0003d5 4fff      	SBCI R31,-1
0003d6 4f6f      	SBCI R22,-1
0003d7 4f7f      	SBCI R23,-1
0003d8 9508      	RET
                 
                 __CWD1:
0003d9 2f6f      	MOV  R22,R31
0003da 0f66      	ADD  R22,R22
0003db 0b66      	SBC  R22,R22
0003dc 2f76      	MOV  R23,R22
0003dd 9508      	RET
                 
                 __DIVW21U:
0003de 2400      	CLR  R0
0003df 2411      	CLR  R1
0003e0 e190      	LDI  R25,16
                 __DIVW21U1:
0003e1 0faa      	LSL  R26
0003e2 1fbb      	ROL  R27
0003e3 1c00      	ROL  R0
0003e4 1c11      	ROL  R1
0003e5 1a0e      	SUB  R0,R30
0003e6 0a1f      	SBC  R1,R31
0003e7 f418      	BRCC __DIVW21U2
0003e8 0e0e      	ADD  R0,R30
0003e9 1e1f      	ADC  R1,R31
0003ea c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0003eb 60a1      	SBR  R26,1
                 __DIVW21U3:
0003ec 959a      	DEC  R25
0003ed f799      	BRNE __DIVW21U1
0003ee 01fd      	MOVW R30,R26
0003ef 01d0      	MOVW R26,R0
0003f0 9508      	RET
                 
                 __MODW21U:
0003f1 dfec      	RCALL __DIVW21U
0003f2 01fd      	MOVW R30,R26
0003f3 9508      	RET
                 
                 __GETD1S0:
0003f4 81e8      	LD   R30,Y
0003f5 81f9      	LDD  R31,Y+1
0003f6 816a      	LDD  R22,Y+2
0003f7 817b      	LDD  R23,Y+3
0003f8 9508      	RET
                 
                 __GETD2S0:
0003f9 81a8      	LD   R26,Y
0003fa 81b9      	LDD  R27,Y+1
0003fb 818a      	LDD  R24,Y+2
0003fc 819b      	LDD  R25,Y+3
0003fd 9508      	RET
                 
                 __PUTD1S0:
0003fe 83e8      	ST   Y,R30
0003ff 83f9      	STD  Y+1,R31
000400 836a      	STD  Y+2,R22
000401 837b      	STD  Y+3,R23
000402 9508      	RET
                 
                 __PUTPARD1:
000403 937a      	ST   -Y,R23
000404 936a      	ST   -Y,R22
000405 93fa      	ST   -Y,R31
000406 93ea      	ST   -Y,R30
000407 9508      	RET
                 
                 __PUTPARD2:
000408 939a      	ST   -Y,R25
000409 938a      	ST   -Y,R24
00040a 93ba      	ST   -Y,R27
00040b 93aa      	ST   -Y,R26
00040c 9508      	RET
                 
                 __SWAPD12:
00040d 2e18      	MOV  R1,R24
00040e 2f86      	MOV  R24,R22
00040f 2d61      	MOV  R22,R1
000410 2e19      	MOV  R1,R25
000411 2f97      	MOV  R25,R23
000412 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000413 2e1b      	MOV  R1,R27
000414 2fbf      	MOV  R27,R31
000415 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000416 2e1a      	MOV  R1,R26
000417 2fae      	MOV  R26,R30
000418 2de1      	MOV  R30,R1
000419 9508      	RET
                 
                 __CPD10:
00041a 9730      	SBIW R30,0
00041b 4060      	SBCI R22,0
00041c 4070      	SBCI R23,0
00041d 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  31 r1 :  34 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   7 r17:  12 r18:  14 r19:  13 r20:  22 r21:  63 r22:  89 r23:  83 
r24:  53 r25:  57 r26:  78 r27:  47 r28:   6 r29:   1 r30: 113 r31:  69 
x  :   3 y  :  97 z  :   7 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :   9 
adiw  :   6 and   :   5 andi  :   0 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   7 brcs  :   1 break :   0 breq  :  18 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  10 
brlt  :   2 brmi  :   9 brne  :  19 brpl  :   7 brsh  :   2 brtc  :   2 
brts  :   2 brvc  :   4 brvs  :   4 bset  :   0 bst   :   3 call  :  62 
cbi   :   4 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  33 cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :   8 
cp    :   6 cpc   :  10 cpi   :  17 cpse  :   0 dec   :  10 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  24 ld    :  15 ldd   :  42 ldi   : 122 
lds   :   0 lpm   :   7 lsl   :  14 lsr   :   4 mov   :  41 movw  :  29 
mul   :   9 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   0 out   :  18 pop   :  22 push  :  22 rcall :  34 ret   :  42 
reti  :   0 rjmp  :  38 rol   :  28 ror   :  16 sbc   :   8 sbci  :  12 
sbi   :   3 sbic  :   0 sbis  :   1 sbiw  :   9 sbr   :   3 sbrc  :   1 
sbrs  :   1 sec   :   5 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  20 std   :  23 sts   :   0 sub   :   5 subi  :   8 swap  :   0 
tst   :  17 wdr   :   1 
Instructions used: 72 out of 116 (62.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00083c   2088     20   2108   16384  12.9%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 2 warnings
