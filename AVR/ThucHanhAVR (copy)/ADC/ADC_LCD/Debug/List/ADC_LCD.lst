
AVRASM ver. 2.1.30  F:\CodeVisisonAVR\ADC_LCD\Debug\List\ADC_LCD.asm Mon Nov 30 21:20:35 2015

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0048 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 7830
00002b 4b00
00002c 6e65
00002d 3068      	.DB  0x30,0x78,0x0,0x4B,0x65,0x6E,0x68,0x30
00002e 203a
00002f 4400
000030 0020
000031 2042      	.DB  0x3A,0x20,0x0,0x44,0x20,0x0,0x42,0x20
000032 2000
000033 4944
000034 4e45
000035 4120      	.DB  0x0,0x20,0x44,0x49,0x45,0x4E,0x20,0x41
000036 3a50
F:\CodeVisisonAVR\ADC_LCD\Debug\List\ADC_LCD.asm(1120): warning: .cseg .db misalignment - padding zero byte
000037 0000      	.DB  0x50,0x3A,0x0
                 
                 __GLOBAL_INI_TBL:
000038 0003      	.DW  0x03
000039 0160      	.DW  _0x1D
00003a 0054      	.DW  _0x0*2
                 
00003b 0008      	.DW  0x08
00003c 0163      	.DW  _0x25
00003d 0057      	.DW  _0x0*2+3
                 
00003e 0003      	.DW  0x03
00003f 016b      	.DW  _0x25+8
000040 005f      	.DW  _0x0*2+11
                 
000041 0003      	.DW  0x03
000042 016e      	.DW  _0x25+11
000043 0062      	.DW  _0x0*2+14
                 
000044 000a      	.DW  0x0A
000045 0171      	.DW  _0x25+14
000046 0065      	.DW  _0x0*2+17
                 
                 _0xFFFFFFFF:
000047 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000048 94f8      	CLI
000049 27ee      	CLR  R30
00004a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004b e0f1      	LDI  R31,1
00004c bffb      	OUT  GICR,R31
00004d bfeb      	OUT  GICR,R30
00004e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004f e08d      	LDI  R24,(14-2)+1
000050 e0a2      	LDI  R26,2
000051 27bb      	CLR  R27
                 __CLEAR_REG:
000052 93ed      	ST   X+,R30
000053 958a      	DEC  R24
000054 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000055 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000056 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000057 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000058 93ed      	ST   X+,R30
000059 9701      	SBIW R24,1
00005a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005b e7e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005d 9185      	LPM  R24,Z+
00005e 9195      	LPM  R25,Z+
00005f 9700      	SBIW R24,0
000060 f061      	BREQ __GLOBAL_INI_END
000061 91a5      	LPM  R26,Z+
000062 91b5      	LPM  R27,Z+
000063 9005      	LPM  R0,Z+
000064 9015      	LPM  R1,Z+
000065 01bf      	MOVW R22,R30
000066 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000067 9005      	LPM  R0,Z+
000068 920d      	ST   X+,R0
000069 9701      	SBIW R24,1
00006a f7e1      	BRNE __GLOBAL_INI_LOOP
00006b 01fb      	MOVW R30,R22
00006c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006e bfed      	OUT  SPL,R30
00006f e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000070 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000071 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000072 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000073 940c 014b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * main.c
                 ; *
                 ; * Created: 11/5/2015 3:22:44 PM
                 ; * Author: Le Ngoc An
                 ; * Group : D13DCDT02-N
                 ; */
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;
                 ;    // Khai bao ket noi LCD
                 ;#define RS PORTC.6
                 ;#define EN PORTC.7
                 ;#define LCD_data PORTD
                 ;    // Dien ap tham chieu AVCC, du lieu dich trai
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (1<<ADLAR))
                 ;
                 ;    // Ghi lenh len LCD
                 ;void LCD_instruction(unsigned char x)
                 ; 0000 0015 {
                 
                 	.CSEG
                 _LCD_instruction:
                 ; .FSTART _LCD_instruction
                 ; 0000 0016     RS = 0;
000075 93aa      	ST   -Y,R26
                 ;	x -> Y+0
000076 98ae      	CBI  0x15,6
                 ; 0000 0017     LCD_data = x;
000077 940e 017f 	CALL SUBOPT_0x0
                 ; 0000 0018     EN = 0;
                 ; 0000 0019     EN = 1;
                 ; 0000 001A     delay_ms(2);
                 ; 0000 001B }
000079 c061      	RJMP _0x2020002
                 ; .FEND
                 ;    // Ghi ky tu len LCD
                 ;void LCD_write(unsigned char c)
                 ; 0000 001E {
                 _LCD_write:
                 ; .FSTART _LCD_write
                 ; 0000 001F     RS = 1;
00007a 93aa      	ST   -Y,R26
                 ;	c -> Y+0
00007b 9aae      	SBI  0x15,6
                 ; 0000 0020     LCD_data = c;
00007c 940e 017f 	CALL SUBOPT_0x0
                 ; 0000 0021     EN = 0;
                 ; 0000 0022     EN = 1;
                 ; 0000 0023     delay_ms(2);
                 ; 0000 0024 }
00007e c05c      	RJMP _0x2020002
                 ; .FEND
                 ;
                 ;    // Ghi chuoi len LCD
                 ;void LCD_writes(char *str)
                 ; 0000 0028 {
                 _LCD_writes:
                 ; .FSTART _LCD_writes
                 ; 0000 0029     int i=0;
                 ; 0000 002A     while(str[i] != 0)
00007f 93ba      	ST   -Y,R27
000080 93aa      	ST   -Y,R26
000081 931a      	ST   -Y,R17
000082 930a      	ST   -Y,R16
                 ;	*str -> Y+2
                 ;	i -> R16,R17
                +
000083 e000     +LDI R16 , LOW ( 0 )
000084 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xF:
000085 01f8      	MOVW R30,R16
000086 81aa      	LDD  R26,Y+2
000087 81bb      	LDD  R27,Y+2+1
000088 0fae      	ADD  R26,R30
000089 1fbf      	ADC  R27,R31
00008a 91ec      	LD   R30,X
00008b 30e0      	CPI  R30,0
00008c f051      	BREQ _0x11
                 ; 0000 002B     {
                 ; 0000 002C         LCD_write(str[i]);
00008d 01f8      	MOVW R30,R16
00008e 81aa      	LDD  R26,Y+2
00008f 81bb      	LDD  R27,Y+2+1
000090 0fae      	ADD  R26,R30
000091 1fbf      	ADC  R27,R31
000092 91ac      	LD   R26,X
000093 dfe6      	RCALL _LCD_write
                 ; 0000 002D         i++;
                +
000094 5f0f     +SUBI R16 , LOW ( - 1 )
000095 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 002E 
                 ; 0000 002F     }
000096 cfee      	RJMP _0xF
                 _0x11:
                 ; 0000 0030 }
000097 8119      	LDD  R17,Y+1
000098 8108      	LDD  R16,Y+0
000099 9624      	ADIW R28,4
00009a 9508      	RET
                 ; .FEND
                 ;    // Set dia chi, ghi chuoi len LCD
                 ;void LCD_string(unsigned char row, unsigned char col, char *str)
                 ; 0000 0033 {
                 _LCD_string:
                 ; .FSTART _LCD_string
                 ; 0000 0034     unsigned char cmd;
                 ; 0000 0035     cmd = (row == 1 ? 0x80 : 0xC0) + col - 1;
00009b 93ba      	ST   -Y,R27
00009c 93aa      	ST   -Y,R26
00009d 931a      	ST   -Y,R17
                 ;	row -> Y+4
                 ;	col -> Y+3
                 ;	*str -> Y+1
                 ;	cmd -> R17
00009e 81ac      	LDD  R26,Y+4
00009f 30a1      	CPI  R26,LOW(0x1)
0000a0 f411      	BRNE _0x12
0000a1 e8e0      	LDI  R30,LOW(128)
0000a2 c001      	RJMP _0x13
                 _0x12:
0000a3 ece0      	LDI  R30,LOW(192)
                 _0x13:
0000a4 81ab      	LDD  R26,Y+3
0000a5 0fae      	ADD  R26,R30
0000a6 50a1      	SUBI R26,LOW(1)
0000a7 2f1a      	MOV  R17,R26
                 ; 0000 0036     LCD_instruction(cmd);
0000a8 dfcc      	RCALL _LCD_instruction
                 ; 0000 0037     LCD_writes(str);
0000a9 81a9      	LDD  R26,Y+1
0000aa 81ba      	LDD  R27,Y+1+1
0000ab dfd3      	RCALL _LCD_writes
                 ; 0000 0038 }
0000ac 8118      	LDD  R17,Y+0
0000ad 9625      	ADIW R28,5
0000ae 9508      	RET
                 ; .FEND
                 ;
                 ;void LCD_init()
                 ; 0000 003B {
                 _LCD_init:
                 ; .FSTART _LCD_init
                 ; 0000 003C     LCD_instruction(0x30);
0000af e3a0      	LDI  R26,LOW(48)
0000b0 dfc4      	RCALL _LCD_instruction
                 ; 0000 003D 	LCD_instruction(0x38); // 2 dong, font 5x7
0000b1 e3a8      	LDI  R26,LOW(56)
0000b2 dfc2      	RCALL _LCD_instruction
                 ; 0000 003E 	LCD_instruction(0x01); // Xoa man hinh
0000b3 e0a1      	LDI  R26,LOW(1)
0000b4 dfc0      	RCALL _LCD_instruction
                 ; 0000 003F 	LCD_instruction(0x0C); // Bat hien thi, xoa con tro
0000b5 e0ac      	LDI  R26,LOW(12)
0000b6 dfbe      	RCALL _LCD_instruction
                 ; 0000 0040 }
0000b7 9508      	RET
                 ; .FEND
                 ;
                 ;    // Doc gia tri ADC
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0044 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0045     ADMUX = adc_input | ADC_VREF_TYPE; // Khoi dong ADC
0000b8 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0000b9 81e8      	LD   R30,Y
0000ba 66e0      	ORI  R30,LOW(0x60)
0000bb b9e7      	OUT  0x7,R30
                 ; 0000 0046     delay_us(10);
                +
0000bc e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000bd 958a     +DEC R24
0000be f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0047     ADCSRA |= (1<<ADSC);   // Start ADC
0000bf 9a36      	SBI  0x6,6
                 ; 0000 0048     while((ADCSRA & (1<<ADIF))==0);  // Doi chuyen doi
                 _0x15:
0000c0 9b34      	SBIS 0x6,4
0000c1 cffe      	RJMP _0x15
                 ; 0000 0049     ADCSRA |= (1<<ADIF); // Xoa co ngat
0000c2 9a34      	SBI  0x6,4
                 ; 0000 004A     return ADCH;      // Tra ve gia tri o thanh ghi ADCH
0000c3 b1e5      	IN   R30,0x5
0000c4 c016      	RJMP _0x2020002
                 ; 0000 004B }
                 ; .FEND
                 ;    // Ghi gia tri dang thap phan
                 ;void Decimal_Convert(unsigned char d)
                 ; 0000 004E {
                 _Decimal_Convert:
                 ; .FSTART _Decimal_Convert
                 ; 0000 004F       LCD_write(d/100+0x30);
0000c5 93aa      	ST   -Y,R26
                 ;	d -> Y+0
0000c6 81a8      	LD   R26,Y
0000c7 e0b0      	LDI  R27,0
0000c8 e6e4      	LDI  R30,LOW(100)
0000c9 e0f0      	LDI  R31,HIGH(100)
0000ca 940e 0187 	CALL SUBOPT_0x1
                 ; 0000 0050       LCD_write(d%100/10+0x30);
0000cc e6e4      	LDI  R30,LOW(100)
0000cd e0f0      	LDI  R31,HIGH(100)
0000ce 940e 02b4 	CALL __MODW21
0000d0 01df      	MOVW R26,R30
0000d1 e0ea      	LDI  R30,LOW(10)
0000d2 e0f0      	LDI  R31,HIGH(10)
0000d3 940e 0187 	CALL SUBOPT_0x1
                 ; 0000 0051       LCD_write(d%10+0x30);
0000d5 e0ea      	LDI  R30,LOW(10)
0000d6 e0f0      	LDI  R31,HIGH(10)
0000d7 940e 02b4 	CALL __MODW21
0000d9 940e 0190 	CALL SUBOPT_0x2
                 ; 0000 0052 }
                 _0x2020002:
0000db 9621      	ADIW R28,1
0000dc 9508      	RET
                 ; .FEND
                 ;    // Ghi gia tri dang nhi phan
                 ;void Binary_Convert(unsigned char b)
                 ; 0000 0055 {
                 _Binary_Convert:
                 ; .FSTART _Binary_Convert
                 ; 0000 0056     unsigned char i,bits;
                 ; 0000 0057 
                 ; 0000 0058     for(i=0;i<8;i++)
0000dd 93aa      	ST   -Y,R26
0000de 931a      	ST   -Y,R17
0000df 930a      	ST   -Y,R16
                 ;	b -> Y+2
                 ;	i -> R17
                 ;	bits -> R16
0000e0 e010      	LDI  R17,LOW(0)
                 _0x19:
0000e1 3018      	CPI  R17,8
0000e2 f470      	BRSH _0x1A
                 ; 0000 0059     {
                 ; 0000 005A         bits = b & 0x80;
0000e3 81ea      	LDD  R30,Y+2
0000e4 78e0      	ANDI R30,LOW(0x80)
0000e5 2f0e      	MOV  R16,R30
                 ; 0000 005B         if(bits == 0x80)
0000e6 3800      	CPI  R16,128
0000e7 f411      	BRNE _0x1B
                 ; 0000 005C             LCD_write(1+0x30);
0000e8 e3a1      	LDI  R26,LOW(49)
0000e9 c001      	RJMP _0x2A
                 ; 0000 005D         else
                 _0x1B:
                 ; 0000 005E             LCD_write(0x30);
0000ea e3a0      	LDI  R26,LOW(48)
                 _0x2A:
0000eb df8e      	RCALL _LCD_write
                 ; 0000 005F         b = b << 1;
0000ec 81ea      	LDD  R30,Y+2
0000ed 0fee      	LSL  R30
0000ee 83ea      	STD  Y+2,R30
                 ; 0000 0060     }
0000ef 5f1f      	SUBI R17,-1
0000f0 cff0      	RJMP _0x19
                 _0x1A:
                 ; 0000 0061 }
0000f1 c055      	RJMP _0x2020001
                 ; .FEND
                 ;
                 ;    // Ghi gia tri dang thap luc phan
                 ;void Hexa_Convert(unsigned char h)
                 ; 0000 0065 {
                 _Hexa_Convert:
                 ; .FSTART _Hexa_Convert
                 ; 0000 0066     unsigned char ch,dv;
                 ; 0000 0067     ch = h/16;
0000f2 93aa      	ST   -Y,R26
0000f3 931a      	ST   -Y,R17
0000f4 930a      	ST   -Y,R16
                 ;	h -> Y+2
                 ;	ch -> R17
                 ;	dv -> R16
0000f5 81aa      	LDD  R26,Y+2
0000f6 e0b0      	LDI  R27,0
0000f7 e1e0      	LDI  R30,LOW(16)
0000f8 e0f0      	LDI  R31,HIGH(16)
0000f9 940e 02ac 	CALL __DIVW21
0000fb 2f1e      	MOV  R17,R30
                 ; 0000 0068     dv = h%16;
0000fc 81ea      	LDD  R30,Y+2
0000fd e0f0      	LDI  R31,0
0000fe e0af      	LDI  R26,LOW(15)
0000ff e0b0      	LDI  R27,HIGH(15)
000100 940e 02c2 	CALL __MANDW12
000102 2f0e      	MOV  R16,R30
                 ; 0000 0069     LCD_writes("0x");
                +
000103 e6a0     +LDI R26 , LOW ( _0x1D + ( 0 ) )
000104 e0b1     +LDI R27 , HIGH ( _0x1D + ( 0 ) )
                 	__POINTW2MN _0x1D,0
000105 df79      	RCALL _LCD_writes
                 ; 0000 006A 
                 ; 0000 006B     if(ch<10)
000106 301a      	CPI  R17,10
000107 f418      	BRSH _0x1E
                 ; 0000 006C         LCD_write(ch+0x30);
000108 2fa1      	MOV  R26,R17
000109 5da0      	SUBI R26,-LOW(48)
00010a c002      	RJMP _0x2B
                 ; 0000 006D     else
                 _0x1E:
                 ; 0000 006E         LCD_write(ch-10+0x41);
00010b 2fa1      	MOV  R26,R17
00010c 5ca9      	SUBI R26,-LOW(55)
                 _0x2B:
00010d df6c      	RCALL _LCD_write
                 ; 0000 006F     if(dv<10)
00010e 300a      	CPI  R16,10
00010f f418      	BRSH _0x20
                 ; 0000 0070         LCD_write(dv+0x30);
000110 2fa0      	MOV  R26,R16
000111 5da0      	SUBI R26,-LOW(48)
000112 c002      	RJMP _0x2C
                 ; 0000 0071     else
                 _0x20:
                 ; 0000 0072         LCD_write(dv-10+0x41);
000113 2fa0      	MOV  R26,R16
000114 5ca9      	SUBI R26,-LOW(55)
                 _0x2C:
000115 df64      	RCALL _LCD_write
                 ; 0000 0073 }
000116 c030      	RJMP _0x2020001
                 ; .FEND
                 
                 	.DSEG
                 _0x1D:
000160           	.BYTE 0x3
                 ;
                 ;    // Hien thi dien ap
                 ;void Voltage_Convert(unsigned char v)
                 ; 0000 0077 {
                 
                 	.CSEG
                 _Voltage_Convert:
                 ; .FSTART _Voltage_Convert
                 ; 0000 0078     unsigned int voltage;
                 ; 0000 0079     voltage = v * 1.953125f;
000117 93aa      	ST   -Y,R26
000118 931a      	ST   -Y,R17
000119 930a      	ST   -Y,R16
                 ;	v -> Y+2
                 ;	voltage -> R16,R17
00011a 81ea      	LDD  R30,Y+2
00011b e0f0      	LDI  R31,0
00011c 940e 0294 	CALL __CWD1
00011e 940e 020c 	CALL __CDF1
                +
000120 e0a0     +LDI R26 , LOW ( 0x3FFA0000 )
000121 e0b0     +LDI R27 , HIGH ( 0x3FFA0000 )
000122 ef8a     +LDI R24 , BYTE3 ( 0x3FFA0000 )
000123 e39f     +LDI R25 , BYTE4 ( 0x3FFA0000 )
                 	__GETD2N 0x3FFA0000
000124 940e 023a 	CALL __MULF12
000126 940e 01d3 	CALL __CFD1U
000128 018f      	MOVW R16,R30
                 ; 0000 007A     LCD_write(voltage/100+0x30);
000129 01d8      	MOVW R26,R16
00012a e6e4      	LDI  R30,LOW(100)
00012b e0f0      	LDI  R31,HIGH(100)
00012c 940e 0299 	CALL __DIVW21U
00012e 940e 0190 	CALL SUBOPT_0x2
                 ; 0000 007B     LCD_write('.');
000130 e2ae      	LDI  R26,LOW(46)
000131 df48      	RCALL _LCD_write
                 ; 0000 007C     LCD_write(voltage%100/10+0x30);
000132 01d8      	MOVW R26,R16
000133 e6e4      	LDI  R30,LOW(100)
000134 e0f0      	LDI  R31,HIGH(100)
000135 940e 02b1 	CALL __MODW21U
000137 01df      	MOVW R26,R30
000138 e0ea      	LDI  R30,LOW(10)
000139 e0f0      	LDI  R31,HIGH(10)
00013a 940e 0299 	CALL __DIVW21U
00013c 940e 0190 	CALL SUBOPT_0x2
                 ; 0000 007D     LCD_write(voltage%10+0x30);
00013e 01d8      	MOVW R26,R16
00013f e0ea      	LDI  R30,LOW(10)
000140 e0f0      	LDI  R31,HIGH(10)
000141 940e 02b1 	CALL __MODW21U
000143 940e 0190 	CALL SUBOPT_0x2
                 ; 0000 007E     LCD_write('V');
000145 e5a6      	LDI  R26,LOW(86)
000146 df33      	RCALL _LCD_write
                 ; 0000 007F }
                 _0x2020001:
000147 8119      	LDD  R17,Y+1
000148 8108      	LDD  R16,Y+0
000149 9623      	ADIW R28,3
00014a 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0083 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0084     unsigned char n;
                 ; 0000 0085     DDRD = 0xFF;
                 ;	n -> R17
00014b efef      	LDI  R30,LOW(255)
00014c bbe1      	OUT  0x11,R30
                 ; 0000 0086     DDRC = (1<<DDC7) | (1<<DDC6);
00014d ece0      	LDI  R30,LOW(192)
00014e bbe4      	OUT  0x14,R30
                 ; 0000 0087 
                 ; 0000 0088     // Khoi dong LCD
                 ; 0000 0089     ADMUX = ADC_VREF_TYPE;
00014f e6e0      	LDI  R30,LOW(96)
000150 b9e7      	OUT  0x7,R30
                 ; 0000 008A     ADCSRA = (1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000151 eae0      	LDI  R30,LOW(160)
000152 b9e6      	OUT  0x6,R30
                 ; 0000 008B     SFIOR = (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000153 e0e0      	LDI  R30,LOW(0)
000154 bfe0      	OUT  0x30,R30
                 ; 0000 008C 
                 ; 0000 008D     LCD_init();
000155 df59      	RCALL _LCD_init
                 ; 0000 008E while (1)
                 _0x22:
                 ; 0000 008F     {
                 ; 0000 0090         LCD_string(1,1,"Kenh0: ");
000156 e0e1      	LDI  R30,LOW(1)
000157 93ea      	ST   -Y,R30
000158 93ea      	ST   -Y,R30
                +
000159 e6a3     +LDI R26 , LOW ( _0x25 + ( 0 ) )
00015a e0b1     +LDI R27 , HIGH ( _0x25 + ( 0 ) )
                 	__POINTW2MN _0x25,0
00015b df3f      	RCALL _LCD_string
                 ; 0000 0091         Decimal_Convert(read_adc(0));
00015c 940e 0194 	CALL SUBOPT_0x3
00015e df66      	RCALL _Decimal_Convert
                 ; 0000 0092         LCD_writes("D ");
                +
00015f e6ab     +LDI R26 , LOW ( _0x25 + ( 8 ) )
000160 e0b1     +LDI R27 , HIGH ( _0x25 + ( 8 ) )
                 	__POINTW2MN _0x25,8
000161 940e 0199 	CALL SUBOPT_0x4
                 ; 0000 0093         Binary_Convert(read_adc(0));
000163 df79      	RCALL _Binary_Convert
                 ; 0000 0094         LCD_writes("B ");
                +
000164 e6ae     +LDI R26 , LOW ( _0x25 + ( 11 ) )
000165 e0b1     +LDI R27 , HIGH ( _0x25 + ( 11 ) )
                 	__POINTW2MN _0x25,11
000166 940e 0199 	CALL SUBOPT_0x4
                 ; 0000 0095         Hexa_Convert(read_adc(0));
000168 df89      	RCALL _Hexa_Convert
                 ; 0000 0096         LCD_writes(" DIEN AP:");
                +
000169 e7a1     +LDI R26 , LOW ( _0x25 + ( 14 ) )
00016a e0b1     +LDI R27 , HIGH ( _0x25 + ( 14 ) )
                 	__POINTW2MN _0x25,14
00016b 940e 0199 	CALL SUBOPT_0x4
                 ; 0000 0097         Voltage_Convert(read_adc(0));
00016d dfa9      	RCALL _Voltage_Convert
                 ; 0000 0098 
                 ; 0000 0099         LCD_instruction(0xC0);
00016e eca0      	LDI  R26,LOW(192)
00016f df05      	RCALL _LCD_instruction
                 ; 0000 009A         for(n=1;n<8;n++)
000170 e011      	LDI  R17,LOW(1)
                 _0x27:
000171 3018      	CPI  R17,8
000172 f440      	BRSH _0x28
                 ; 0000 009B         {
                 ; 0000 009C             Voltage_Convert(read_adc(n));
000173 2fa1      	MOV  R26,R17
000174 df43      	RCALL _read_adc
000175 2fae      	MOV  R26,R30
000176 dfa0      	RCALL _Voltage_Convert
                 ; 0000 009D             LCD_write(' ');
000177 e2a0      	LDI  R26,LOW(32)
000178 df01      	RCALL _LCD_write
                 ; 0000 009E         }
000179 5f1f      	SUBI R17,-1
00017a cff6      	RJMP _0x27
                 _0x28:
                 ; 0000 009F         LCD_instruction(0x18);
00017b e1a8      	LDI  R26,LOW(24)
00017c def8      	RCALL _LCD_instruction
                 ; 0000 00A0     }
00017d cfd8      	RJMP _0x22
                 ; 0000 00A1 }
                 _0x29:
00017e cfff      	RJMP _0x29
                 ; .FEND
                 
                 	.DSEG
                 _0x25:
000163           	.BYTE 0x18
                 
                 	.CSEG
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00017f 81e8      	LD   R30,Y
000180 bbe2      	OUT  0x12,R30
000181 98af      	CBI  0x15,7
000182 9aaf      	SBI  0x15,7
000183 e0a2      	LDI  R26,LOW(2)
000184 e0b0      	LDI  R27,0
000185 940c 019c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000187 940e 02ac 	CALL __DIVW21
000189 5de0      	SUBI R30,-LOW(48)
00018a 2fae      	MOV  R26,R30
00018b 940e 007a 	CALL _LCD_write
00018d 81a8      	LD   R26,Y
00018e 27bb      	CLR  R27
00018f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000190 5de0      	SUBI R30,-LOW(48)
000191 2fae      	MOV  R26,R30
000192 940c 007a 	JMP  _LCD_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000194 e0a0      	LDI  R26,LOW(0)
000195 940e 00b8 	CALL _read_adc
000197 2fae      	MOV  R26,R30
000198 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000199 940e 007f 	CALL _LCD_writes
00019b cff8      	RJMP SUBOPT_0x3
                 
                 
                 	.CSEG
                 _delay_ms:
00019c 9610      	adiw r26,0
00019d f039      	breq __delay_ms1
                 __delay_ms0:
                +
00019e ed80     +LDI R24 , LOW ( 0x7D0 )
00019f e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001a0 9701     +SBIW R24 , 1
0001a1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001a2 95a8      	wdr
0001a3 9711      	sbiw r26,1
0001a4 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001a5 9508      	ret
                 
                 __ROUND_REPACK:
0001a6 2355      	TST  R21
0001a7 f442      	BRPL __REPACK
0001a8 3850      	CPI  R21,0x80
0001a9 f411      	BRNE __ROUND_REPACK0
0001aa ffe0      	SBRS R30,0
0001ab c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0001ac 9631      	ADIW R30,1
0001ad 1f69      	ADC  R22,R25
0001ae 1f79      	ADC  R23,R25
0001af f06b      	BRVS __REPACK1
                 
                 __REPACK:
0001b0 e850      	LDI  R21,0x80
0001b1 2757      	EOR  R21,R23
0001b2 f411      	BRNE __REPACK0
0001b3 935f      	PUSH R21
0001b4 c073      	RJMP __ZERORES
                 __REPACK0:
0001b5 3f5f      	CPI  R21,0xFF
0001b6 f031      	BREQ __REPACK1
0001b7 0f66      	LSL  R22
0001b8 0c00      	LSL  R0
0001b9 9557      	ROR  R21
0001ba 9567      	ROR  R22
0001bb 2f75      	MOV  R23,R21
0001bc 9508      	RET
                 __REPACK1:
0001bd 935f      	PUSH R21
0001be 2000      	TST  R0
0001bf f00a      	BRMI __REPACK2
0001c0 c073      	RJMP __MAXRES
                 __REPACK2:
0001c1 c06c      	RJMP __MINRES
                 
                 __UNPACK:
0001c2 e850      	LDI  R21,0x80
0001c3 2e19      	MOV  R1,R25
0001c4 2215      	AND  R1,R21
0001c5 0f88      	LSL  R24
0001c6 1f99      	ROL  R25
0001c7 2795      	EOR  R25,R21
0001c8 0f55      	LSL  R21
0001c9 9587      	ROR  R24
                 
                 __UNPACK1:
0001ca e850      	LDI  R21,0x80
0001cb 2e07      	MOV  R0,R23
0001cc 2205      	AND  R0,R21
0001cd 0f66      	LSL  R22
0001ce 1f77      	ROL  R23
0001cf 2775      	EOR  R23,R21
0001d0 0f55      	LSL  R21
0001d1 9567      	ROR  R22
0001d2 9508      	RET
                 
                 __CFD1U:
0001d3 9468      	SET
0001d4 c001      	RJMP __CFD1U0
                 __CFD1:
0001d5 94e8      	CLT
                 __CFD1U0:
0001d6 935f      	PUSH R21
0001d7 dff2      	RCALL __UNPACK1
0001d8 3870      	CPI  R23,0x80
0001d9 f018      	BRLO __CFD10
0001da 3f7f      	CPI  R23,0xFF
0001db f408      	BRCC __CFD10
0001dc c04b      	RJMP __ZERORES
                 __CFD10:
0001dd e156      	LDI  R21,22
0001de 1b57      	SUB  R21,R23
0001df f4aa      	BRPL __CFD11
0001e0 9551      	NEG  R21
0001e1 3058      	CPI  R21,8
0001e2 f40e      	BRTC __CFD19
0001e3 3059      	CPI  R21,9
                 __CFD19:
0001e4 f030      	BRLO __CFD17
0001e5 efef      	SER  R30
0001e6 efff      	SER  R31
0001e7 ef6f      	SER  R22
0001e8 e77f      	LDI  R23,0x7F
0001e9 f977      	BLD  R23,7
0001ea c01a      	RJMP __CFD15
                 __CFD17:
0001eb 2777      	CLR  R23
0001ec 2355      	TST  R21
0001ed f0b9      	BREQ __CFD15
                 __CFD18:
0001ee 0fee      	LSL  R30
0001ef 1fff      	ROL  R31
0001f0 1f66      	ROL  R22
0001f1 1f77      	ROL  R23
0001f2 955a      	DEC  R21
0001f3 f7d1      	BRNE __CFD18
0001f4 c010      	RJMP __CFD15
                 __CFD11:
0001f5 2777      	CLR  R23
                 __CFD12:
0001f6 3058      	CPI  R21,8
0001f7 f028      	BRLO __CFD13
0001f8 2fef      	MOV  R30,R31
0001f9 2ff6      	MOV  R31,R22
0001fa 2f67      	MOV  R22,R23
0001fb 5058      	SUBI R21,8
0001fc cff9      	RJMP __CFD12
                 __CFD13:
0001fd 2355      	TST  R21
0001fe f031      	BREQ __CFD15
                 __CFD14:
0001ff 9576      	LSR  R23
000200 9567      	ROR  R22
000201 95f7      	ROR  R31
000202 95e7      	ROR  R30
000203 955a      	DEC  R21
000204 f7d1      	BRNE __CFD14
                 __CFD15:
000205 2000      	TST  R0
000206 f40a      	BRPL __CFD16
000207 d084      	RCALL __ANEGD1
                 __CFD16:
000208 915f      	POP  R21
000209 9508      	RET
                 
                 __CDF1U:
00020a 9468      	SET
00020b c001      	RJMP __CDF1U0
                 __CDF1:
00020c 94e8      	CLT
                 __CDF1U0:
00020d 9730      	SBIW R30,0
00020e 4060      	SBCI R22,0
00020f 4070      	SBCI R23,0
000210 f0b1      	BREQ __CDF10
000211 2400      	CLR  R0
000212 f026      	BRTS __CDF11
000213 2377      	TST  R23
000214 f412      	BRPL __CDF11
000215 9400      	COM  R0
000216 d075      	RCALL __ANEGD1
                 __CDF11:
000217 2e17      	MOV  R1,R23
000218 e17e      	LDI  R23,30
000219 2011      	TST  R1
                 __CDF12:
00021a f032      	BRMI __CDF13
00021b 957a      	DEC  R23
00021c 0fee      	LSL  R30
00021d 1fff      	ROL  R31
00021e 1f66      	ROL  R22
00021f 1c11      	ROL  R1
000220 cff9      	RJMP __CDF12
                 __CDF13:
000221 2fef      	MOV  R30,R31
000222 2ff6      	MOV  R31,R22
000223 2d61      	MOV  R22,R1
000224 935f      	PUSH R21
000225 df8a      	RCALL __REPACK
000226 915f      	POP  R21
                 __CDF10:
000227 9508      	RET
                 
                 __ZERORES:
000228 27ee      	CLR  R30
000229 27ff      	CLR  R31
00022a 2766      	CLR  R22
00022b 2777      	CLR  R23
00022c 915f      	POP  R21
00022d 9508      	RET
                 
                 __MINRES:
00022e efef      	SER  R30
00022f efff      	SER  R31
000230 e76f      	LDI  R22,0x7F
000231 ef7f      	SER  R23
000232 915f      	POP  R21
000233 9508      	RET
                 
                 __MAXRES:
000234 efef      	SER  R30
000235 efff      	SER  R31
000236 e76f      	LDI  R22,0x7F
000237 e77f      	LDI  R23,0x7F
000238 915f      	POP  R21
000239 9508      	RET
                 
                 __MULF12:
00023a 935f      	PUSH R21
00023b df86      	RCALL __UNPACK
00023c 3870      	CPI  R23,0x80
00023d f351      	BREQ __ZERORES
00023e 3890      	CPI  R25,0x80
00023f f341      	BREQ __ZERORES
000240 2401      	EOR  R0,R1
000241 9408      	SEC
000242 1f79      	ADC  R23,R25
000243 f423      	BRVC __MULF124
000244 f31c      	BRLT __ZERORES
                 __MULF125:
000245 2000      	TST  R0
000246 f33a      	BRMI __MINRES
000247 cfec      	RJMP __MAXRES
                 __MULF124:
000248 920f      	PUSH R0
000249 931f      	PUSH R17
00024a 932f      	PUSH R18
00024b 933f      	PUSH R19
00024c 934f      	PUSH R20
00024d 2711      	CLR  R17
00024e 2722      	CLR  R18
00024f 2799      	CLR  R25
000250 9f68      	MUL  R22,R24
000251 01a0      	MOVW R20,R0
000252 9f8f      	MUL  R24,R31
000253 2d30      	MOV  R19,R0
000254 0d41      	ADD  R20,R1
000255 1f59      	ADC  R21,R25
000256 9f6b      	MUL  R22,R27
000257 0d30      	ADD  R19,R0
000258 1d41      	ADC  R20,R1
000259 1f59      	ADC  R21,R25
00025a 9f8e      	MUL  R24,R30
00025b d027      	RCALL __MULF126
00025c 9fbf      	MUL  R27,R31
00025d d025      	RCALL __MULF126
00025e 9f6a      	MUL  R22,R26
00025f d023      	RCALL __MULF126
000260 9fbe      	MUL  R27,R30
000261 d01d      	RCALL __MULF127
000262 9faf      	MUL  R26,R31
000263 d01b      	RCALL __MULF127
000264 9fae      	MUL  R26,R30
000265 0d11      	ADD  R17,R1
000266 1f29      	ADC  R18,R25
000267 1f39      	ADC  R19,R25
000268 1f49      	ADC  R20,R25
000269 1f59      	ADC  R21,R25
00026a 2fe3      	MOV  R30,R19
00026b 2ff4      	MOV  R31,R20
00026c 2f65      	MOV  R22,R21
00026d 2f52      	MOV  R21,R18
00026e 914f      	POP  R20
00026f 913f      	POP  R19
000270 912f      	POP  R18
000271 911f      	POP  R17
000272 900f      	POP  R0
000273 2366      	TST  R22
000274 f02a      	BRMI __MULF122
000275 0f55      	LSL  R21
000276 1fee      	ROL  R30
000277 1fff      	ROL  R31
000278 1f66      	ROL  R22
000279 c002      	RJMP __MULF123
                 __MULF122:
00027a 9573      	INC  R23
00027b f24b      	BRVS __MULF125
                 __MULF123:
00027c df29      	RCALL __ROUND_REPACK
00027d 915f      	POP  R21
00027e 9508      	RET
                 
                 __MULF127:
00027f 0d10      	ADD  R17,R0
000280 1d21      	ADC  R18,R1
000281 1f39      	ADC  R19,R25
000282 c002      	RJMP __MULF128
                 __MULF126:
000283 0d20      	ADD  R18,R0
000284 1d31      	ADC  R19,R1
                 __MULF128:
000285 1f49      	ADC  R20,R25
000286 1f59      	ADC  R21,R25
000287 9508      	RET
                 
                 __ANEGW1:
000288 95f1      	NEG  R31
000289 95e1      	NEG  R30
00028a 40f0      	SBCI R31,0
00028b 9508      	RET
                 
                 __ANEGD1:
00028c 95f0      	COM  R31
00028d 9560      	COM  R22
00028e 9570      	COM  R23
00028f 95e1      	NEG  R30
000290 4fff      	SBCI R31,-1
000291 4f6f      	SBCI R22,-1
000292 4f7f      	SBCI R23,-1
000293 9508      	RET
                 
                 __CWD1:
000294 2f6f      	MOV  R22,R31
000295 0f66      	ADD  R22,R22
000296 0b66      	SBC  R22,R22
000297 2f76      	MOV  R23,R22
000298 9508      	RET
                 
                 __DIVW21U:
000299 2400      	CLR  R0
00029a 2411      	CLR  R1
00029b e190      	LDI  R25,16
                 __DIVW21U1:
00029c 0faa      	LSL  R26
00029d 1fbb      	ROL  R27
00029e 1c00      	ROL  R0
00029f 1c11      	ROL  R1
0002a0 1a0e      	SUB  R0,R30
0002a1 0a1f      	SBC  R1,R31
0002a2 f418      	BRCC __DIVW21U2
0002a3 0e0e      	ADD  R0,R30
0002a4 1e1f      	ADC  R1,R31
0002a5 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002a6 60a1      	SBR  R26,1
                 __DIVW21U3:
0002a7 959a      	DEC  R25
0002a8 f799      	BRNE __DIVW21U1
0002a9 01fd      	MOVW R30,R26
0002aa 01d0      	MOVW R26,R0
0002ab 9508      	RET
                 
                 __DIVW21:
0002ac d01f      	RCALL __CHKSIGNW
0002ad dfeb      	RCALL __DIVW21U
0002ae f40e      	BRTC __DIVW211
0002af dfd8      	RCALL __ANEGW1
                 __DIVW211:
0002b0 9508      	RET
                 
                 __MODW21U:
0002b1 dfe7      	RCALL __DIVW21U
0002b2 01fd      	MOVW R30,R26
0002b3 9508      	RET
                 
                 __MODW21:
0002b4 94e8      	CLT
0002b5 ffb7      	SBRS R27,7
0002b6 c004      	RJMP __MODW211
0002b7 95a0      	COM  R26
0002b8 95b0      	COM  R27
0002b9 9611      	ADIW R26,1
0002ba 9468      	SET
                 __MODW211:
0002bb fdf7      	SBRC R31,7
0002bc dfcb      	RCALL __ANEGW1
0002bd dfdb      	RCALL __DIVW21U
0002be 01fd      	MOVW R30,R26
0002bf f40e      	BRTC __MODW212
0002c0 dfc7      	RCALL __ANEGW1
                 __MODW212:
0002c1 9508      	RET
                 
                 __MANDW12:
0002c2 94e8      	CLT
0002c3 fff7      	SBRS R31,7
0002c4 c002      	RJMP __MANDW121
0002c5 dfc2      	RCALL __ANEGW1
0002c6 9468      	SET
                 __MANDW121:
0002c7 23ea      	AND  R30,R26
0002c8 23fb      	AND  R31,R27
0002c9 f40e      	BRTC __MANDW122
0002ca dfbd      	RCALL __ANEGW1
                 __MANDW122:
0002cb 9508      	RET
                 
                 __CHKSIGNW:
0002cc 94e8      	CLT
0002cd fff7      	SBRS R31,7
0002ce c002      	RJMP __CHKSW1
0002cf dfb8      	RCALL __ANEGW1
0002d0 9468      	SET
                 __CHKSW1:
0002d1 ffb7      	SBRS R27,7
0002d2 c006      	RJMP __CHKSW2
0002d3 95a0      	COM  R26
0002d4 95b0      	COM  R27
0002d5 9611      	ADIW R26,1
0002d6 f800      	BLD  R0,0
0002d7 9403      	INC  R0
0002d8 fa00      	BST  R0,0
                 __CHKSW2:
0002d9 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  28 r1 :  17 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  20 r17:  27 r18:   7 r19:   8 r20:   8 r21:  44 r22:  33 r23:  30 
r24:  17 r25:  23 r26:  81 r27:  29 r28:   5 r29:   1 r30:  95 r31:  43 
x  :   5 y  :  45 z  :   7 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :  10 
adiw  :   8 and   :   4 andi  :   1 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   9 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   1 brmi  :   4 brne  :  13 brpl  :   4 brsh  :   4 brtc  :   4 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  :  28 
cbi   :   2 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  15 cls   :   0 clt   :   5 clv   :   0 clz   :   0 com   :   8 
cp    :   0 cpc   :   0 cpi   :  16 cpse  :   0 dec   :   6 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   2 jmp   :  24 ld    :   6 ldd   :  18 ldi   :  89 
lds   :   0 lpm   :   7 lsl   :  11 lsr   :   1 mov   :  30 movw  :  16 
mul   :   9 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   0 
ori   :   1 out   :  13 pop   :  11 push  :  10 rcall :  45 ret   :  26 
reti  :   0 rjmp  :  36 rol   :  14 ror   :   7 sbc   :   2 sbci  :   7 
sbi   :   4 sbic  :   0 sbis  :   1 sbiw  :   6 sbr   :   1 sbrc  :   1 
sbrs  :   5 sec   :   1 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   5 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  25 std   :   1 sts   :   0 sub   :   2 subi  :  11 swap  :   0 
tst   :   9 wdr   :   1 
Instructions used: 67 out of 116 (57.8%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005b4   1400     60   1460   16384   8.9%
[.dseg] 0x000060 0x00017b      0     27     27    1024   2.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 1 warnings
